syntax = "proto3";
package admin_subject;
option go_package = "handlers/admin/subject";

message Meta {
  string message = 1;
  uint32 status = 2;
  string code = 3;
}

message Pagination {
  uint32 page = 1;
  uint32 limit = 2;
  uint32 prev = 3;
  uint32 next = 4;
  uint32 total_pages = 5;
  uint32 total_records = 6;
}

message GetListRequest {
  uint32 page = 1;
  uint32 limit = 2;
  string search = 3;
  repeated string curriculum_id = 4;
  string prerequisite_of_subject_id = 5;
  string equivalent_to_curriculum_id = 6;
  uint32 semester_package = 7;
  string class_semester_id = 8;
  string is_thesis = 9;
  bool is_mbkm = 10;
  string study_program_id = 11;
}

message GetListResponseDataClass {
  string id = 1;
  string name = 2;
}

message GetListResponseData {
  string id = 1;
  string study_program_id = 2;
  string study_program_name = 3;
  string curriculum_id = 4;
  string curriculum_name = 5;
  string code = 6;
  string name = 7;
  bool is_mandatory = 8;
  uint32 semester_package = 9;
  uint32 theory_credit = 10;
  uint32 practicum_credit = 11;
  uint32 field_practicum_credit = 12;
  string subject_prerequisite_id = 13;
  string prerequisite_type = 14;
  double prerequisite_minimum_grade_point = 15;
  string equivalent_study_program_id = 16;
  string equivalent_study_program_name = 17;
  string equivalent_curriculum_id = 18;
  string equivalent_curriculum_name = 19;
  string equivalent_subject_code = 20;
  string equivalent_subject_name = 21;
  string equivalent_subject_id = 22;
  string subject_category_id = 23;
  string subject_category_name = 24;
  repeated GetListResponseDataClass classes = 25;
  bool is_thesis = 26;
  bool is_mbkm = 27;
  uint32 total_lesson_plan = 28;
}

message GetListResponse {
  Meta meta = 1;
  Pagination pagination = 2;
  repeated GetListResponseData data = 3;
}

message GetDetailRequest {
  string id = 1;
}

message GetDetailResponseDataPrerequisiteSubject {
  string id = 1;
  string code = 2;
  string name = 3;
  string prerequisite_type = 4;
  double minimum_grade_point = 5;
}

message GetDetailResponseData {
  string id = 1;
  string study_program_id = 2;
  string study_program_name = 3;
  string curriculum_id = 4;
  string curriculum_name = 5;
  string code = 6;
  string name = 7;
  string short_name	= 8;
  string english_name	= 9;
  string english_short_name	= 10;
  bool is_mandatory = 11;
  string trait = 12;
  string type	= 13;
  string subject_category_id = 14;
  string subject_category_name = 15;
  string curriculum_type = 16;
  uint32 theory_credit = 17;
  uint32 practicum_credit = 18;
  uint32 field_practicum_credit = 19;
  uint32 semester_package = 20;
  uint32 repeat_course_limit = 21;
  bool is_active = 22;
  bool has_lecture_unit = 23;
  bool has_teaching_material = 24;
  bool has_lecture_summary = 25;
  string supporting_lecturer_id = 26;
  string supporting_lecturer_name = 27;
  string start_date = 28;
  string end_date = 29;
  double minimum_passing_grade_point = 30;
  uint32 minimum_mandatory_credit_taken = 31;
  uint32 minimum_optional_credit_taken = 32;
  uint32 minimum_total_credit_taken = 33;
  uint32 minimum_mandatory_credit_passed = 34;
  uint32 minimum_optional_credit_passed = 35;
  uint32 minimum_total_credit_passed = 36;
  double minimum_gpa = 37;
  string abstraction = 38;
  string syllabus_path	= 39;
  string syllabus_path_type	= 40;
  string syllabus_url	= 41;
  repeated GetDetailResponseDataPrerequisiteSubject prerequisite_subjects = 42;
  bool is_thesis = 43;
  bool is_mbkm = 44;
}

message GetDetailResponse {
  Meta meta = 1;
  GetDetailResponseData data = 2;
}

message CreateRequest {
  string curriculum_id = 1;
  string code = 2;
  string name = 3;
  string short_name	= 4;
  string english_name	= 5;
  string english_short_name	= 6;
  bool is_mandatory = 7;
  string trait = 8;
  string type	= 9;
  string subject_category_id = 10;
  string curriculum_type = 11;
  uint32 theory_credit = 12;
  uint32 practicum_credit = 13;
  uint32 field_practicum_credit = 14;
  uint32 semester_package = 15;
  uint32 repeat_course_limit = 16;
  bool is_active = 17;
  bool has_lecture_unit = 18;
  bool has_teaching_material = 19;
  bool has_lecture_summary = 20;
  string supporting_lecturer_id = 21;
  string start_date = 22;
  string end_date = 23;
  double minimum_passing_grade_point = 24;
  uint32 minimum_mandatory_credit_taken = 25;
  uint32 minimum_optional_credit_taken = 26;
  uint32 minimum_total_credit_taken = 27;
  uint32 minimum_mandatory_credit_passed = 28;
  uint32 minimum_optional_credit_passed = 29;
  uint32 minimum_total_credit_passed = 30;
  double minimum_gpa = 31;
  string abstraction = 32;
  string syllabus_path	= 33;
  string syllabus_path_type	= 34;
  bool is_thesis = 35;
  bool is_mbkm = 36;
}

message CreateResponseData {}

message CreateResponse {
  Meta meta = 1;
  CreateResponseData data = 2;
}

message UpdateRequest {
  string id = 1;
  string curriculum_id = 2;
  string code = 3;
  string name = 4;
  string short_name	= 5;
  string english_name	= 6;
  string english_short_name	= 7;
  bool is_mandatory = 8;
  string trait = 9;
  string type	= 10;
  string subject_category_id = 11;
  string curriculum_type = 12;
  uint32 theory_credit = 13;
  uint32 practicum_credit = 14;
  uint32 field_practicum_credit = 15;
  uint32 semester_package = 16;
  uint32 repeat_course_limit = 17;
  bool is_active = 18;
  bool has_lecture_unit = 19;
  bool has_teaching_material = 20;
  bool has_lecture_summary = 21;
  string supporting_lecturer_id = 22;
  string start_date = 23;
  string end_date = 24;
  double minimum_passing_grade_point = 25;
  uint32 minimum_mandatory_credit_taken = 26;
  uint32 minimum_optional_credit_taken = 27;
  uint32 minimum_total_credit_taken = 28;
  uint32 minimum_mandatory_credit_passed = 29;
  uint32 minimum_optional_credit_passed = 30;
  uint32 minimum_total_credit_passed = 31;
  double minimum_gpa = 32;
  string abstraction = 33;
  string syllabus_path	= 34;
  string syllabus_path_type	= 35;
  bool is_thesis = 36;
  bool is_mbkm = 37;
}

message UpdateResponseData {}

message UpdateResponse {
  Meta meta = 1;
  UpdateResponseData data = 2;
}

message DeleteRequest {
  string id = 1;
}

message DeleteResponseData {}

message DeleteResponse {
  Meta meta = 1;
  DeleteResponseData data = 2;
}

message SetPrerequisiteSubjectRequestPrerequisite {
  string id = 1;
  string prerequisite_type = 2;
  double minimum_grade_point = 3;
}

message SetPrerequisiteSubjectRequest {
  string id = 1;
  repeated SetPrerequisiteSubjectRequestPrerequisite prerequisites = 2;
}

message SetPrerequisiteSubjectResponseData {}

message SetPrerequisiteSubjectResponse {
  Meta meta = 1;
  SetPrerequisiteSubjectResponseData data = 2;
}

message SetEquivalentSubjectRequest {
  string subject_id = 1;
  string equivalent_subject_id = 2;
  bool is_vice_versa = 3;
}

message SetEquivalentSubjectResponseData {}

message SetEquivalentSubjectResponse {
  Meta meta = 1;
  SetEquivalentSubjectResponseData data = 2;
}

message DeleteEquivalentSubjectRequest {
  string subject_id = 1;
  string equivalent_subject_id = 2;
}

message DeleteEquivalentSubjectResponseData {}

message DeleteEquivalentSubjectResponse {
  Meta meta = 1;
  DeleteEquivalentSubjectResponseData data = 2;
}


service AdminSubjectHandler {
  rpc GetList(GetListRequest) returns (GetListResponse) {}
  rpc GetDetail(GetDetailRequest) returns (GetDetailResponse) {}
  rpc Create(CreateRequest) returns (CreateResponse) {}
  rpc Update(UpdateRequest) returns (UpdateResponse) {}
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
  rpc SetPrerequisiteSubject(SetPrerequisiteSubjectRequest) returns (SetPrerequisiteSubjectResponse) {}
  rpc SetEquivalentSubject(SetEquivalentSubjectRequest) returns (SetEquivalentSubjectResponse) {}
  rpc DeleteEquivalentSubject(DeleteEquivalentSubjectRequest) returns (DeleteEquivalentSubjectResponse) {}
}
