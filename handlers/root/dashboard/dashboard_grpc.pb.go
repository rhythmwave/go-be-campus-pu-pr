// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: root/dashboard.proto

package dashboard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RootDashboardHandlerClient is the client API for RootDashboardHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RootDashboardHandlerClient interface {
	GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*GetDashboardResponse, error)
}

type rootDashboardHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewRootDashboardHandlerClient(cc grpc.ClientConnInterface) RootDashboardHandlerClient {
	return &rootDashboardHandlerClient{cc}
}

func (c *rootDashboardHandlerClient) GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*GetDashboardResponse, error) {
	out := new(GetDashboardResponse)
	err := c.cc.Invoke(ctx, "/root_dashboard.RootDashboardHandler/GetDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RootDashboardHandlerServer is the server API for RootDashboardHandler service.
// All implementations must embed UnimplementedRootDashboardHandlerServer
// for forward compatibility
type RootDashboardHandlerServer interface {
	GetDashboard(context.Context, *GetDashboardRequest) (*GetDashboardResponse, error)
	mustEmbedUnimplementedRootDashboardHandlerServer()
}

// UnimplementedRootDashboardHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedRootDashboardHandlerServer struct {
}

func (UnimplementedRootDashboardHandlerServer) GetDashboard(context.Context, *GetDashboardRequest) (*GetDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboard not implemented")
}
func (UnimplementedRootDashboardHandlerServer) mustEmbedUnimplementedRootDashboardHandlerServer() {}

// UnsafeRootDashboardHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RootDashboardHandlerServer will
// result in compilation errors.
type UnsafeRootDashboardHandlerServer interface {
	mustEmbedUnimplementedRootDashboardHandlerServer()
}

func RegisterRootDashboardHandlerServer(s grpc.ServiceRegistrar, srv RootDashboardHandlerServer) {
	s.RegisterService(&RootDashboardHandler_ServiceDesc, srv)
}

func _RootDashboardHandler_GetDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootDashboardHandlerServer).GetDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/root_dashboard.RootDashboardHandler/GetDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootDashboardHandlerServer).GetDashboard(ctx, req.(*GetDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RootDashboardHandler_ServiceDesc is the grpc.ServiceDesc for RootDashboardHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RootDashboardHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "root_dashboard.RootDashboardHandler",
	HandlerType: (*RootDashboardHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDashboard",
			Handler:    _RootDashboardHandler_GetDashboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "root/dashboard.proto",
}
