// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: general/location.proto

package location

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeneralLocationHandlerClient is the client API for GeneralLocationHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneralLocationHandlerClient interface {
	GetListCountry(ctx context.Context, in *GetListCountryRequest, opts ...grpc.CallOption) (*GetListCountryResponse, error)
	GetListProvince(ctx context.Context, in *GetListProvinceRequest, opts ...grpc.CallOption) (*GetListProvinceResponse, error)
	GetListRegency(ctx context.Context, in *GetListRegencyRequest, opts ...grpc.CallOption) (*GetListRegencyResponse, error)
	GetListDistrict(ctx context.Context, in *GetListDistrictRequest, opts ...grpc.CallOption) (*GetListDistrictResponse, error)
	GetListVillage(ctx context.Context, in *GetListVillageRequest, opts ...grpc.CallOption) (*GetListVillageResponse, error)
	TempCreateData(ctx context.Context, in *TempCreateDataRequest, opts ...grpc.CallOption) (*TempCreateDataResponse, error)
	TempGetData(ctx context.Context, in *TempGetDataRequest, opts ...grpc.CallOption) (*TempGetDataResponse, error)
}

type generalLocationHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneralLocationHandlerClient(cc grpc.ClientConnInterface) GeneralLocationHandlerClient {
	return &generalLocationHandlerClient{cc}
}

func (c *generalLocationHandlerClient) GetListCountry(ctx context.Context, in *GetListCountryRequest, opts ...grpc.CallOption) (*GetListCountryResponse, error) {
	out := new(GetListCountryResponse)
	err := c.cc.Invoke(ctx, "/general_location.GeneralLocationHandler/GetListCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalLocationHandlerClient) GetListProvince(ctx context.Context, in *GetListProvinceRequest, opts ...grpc.CallOption) (*GetListProvinceResponse, error) {
	out := new(GetListProvinceResponse)
	err := c.cc.Invoke(ctx, "/general_location.GeneralLocationHandler/GetListProvince", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalLocationHandlerClient) GetListRegency(ctx context.Context, in *GetListRegencyRequest, opts ...grpc.CallOption) (*GetListRegencyResponse, error) {
	out := new(GetListRegencyResponse)
	err := c.cc.Invoke(ctx, "/general_location.GeneralLocationHandler/GetListRegency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalLocationHandlerClient) GetListDistrict(ctx context.Context, in *GetListDistrictRequest, opts ...grpc.CallOption) (*GetListDistrictResponse, error) {
	out := new(GetListDistrictResponse)
	err := c.cc.Invoke(ctx, "/general_location.GeneralLocationHandler/GetListDistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalLocationHandlerClient) GetListVillage(ctx context.Context, in *GetListVillageRequest, opts ...grpc.CallOption) (*GetListVillageResponse, error) {
	out := new(GetListVillageResponse)
	err := c.cc.Invoke(ctx, "/general_location.GeneralLocationHandler/GetListVillage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalLocationHandlerClient) TempCreateData(ctx context.Context, in *TempCreateDataRequest, opts ...grpc.CallOption) (*TempCreateDataResponse, error) {
	out := new(TempCreateDataResponse)
	err := c.cc.Invoke(ctx, "/general_location.GeneralLocationHandler/TempCreateData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalLocationHandlerClient) TempGetData(ctx context.Context, in *TempGetDataRequest, opts ...grpc.CallOption) (*TempGetDataResponse, error) {
	out := new(TempGetDataResponse)
	err := c.cc.Invoke(ctx, "/general_location.GeneralLocationHandler/TempGetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneralLocationHandlerServer is the server API for GeneralLocationHandler service.
// All implementations must embed UnimplementedGeneralLocationHandlerServer
// for forward compatibility
type GeneralLocationHandlerServer interface {
	GetListCountry(context.Context, *GetListCountryRequest) (*GetListCountryResponse, error)
	GetListProvince(context.Context, *GetListProvinceRequest) (*GetListProvinceResponse, error)
	GetListRegency(context.Context, *GetListRegencyRequest) (*GetListRegencyResponse, error)
	GetListDistrict(context.Context, *GetListDistrictRequest) (*GetListDistrictResponse, error)
	GetListVillage(context.Context, *GetListVillageRequest) (*GetListVillageResponse, error)
	TempCreateData(context.Context, *TempCreateDataRequest) (*TempCreateDataResponse, error)
	TempGetData(context.Context, *TempGetDataRequest) (*TempGetDataResponse, error)
	mustEmbedUnimplementedGeneralLocationHandlerServer()
}

// UnimplementedGeneralLocationHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedGeneralLocationHandlerServer struct {
}

func (UnimplementedGeneralLocationHandlerServer) GetListCountry(context.Context, *GetListCountryRequest) (*GetListCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCountry not implemented")
}
func (UnimplementedGeneralLocationHandlerServer) GetListProvince(context.Context, *GetListProvinceRequest) (*GetListProvinceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListProvince not implemented")
}
func (UnimplementedGeneralLocationHandlerServer) GetListRegency(context.Context, *GetListRegencyRequest) (*GetListRegencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListRegency not implemented")
}
func (UnimplementedGeneralLocationHandlerServer) GetListDistrict(context.Context, *GetListDistrictRequest) (*GetListDistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListDistrict not implemented")
}
func (UnimplementedGeneralLocationHandlerServer) GetListVillage(context.Context, *GetListVillageRequest) (*GetListVillageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListVillage not implemented")
}
func (UnimplementedGeneralLocationHandlerServer) TempCreateData(context.Context, *TempCreateDataRequest) (*TempCreateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TempCreateData not implemented")
}
func (UnimplementedGeneralLocationHandlerServer) TempGetData(context.Context, *TempGetDataRequest) (*TempGetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TempGetData not implemented")
}
func (UnimplementedGeneralLocationHandlerServer) mustEmbedUnimplementedGeneralLocationHandlerServer() {
}

// UnsafeGeneralLocationHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneralLocationHandlerServer will
// result in compilation errors.
type UnsafeGeneralLocationHandlerServer interface {
	mustEmbedUnimplementedGeneralLocationHandlerServer()
}

func RegisterGeneralLocationHandlerServer(s grpc.ServiceRegistrar, srv GeneralLocationHandlerServer) {
	s.RegisterService(&GeneralLocationHandler_ServiceDesc, srv)
}

func _GeneralLocationHandler_GetListCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralLocationHandlerServer).GetListCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general_location.GeneralLocationHandler/GetListCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralLocationHandlerServer).GetListCountry(ctx, req.(*GetListCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneralLocationHandler_GetListProvince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListProvinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralLocationHandlerServer).GetListProvince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general_location.GeneralLocationHandler/GetListProvince",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralLocationHandlerServer).GetListProvince(ctx, req.(*GetListProvinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneralLocationHandler_GetListRegency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRegencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralLocationHandlerServer).GetListRegency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general_location.GeneralLocationHandler/GetListRegency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralLocationHandlerServer).GetListRegency(ctx, req.(*GetListRegencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneralLocationHandler_GetListDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralLocationHandlerServer).GetListDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general_location.GeneralLocationHandler/GetListDistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralLocationHandlerServer).GetListDistrict(ctx, req.(*GetListDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneralLocationHandler_GetListVillage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListVillageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralLocationHandlerServer).GetListVillage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general_location.GeneralLocationHandler/GetListVillage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralLocationHandlerServer).GetListVillage(ctx, req.(*GetListVillageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneralLocationHandler_TempCreateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempCreateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralLocationHandlerServer).TempCreateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general_location.GeneralLocationHandler/TempCreateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralLocationHandlerServer).TempCreateData(ctx, req.(*TempCreateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneralLocationHandler_TempGetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempGetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralLocationHandlerServer).TempGetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general_location.GeneralLocationHandler/TempGetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralLocationHandlerServer).TempGetData(ctx, req.(*TempGetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeneralLocationHandler_ServiceDesc is the grpc.ServiceDesc for GeneralLocationHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeneralLocationHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "general_location.GeneralLocationHandler",
	HandlerType: (*GeneralLocationHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListCountry",
			Handler:    _GeneralLocationHandler_GetListCountry_Handler,
		},
		{
			MethodName: "GetListProvince",
			Handler:    _GeneralLocationHandler_GetListProvince_Handler,
		},
		{
			MethodName: "GetListRegency",
			Handler:    _GeneralLocationHandler_GetListRegency_Handler,
		},
		{
			MethodName: "GetListDistrict",
			Handler:    _GeneralLocationHandler_GetListDistrict_Handler,
		},
		{
			MethodName: "GetListVillage",
			Handler:    _GeneralLocationHandler_GetListVillage_Handler,
		},
		{
			MethodName: "TempCreateData",
			Handler:    _GeneralLocationHandler_TempCreateData_Handler,
		},
		{
			MethodName: "TempGetData",
			Handler:    _GeneralLocationHandler_TempGetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "general/location.proto",
}
