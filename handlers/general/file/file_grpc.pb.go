// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: general/file.proto

package file

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeneralFileHandlerClient is the client API for GeneralFileHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneralFileHandlerClient interface {
	UploadBase64Temp(ctx context.Context, in *FileBase64Request, opts ...grpc.CallOption) (*FileResponse, error)
}

type generalFileHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneralFileHandlerClient(cc grpc.ClientConnInterface) GeneralFileHandlerClient {
	return &generalFileHandlerClient{cc}
}

func (c *generalFileHandlerClient) UploadBase64Temp(ctx context.Context, in *FileBase64Request, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, "/general_file.GeneralFileHandler/UploadBase64Temp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneralFileHandlerServer is the server API for GeneralFileHandler service.
// All implementations must embed UnimplementedGeneralFileHandlerServer
// for forward compatibility
type GeneralFileHandlerServer interface {
	UploadBase64Temp(context.Context, *FileBase64Request) (*FileResponse, error)
	mustEmbedUnimplementedGeneralFileHandlerServer()
}

// UnimplementedGeneralFileHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedGeneralFileHandlerServer struct {
}

func (UnimplementedGeneralFileHandlerServer) UploadBase64Temp(context.Context, *FileBase64Request) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadBase64Temp not implemented")
}
func (UnimplementedGeneralFileHandlerServer) mustEmbedUnimplementedGeneralFileHandlerServer() {}

// UnsafeGeneralFileHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneralFileHandlerServer will
// result in compilation errors.
type UnsafeGeneralFileHandlerServer interface {
	mustEmbedUnimplementedGeneralFileHandlerServer()
}

func RegisterGeneralFileHandlerServer(s grpc.ServiceRegistrar, srv GeneralFileHandlerServer) {
	s.RegisterService(&GeneralFileHandler_ServiceDesc, srv)
}

func _GeneralFileHandler_UploadBase64Temp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileBase64Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralFileHandlerServer).UploadBase64Temp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general_file.GeneralFileHandler/UploadBase64Temp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralFileHandlerServer).UploadBase64Temp(ctx, req.(*FileBase64Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GeneralFileHandler_ServiceDesc is the grpc.ServiceDesc for GeneralFileHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeneralFileHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "general_file.GeneralFileHandler",
	HandlerType: (*GeneralFileHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadBase64Temp",
			Handler:    _GeneralFileHandler_UploadBase64Temp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "general/file.proto",
}
