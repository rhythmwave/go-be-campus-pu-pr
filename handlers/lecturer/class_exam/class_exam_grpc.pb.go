// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: lecturer/class_exam.proto

package class_exam

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LecturerClassExamHandlerClient is the client API for LecturerClassExamHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LecturerClassExamHandlerClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetSubmission(ctx context.Context, in *GetSubmissionRequest, opts ...grpc.CallOption) (*GetSubmissionResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GradeSubmission(ctx context.Context, in *GradeSubmissionRequest, opts ...grpc.CallOption) (*GradeSubmissionResponse, error)
}

type lecturerClassExamHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewLecturerClassExamHandlerClient(cc grpc.ClientConnInterface) LecturerClassExamHandlerClient {
	return &lecturerClassExamHandlerClient{cc}
}

func (c *lecturerClassExamHandlerClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class_exam.LecturerClassExamHandler/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecturerClassExamHandlerClient) GetSubmission(ctx context.Context, in *GetSubmissionRequest, opts ...grpc.CallOption) (*GetSubmissionResponse, error) {
	out := new(GetSubmissionResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class_exam.LecturerClassExamHandler/GetSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecturerClassExamHandlerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class_exam.LecturerClassExamHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecturerClassExamHandlerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class_exam.LecturerClassExamHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecturerClassExamHandlerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class_exam.LecturerClassExamHandler/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecturerClassExamHandlerClient) GradeSubmission(ctx context.Context, in *GradeSubmissionRequest, opts ...grpc.CallOption) (*GradeSubmissionResponse, error) {
	out := new(GradeSubmissionResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class_exam.LecturerClassExamHandler/GradeSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LecturerClassExamHandlerServer is the server API for LecturerClassExamHandler service.
// All implementations must embed UnimplementedLecturerClassExamHandlerServer
// for forward compatibility
type LecturerClassExamHandlerServer interface {
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	GetSubmission(context.Context, *GetSubmissionRequest) (*GetSubmissionResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	GradeSubmission(context.Context, *GradeSubmissionRequest) (*GradeSubmissionResponse, error)
	mustEmbedUnimplementedLecturerClassExamHandlerServer()
}

// UnimplementedLecturerClassExamHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedLecturerClassExamHandlerServer struct {
}

func (UnimplementedLecturerClassExamHandlerServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedLecturerClassExamHandlerServer) GetSubmission(context.Context, *GetSubmissionRequest) (*GetSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmission not implemented")
}
func (UnimplementedLecturerClassExamHandlerServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLecturerClassExamHandlerServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLecturerClassExamHandlerServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLecturerClassExamHandlerServer) GradeSubmission(context.Context, *GradeSubmissionRequest) (*GradeSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GradeSubmission not implemented")
}
func (UnimplementedLecturerClassExamHandlerServer) mustEmbedUnimplementedLecturerClassExamHandlerServer() {
}

// UnsafeLecturerClassExamHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LecturerClassExamHandlerServer will
// result in compilation errors.
type UnsafeLecturerClassExamHandlerServer interface {
	mustEmbedUnimplementedLecturerClassExamHandlerServer()
}

func RegisterLecturerClassExamHandlerServer(s grpc.ServiceRegistrar, srv LecturerClassExamHandlerServer) {
	s.RegisterService(&LecturerClassExamHandler_ServiceDesc, srv)
}

func _LecturerClassExamHandler_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassExamHandlerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class_exam.LecturerClassExamHandler/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassExamHandlerServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LecturerClassExamHandler_GetSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassExamHandlerServer).GetSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class_exam.LecturerClassExamHandler/GetSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassExamHandlerServer).GetSubmission(ctx, req.(*GetSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LecturerClassExamHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassExamHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class_exam.LecturerClassExamHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassExamHandlerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LecturerClassExamHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassExamHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class_exam.LecturerClassExamHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassExamHandlerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LecturerClassExamHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassExamHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class_exam.LecturerClassExamHandler/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassExamHandlerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LecturerClassExamHandler_GradeSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradeSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassExamHandlerServer).GradeSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class_exam.LecturerClassExamHandler/GradeSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassExamHandlerServer).GradeSubmission(ctx, req.(*GradeSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LecturerClassExamHandler_ServiceDesc is the grpc.ServiceDesc for LecturerClassExamHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LecturerClassExamHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lecturer_class_exam.LecturerClassExamHandler",
	HandlerType: (*LecturerClassExamHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _LecturerClassExamHandler_GetList_Handler,
		},
		{
			MethodName: "GetSubmission",
			Handler:    _LecturerClassExamHandler_GetSubmission_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _LecturerClassExamHandler_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LecturerClassExamHandler_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LecturerClassExamHandler_Delete_Handler,
		},
		{
			MethodName: "GradeSubmission",
			Handler:    _LecturerClassExamHandler_GradeSubmission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lecturer/class_exam.proto",
}
