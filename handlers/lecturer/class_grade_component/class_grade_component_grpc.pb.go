// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: lecturer/class_grade_component.proto

package class_grade_component

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LecturerClassGradeComponentHandlerClient is the client API for LecturerClassGradeComponentHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LecturerClassGradeComponentHandlerClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
}

type lecturerClassGradeComponentHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewLecturerClassGradeComponentHandlerClient(cc grpc.ClientConnInterface) LecturerClassGradeComponentHandlerClient {
	return &lecturerClassGradeComponentHandlerClient{cc}
}

func (c *lecturerClassGradeComponentHandlerClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class_grade_component.LecturerClassGradeComponentHandler/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecturerClassGradeComponentHandlerClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class_grade_component.LecturerClassGradeComponentHandler/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LecturerClassGradeComponentHandlerServer is the server API for LecturerClassGradeComponentHandler service.
// All implementations must embed UnimplementedLecturerClassGradeComponentHandlerServer
// for forward compatibility
type LecturerClassGradeComponentHandlerServer interface {
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
	mustEmbedUnimplementedLecturerClassGradeComponentHandlerServer()
}

// UnimplementedLecturerClassGradeComponentHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedLecturerClassGradeComponentHandlerServer struct {
}

func (UnimplementedLecturerClassGradeComponentHandlerServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedLecturerClassGradeComponentHandlerServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedLecturerClassGradeComponentHandlerServer) mustEmbedUnimplementedLecturerClassGradeComponentHandlerServer() {
}

// UnsafeLecturerClassGradeComponentHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LecturerClassGradeComponentHandlerServer will
// result in compilation errors.
type UnsafeLecturerClassGradeComponentHandlerServer interface {
	mustEmbedUnimplementedLecturerClassGradeComponentHandlerServer()
}

func RegisterLecturerClassGradeComponentHandlerServer(s grpc.ServiceRegistrar, srv LecturerClassGradeComponentHandlerServer) {
	s.RegisterService(&LecturerClassGradeComponentHandler_ServiceDesc, srv)
}

func _LecturerClassGradeComponentHandler_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassGradeComponentHandlerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class_grade_component.LecturerClassGradeComponentHandler/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassGradeComponentHandlerServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LecturerClassGradeComponentHandler_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassGradeComponentHandlerServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class_grade_component.LecturerClassGradeComponentHandler/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassGradeComponentHandlerServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LecturerClassGradeComponentHandler_ServiceDesc is the grpc.ServiceDesc for LecturerClassGradeComponentHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LecturerClassGradeComponentHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lecturer_class_grade_component.LecturerClassGradeComponentHandler",
	HandlerType: (*LecturerClassGradeComponentHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _LecturerClassGradeComponentHandler_GetList_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _LecturerClassGradeComponentHandler_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lecturer/class_grade_component.proto",
}
