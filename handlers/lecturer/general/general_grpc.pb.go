// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: lecturer/general.proto

package general

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LecturerGeneralHandlerClient is the client API for LecturerGeneralHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LecturerGeneralHandlerClient interface {
	GetSemesterSummary(ctx context.Context, in *GetSemesterSummaryRequest, opts ...grpc.CallOption) (*GetSemesterSummaryResponse, error)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
}

type lecturerGeneralHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewLecturerGeneralHandlerClient(cc grpc.ClientConnInterface) LecturerGeneralHandlerClient {
	return &lecturerGeneralHandlerClient{cc}
}

func (c *lecturerGeneralHandlerClient) GetSemesterSummary(ctx context.Context, in *GetSemesterSummaryRequest, opts ...grpc.CallOption) (*GetSemesterSummaryResponse, error) {
	out := new(GetSemesterSummaryResponse)
	err := c.cc.Invoke(ctx, "/lecturer_general.LecturerGeneralHandler/GetSemesterSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecturerGeneralHandlerClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, "/lecturer_general.LecturerGeneralHandler/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LecturerGeneralHandlerServer is the server API for LecturerGeneralHandler service.
// All implementations must embed UnimplementedLecturerGeneralHandlerServer
// for forward compatibility
type LecturerGeneralHandlerServer interface {
	GetSemesterSummary(context.Context, *GetSemesterSummaryRequest) (*GetSemesterSummaryResponse, error)
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	mustEmbedUnimplementedLecturerGeneralHandlerServer()
}

// UnimplementedLecturerGeneralHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedLecturerGeneralHandlerServer struct {
}

func (UnimplementedLecturerGeneralHandlerServer) GetSemesterSummary(context.Context, *GetSemesterSummaryRequest) (*GetSemesterSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSemesterSummary not implemented")
}
func (UnimplementedLecturerGeneralHandlerServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedLecturerGeneralHandlerServer) mustEmbedUnimplementedLecturerGeneralHandlerServer() {
}

// UnsafeLecturerGeneralHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LecturerGeneralHandlerServer will
// result in compilation errors.
type UnsafeLecturerGeneralHandlerServer interface {
	mustEmbedUnimplementedLecturerGeneralHandlerServer()
}

func RegisterLecturerGeneralHandlerServer(s grpc.ServiceRegistrar, srv LecturerGeneralHandlerServer) {
	s.RegisterService(&LecturerGeneralHandler_ServiceDesc, srv)
}

func _LecturerGeneralHandler_GetSemesterSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSemesterSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerGeneralHandlerServer).GetSemesterSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_general.LecturerGeneralHandler/GetSemesterSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerGeneralHandlerServer).GetSemesterSummary(ctx, req.(*GetSemesterSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LecturerGeneralHandler_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerGeneralHandlerServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_general.LecturerGeneralHandler/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerGeneralHandlerServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LecturerGeneralHandler_ServiceDesc is the grpc.ServiceDesc for LecturerGeneralHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LecturerGeneralHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lecturer_general.LecturerGeneralHandler",
	HandlerType: (*LecturerGeneralHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSemesterSummary",
			Handler:    _LecturerGeneralHandler_GetSemesterSummary_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _LecturerGeneralHandler_GetProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lecturer/general.proto",
}
