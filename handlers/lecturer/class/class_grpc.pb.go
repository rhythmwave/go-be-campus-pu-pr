// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: lecturer/class.proto

package class

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LecturerClassHandlerClient is the client API for LecturerClassHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LecturerClassHandlerClient interface {
	GetActiveSemesterClassList(ctx context.Context, in *GetActiveSemesterClassListRequest, opts ...grpc.CallOption) (*GetActiveSemesterClassListResponse, error)
	GetAssignedClass(ctx context.Context, in *GetAssignedClassRequest, opts ...grpc.CallOption) (*GetAssignedClassResponse, error)
	GetAssignedSchedule(ctx context.Context, in *GetAssignedScheduleRequest, opts ...grpc.CallOption) (*GetAssignedScheduleResponse, error)
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error)
	BulkGradeStudentClass(ctx context.Context, in *BulkGradeStudentClassRequest, opts ...grpc.CallOption) (*BulkGradeStudentClassResponse, error)
}

type lecturerClassHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewLecturerClassHandlerClient(cc grpc.ClientConnInterface) LecturerClassHandlerClient {
	return &lecturerClassHandlerClient{cc}
}

func (c *lecturerClassHandlerClient) GetActiveSemesterClassList(ctx context.Context, in *GetActiveSemesterClassListRequest, opts ...grpc.CallOption) (*GetActiveSemesterClassListResponse, error) {
	out := new(GetActiveSemesterClassListResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class.LecturerClassHandler/GetActiveSemesterClassList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecturerClassHandlerClient) GetAssignedClass(ctx context.Context, in *GetAssignedClassRequest, opts ...grpc.CallOption) (*GetAssignedClassResponse, error) {
	out := new(GetAssignedClassResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class.LecturerClassHandler/GetAssignedClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecturerClassHandlerClient) GetAssignedSchedule(ctx context.Context, in *GetAssignedScheduleRequest, opts ...grpc.CallOption) (*GetAssignedScheduleResponse, error) {
	out := new(GetAssignedScheduleResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class.LecturerClassHandler/GetAssignedSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecturerClassHandlerClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error) {
	out := new(GetDetailResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class.LecturerClassHandler/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecturerClassHandlerClient) BulkGradeStudentClass(ctx context.Context, in *BulkGradeStudentClassRequest, opts ...grpc.CallOption) (*BulkGradeStudentClassResponse, error) {
	out := new(BulkGradeStudentClassResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class.LecturerClassHandler/BulkGradeStudentClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LecturerClassHandlerServer is the server API for LecturerClassHandler service.
// All implementations must embed UnimplementedLecturerClassHandlerServer
// for forward compatibility
type LecturerClassHandlerServer interface {
	GetActiveSemesterClassList(context.Context, *GetActiveSemesterClassListRequest) (*GetActiveSemesterClassListResponse, error)
	GetAssignedClass(context.Context, *GetAssignedClassRequest) (*GetAssignedClassResponse, error)
	GetAssignedSchedule(context.Context, *GetAssignedScheduleRequest) (*GetAssignedScheduleResponse, error)
	GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error)
	BulkGradeStudentClass(context.Context, *BulkGradeStudentClassRequest) (*BulkGradeStudentClassResponse, error)
	mustEmbedUnimplementedLecturerClassHandlerServer()
}

// UnimplementedLecturerClassHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedLecturerClassHandlerServer struct {
}

func (UnimplementedLecturerClassHandlerServer) GetActiveSemesterClassList(context.Context, *GetActiveSemesterClassListRequest) (*GetActiveSemesterClassListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveSemesterClassList not implemented")
}
func (UnimplementedLecturerClassHandlerServer) GetAssignedClass(context.Context, *GetAssignedClassRequest) (*GetAssignedClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedClass not implemented")
}
func (UnimplementedLecturerClassHandlerServer) GetAssignedSchedule(context.Context, *GetAssignedScheduleRequest) (*GetAssignedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedSchedule not implemented")
}
func (UnimplementedLecturerClassHandlerServer) GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedLecturerClassHandlerServer) BulkGradeStudentClass(context.Context, *BulkGradeStudentClassRequest) (*BulkGradeStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkGradeStudentClass not implemented")
}
func (UnimplementedLecturerClassHandlerServer) mustEmbedUnimplementedLecturerClassHandlerServer() {}

// UnsafeLecturerClassHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LecturerClassHandlerServer will
// result in compilation errors.
type UnsafeLecturerClassHandlerServer interface {
	mustEmbedUnimplementedLecturerClassHandlerServer()
}

func RegisterLecturerClassHandlerServer(s grpc.ServiceRegistrar, srv LecturerClassHandlerServer) {
	s.RegisterService(&LecturerClassHandler_ServiceDesc, srv)
}

func _LecturerClassHandler_GetActiveSemesterClassList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveSemesterClassListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassHandlerServer).GetActiveSemesterClassList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class.LecturerClassHandler/GetActiveSemesterClassList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassHandlerServer).GetActiveSemesterClassList(ctx, req.(*GetActiveSemesterClassListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LecturerClassHandler_GetAssignedClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignedClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassHandlerServer).GetAssignedClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class.LecturerClassHandler/GetAssignedClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassHandlerServer).GetAssignedClass(ctx, req.(*GetAssignedClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LecturerClassHandler_GetAssignedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignedScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassHandlerServer).GetAssignedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class.LecturerClassHandler/GetAssignedSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassHandlerServer).GetAssignedSchedule(ctx, req.(*GetAssignedScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LecturerClassHandler_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassHandlerServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class.LecturerClassHandler/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassHandlerServer).GetDetail(ctx, req.(*GetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LecturerClassHandler_BulkGradeStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkGradeStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassHandlerServer).BulkGradeStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class.LecturerClassHandler/BulkGradeStudentClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassHandlerServer).BulkGradeStudentClass(ctx, req.(*BulkGradeStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LecturerClassHandler_ServiceDesc is the grpc.ServiceDesc for LecturerClassHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LecturerClassHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lecturer_class.LecturerClassHandler",
	HandlerType: (*LecturerClassHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActiveSemesterClassList",
			Handler:    _LecturerClassHandler_GetActiveSemesterClassList_Handler,
		},
		{
			MethodName: "GetAssignedClass",
			Handler:    _LecturerClassHandler_GetAssignedClass_Handler,
		},
		{
			MethodName: "GetAssignedSchedule",
			Handler:    _LecturerClassHandler_GetAssignedSchedule_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _LecturerClassHandler_GetDetail_Handler,
		},
		{
			MethodName: "BulkGradeStudentClass",
			Handler:    _LecturerClassHandler_BulkGradeStudentClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lecturer/class.proto",
}
