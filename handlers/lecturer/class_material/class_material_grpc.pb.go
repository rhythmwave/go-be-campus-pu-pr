// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: lecturer/class_material.proto

package class_material

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LecturerClassMaterialHandlerClient is the client API for LecturerClassMaterialHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LecturerClassMaterialHandlerClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	BulkUpdateActivation(ctx context.Context, in *BulkUpdateActivationRequest, opts ...grpc.CallOption) (*BulkUpdateActivationResponse, error)
	BulkDelete(ctx context.Context, in *BulkDeleteRequest, opts ...grpc.CallOption) (*BulkDeleteResponse, error)
}

type lecturerClassMaterialHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewLecturerClassMaterialHandlerClient(cc grpc.ClientConnInterface) LecturerClassMaterialHandlerClient {
	return &lecturerClassMaterialHandlerClient{cc}
}

func (c *lecturerClassMaterialHandlerClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class_material.LecturerClassMaterialHandler/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecturerClassMaterialHandlerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class_material.LecturerClassMaterialHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecturerClassMaterialHandlerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class_material.LecturerClassMaterialHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecturerClassMaterialHandlerClient) BulkUpdateActivation(ctx context.Context, in *BulkUpdateActivationRequest, opts ...grpc.CallOption) (*BulkUpdateActivationResponse, error) {
	out := new(BulkUpdateActivationResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class_material.LecturerClassMaterialHandler/BulkUpdateActivation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lecturerClassMaterialHandlerClient) BulkDelete(ctx context.Context, in *BulkDeleteRequest, opts ...grpc.CallOption) (*BulkDeleteResponse, error) {
	out := new(BulkDeleteResponse)
	err := c.cc.Invoke(ctx, "/lecturer_class_material.LecturerClassMaterialHandler/BulkDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LecturerClassMaterialHandlerServer is the server API for LecturerClassMaterialHandler service.
// All implementations must embed UnimplementedLecturerClassMaterialHandlerServer
// for forward compatibility
type LecturerClassMaterialHandlerServer interface {
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	BulkUpdateActivation(context.Context, *BulkUpdateActivationRequest) (*BulkUpdateActivationResponse, error)
	BulkDelete(context.Context, *BulkDeleteRequest) (*BulkDeleteResponse, error)
	mustEmbedUnimplementedLecturerClassMaterialHandlerServer()
}

// UnimplementedLecturerClassMaterialHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedLecturerClassMaterialHandlerServer struct {
}

func (UnimplementedLecturerClassMaterialHandlerServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedLecturerClassMaterialHandlerServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLecturerClassMaterialHandlerServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLecturerClassMaterialHandlerServer) BulkUpdateActivation(context.Context, *BulkUpdateActivationRequest) (*BulkUpdateActivationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdateActivation not implemented")
}
func (UnimplementedLecturerClassMaterialHandlerServer) BulkDelete(context.Context, *BulkDeleteRequest) (*BulkDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDelete not implemented")
}
func (UnimplementedLecturerClassMaterialHandlerServer) mustEmbedUnimplementedLecturerClassMaterialHandlerServer() {
}

// UnsafeLecturerClassMaterialHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LecturerClassMaterialHandlerServer will
// result in compilation errors.
type UnsafeLecturerClassMaterialHandlerServer interface {
	mustEmbedUnimplementedLecturerClassMaterialHandlerServer()
}

func RegisterLecturerClassMaterialHandlerServer(s grpc.ServiceRegistrar, srv LecturerClassMaterialHandlerServer) {
	s.RegisterService(&LecturerClassMaterialHandler_ServiceDesc, srv)
}

func _LecturerClassMaterialHandler_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassMaterialHandlerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class_material.LecturerClassMaterialHandler/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassMaterialHandlerServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LecturerClassMaterialHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassMaterialHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class_material.LecturerClassMaterialHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassMaterialHandlerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LecturerClassMaterialHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassMaterialHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class_material.LecturerClassMaterialHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassMaterialHandlerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LecturerClassMaterialHandler_BulkUpdateActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassMaterialHandlerServer).BulkUpdateActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class_material.LecturerClassMaterialHandler/BulkUpdateActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassMaterialHandlerServer).BulkUpdateActivation(ctx, req.(*BulkUpdateActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LecturerClassMaterialHandler_BulkDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LecturerClassMaterialHandlerServer).BulkDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lecturer_class_material.LecturerClassMaterialHandler/BulkDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LecturerClassMaterialHandlerServer).BulkDelete(ctx, req.(*BulkDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LecturerClassMaterialHandler_ServiceDesc is the grpc.ServiceDesc for LecturerClassMaterialHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LecturerClassMaterialHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lecturer_class_material.LecturerClassMaterialHandler",
	HandlerType: (*LecturerClassMaterialHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _LecturerClassMaterialHandler_GetList_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _LecturerClassMaterialHandler_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LecturerClassMaterialHandler_Update_Handler,
		},
		{
			MethodName: "BulkUpdateActivation",
			Handler:    _LecturerClassMaterialHandler_BulkUpdateActivation_Handler,
		},
		{
			MethodName: "BulkDelete",
			Handler:    _LecturerClassMaterialHandler_BulkDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lecturer/class_material.proto",
}
