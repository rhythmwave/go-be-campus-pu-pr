// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: student/academic_guidance.proto

package academic_guidance

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentAcademicGuidanceHandlerClient is the client API for StudentAcademicGuidanceHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentAcademicGuidanceHandlerClient interface {
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error)
	GetSessionList(ctx context.Context, in *GetSessionListRequest, opts ...grpc.CallOption) (*GetSessionListResponse, error)
}

type studentAcademicGuidanceHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentAcademicGuidanceHandlerClient(cc grpc.ClientConnInterface) StudentAcademicGuidanceHandlerClient {
	return &studentAcademicGuidanceHandlerClient{cc}
}

func (c *studentAcademicGuidanceHandlerClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error) {
	out := new(GetDetailResponse)
	err := c.cc.Invoke(ctx, "/student_academic_guidance.StudentAcademicGuidanceHandler/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentAcademicGuidanceHandlerClient) GetSessionList(ctx context.Context, in *GetSessionListRequest, opts ...grpc.CallOption) (*GetSessionListResponse, error) {
	out := new(GetSessionListResponse)
	err := c.cc.Invoke(ctx, "/student_academic_guidance.StudentAcademicGuidanceHandler/GetSessionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentAcademicGuidanceHandlerServer is the server API for StudentAcademicGuidanceHandler service.
// All implementations must embed UnimplementedStudentAcademicGuidanceHandlerServer
// for forward compatibility
type StudentAcademicGuidanceHandlerServer interface {
	GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error)
	GetSessionList(context.Context, *GetSessionListRequest) (*GetSessionListResponse, error)
	mustEmbedUnimplementedStudentAcademicGuidanceHandlerServer()
}

// UnimplementedStudentAcademicGuidanceHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedStudentAcademicGuidanceHandlerServer struct {
}

func (UnimplementedStudentAcademicGuidanceHandlerServer) GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedStudentAcademicGuidanceHandlerServer) GetSessionList(context.Context, *GetSessionListRequest) (*GetSessionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionList not implemented")
}
func (UnimplementedStudentAcademicGuidanceHandlerServer) mustEmbedUnimplementedStudentAcademicGuidanceHandlerServer() {
}

// UnsafeStudentAcademicGuidanceHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentAcademicGuidanceHandlerServer will
// result in compilation errors.
type UnsafeStudentAcademicGuidanceHandlerServer interface {
	mustEmbedUnimplementedStudentAcademicGuidanceHandlerServer()
}

func RegisterStudentAcademicGuidanceHandlerServer(s grpc.ServiceRegistrar, srv StudentAcademicGuidanceHandlerServer) {
	s.RegisterService(&StudentAcademicGuidanceHandler_ServiceDesc, srv)
}

func _StudentAcademicGuidanceHandler_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentAcademicGuidanceHandlerServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_academic_guidance.StudentAcademicGuidanceHandler/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentAcademicGuidanceHandlerServer).GetDetail(ctx, req.(*GetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentAcademicGuidanceHandler_GetSessionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentAcademicGuidanceHandlerServer).GetSessionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_academic_guidance.StudentAcademicGuidanceHandler/GetSessionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentAcademicGuidanceHandlerServer).GetSessionList(ctx, req.(*GetSessionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentAcademicGuidanceHandler_ServiceDesc is the grpc.ServiceDesc for StudentAcademicGuidanceHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentAcademicGuidanceHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "student_academic_guidance.StudentAcademicGuidanceHandler",
	HandlerType: (*StudentAcademicGuidanceHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDetail",
			Handler:    _StudentAcademicGuidanceHandler_GetDetail_Handler,
		},
		{
			MethodName: "GetSessionList",
			Handler:    _StudentAcademicGuidanceHandler_GetSessionList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "student/academic_guidance.proto",
}
