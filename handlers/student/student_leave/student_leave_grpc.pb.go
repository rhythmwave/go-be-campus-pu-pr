// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: student/student_leave.proto

package student_leave

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentStudentLeaveHandlerClient is the client API for StudentStudentLeaveHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentStudentLeaveHandlerClient interface {
	GetListRequests(ctx context.Context, in *GetListRequestsRequest, opts ...grpc.CallOption) (*GetListRequestsResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
}

type studentStudentLeaveHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentStudentLeaveHandlerClient(cc grpc.ClientConnInterface) StudentStudentLeaveHandlerClient {
	return &studentStudentLeaveHandlerClient{cc}
}

func (c *studentStudentLeaveHandlerClient) GetListRequests(ctx context.Context, in *GetListRequestsRequest, opts ...grpc.CallOption) (*GetListRequestsResponse, error) {
	out := new(GetListRequestsResponse)
	err := c.cc.Invoke(ctx, "/student_student_leave.StudentStudentLeaveHandler/GetListRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentStudentLeaveHandlerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/student_student_leave.StudentStudentLeaveHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentStudentLeaveHandlerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/student_student_leave.StudentStudentLeaveHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentStudentLeaveHandlerServer is the server API for StudentStudentLeaveHandler service.
// All implementations must embed UnimplementedStudentStudentLeaveHandlerServer
// for forward compatibility
type StudentStudentLeaveHandlerServer interface {
	GetListRequests(context.Context, *GetListRequestsRequest) (*GetListRequestsResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	mustEmbedUnimplementedStudentStudentLeaveHandlerServer()
}

// UnimplementedStudentStudentLeaveHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedStudentStudentLeaveHandlerServer struct {
}

func (UnimplementedStudentStudentLeaveHandlerServer) GetListRequests(context.Context, *GetListRequestsRequest) (*GetListRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListRequests not implemented")
}
func (UnimplementedStudentStudentLeaveHandlerServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStudentStudentLeaveHandlerServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStudentStudentLeaveHandlerServer) mustEmbedUnimplementedStudentStudentLeaveHandlerServer() {
}

// UnsafeStudentStudentLeaveHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentStudentLeaveHandlerServer will
// result in compilation errors.
type UnsafeStudentStudentLeaveHandlerServer interface {
	mustEmbedUnimplementedStudentStudentLeaveHandlerServer()
}

func RegisterStudentStudentLeaveHandlerServer(s grpc.ServiceRegistrar, srv StudentStudentLeaveHandlerServer) {
	s.RegisterService(&StudentStudentLeaveHandler_ServiceDesc, srv)
}

func _StudentStudentLeaveHandler_GetListRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentStudentLeaveHandlerServer).GetListRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_student_leave.StudentStudentLeaveHandler/GetListRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentStudentLeaveHandlerServer).GetListRequests(ctx, req.(*GetListRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentStudentLeaveHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentStudentLeaveHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_student_leave.StudentStudentLeaveHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentStudentLeaveHandlerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentStudentLeaveHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentStudentLeaveHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_student_leave.StudentStudentLeaveHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentStudentLeaveHandlerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentStudentLeaveHandler_ServiceDesc is the grpc.ServiceDesc for StudentStudentLeaveHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentStudentLeaveHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "student_student_leave.StudentStudentLeaveHandler",
	HandlerType: (*StudentStudentLeaveHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListRequests",
			Handler:    _StudentStudentLeaveHandler_GetListRequests_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _StudentStudentLeaveHandler_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StudentStudentLeaveHandler_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "student/student_leave.proto",
}
