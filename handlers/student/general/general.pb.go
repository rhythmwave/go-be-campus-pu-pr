// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: student/general.proto

package general

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Status  uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	Code    string `protobuf:"bytes,3,opt,name=code,proto3" json:"code"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{0}
}

func (x *Meta) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Meta) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Meta) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit        uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Prev         uint32 `protobuf:"varint,3,opt,name=prev,proto3" json:"prev"`
	Next         uint32 `protobuf:"varint,4,opt,name=next,proto3" json:"next"`
	TotalPages   uint32 `protobuf:"varint,5,opt,name=total_pages,json=totalPages,proto3" json:"total_pages"`
	TotalRecords uint32 `protobuf:"varint,6,opt,name=total_records,json=totalRecords,proto3" json:"total_records"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{1}
}

func (x *Pagination) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Pagination) GetPrev() uint32 {
	if x != nil {
		return x.Prev
	}
	return 0
}

func (x *Pagination) GetNext() uint32 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *Pagination) GetTotalPages() uint32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *Pagination) GetTotalRecords() uint32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetSemesterSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSemesterSummaryRequest) Reset() {
	*x = GetSemesterSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSemesterSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSemesterSummaryRequest) ProtoMessage() {}

func (x *GetSemesterSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSemesterSummaryRequest.ProtoReflect.Descriptor instead.
func (*GetSemesterSummaryRequest) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{2}
}

type GetSemesterSummaryResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                             string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	SemesterId                         string  `protobuf:"bytes,2,opt,name=semester_id,json=semesterId,proto3" json:"semester_id"`
	SemesterSchoolYear                 string  `protobuf:"bytes,3,opt,name=semester_school_year,json=semesterSchoolYear,proto3" json:"semester_school_year"`
	SemesterType                       string  `protobuf:"bytes,4,opt,name=semester_type,json=semesterType,proto3" json:"semester_type"`
	StudyProgramId                     string  `protobuf:"bytes,5,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	StudyProgramName                   string  `protobuf:"bytes,6,opt,name=study_program_name,json=studyProgramName,proto3" json:"study_program_name"`
	HasPaid                            bool    `protobuf:"varint,7,opt,name=has_paid,json=hasPaid,proto3" json:"has_paid"`
	AcademicGuidanceLecturerId         string  `protobuf:"bytes,8,opt,name=academic_guidance_lecturer_id,json=academicGuidanceLecturerId,proto3" json:"academic_guidance_lecturer_id"`
	AcademicGuidanceLecturerName       string  `protobuf:"bytes,9,opt,name=academic_guidance_lecturer_name,json=academicGuidanceLecturerName,proto3" json:"academic_guidance_lecturer_name"`
	AcademicGuidanceLecturerFrontTitle string  `protobuf:"bytes,10,opt,name=academic_guidance_lecturer_front_title,json=academicGuidanceLecturerFrontTitle,proto3" json:"academic_guidance_lecturer_front_title"`
	AcademicGuidanceLecturerBackDegree string  `protobuf:"bytes,11,opt,name=academic_guidance_lecturer_back_degree,json=academicGuidanceLecturerBackDegree,proto3" json:"academic_guidance_lecturer_back_degree"`
	MaximumCredit                      uint32  `protobuf:"varint,12,opt,name=maximum_credit,json=maximumCredit,proto3" json:"maximum_credit"`
	StudyPlanInputStartDate            string  `protobuf:"bytes,13,opt,name=study_plan_input_start_date,json=studyPlanInputStartDate,proto3" json:"study_plan_input_start_date"`
	StudyPlanInputEndDate              string  `protobuf:"bytes,14,opt,name=study_plan_input_end_date,json=studyPlanInputEndDate,proto3" json:"study_plan_input_end_date"`
	StudyPlanApprovalStartDate         string  `protobuf:"bytes,15,opt,name=study_plan_approval_start_date,json=studyPlanApprovalStartDate,proto3" json:"study_plan_approval_start_date"`
	StudyPlanApprovalEndDate           string  `protobuf:"bytes,16,opt,name=study_plan_approval_end_date,json=studyPlanApprovalEndDate,proto3" json:"study_plan_approval_end_date"`
	TotalMandatoryCreditTaken          uint32  `protobuf:"varint,17,opt,name=total_mandatory_credit_taken,json=totalMandatoryCreditTaken,proto3" json:"total_mandatory_credit_taken"`
	TotalOptionalCreditTaken           uint32  `protobuf:"varint,18,opt,name=total_optional_credit_taken,json=totalOptionalCreditTaken,proto3" json:"total_optional_credit_taken"`
	Gpa                                float64 `protobuf:"fixed64,19,opt,name=gpa,proto3" json:"gpa"`
}

func (x *GetSemesterSummaryResponseData) Reset() {
	*x = GetSemesterSummaryResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSemesterSummaryResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSemesterSummaryResponseData) ProtoMessage() {}

func (x *GetSemesterSummaryResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSemesterSummaryResponseData.ProtoReflect.Descriptor instead.
func (*GetSemesterSummaryResponseData) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{3}
}

func (x *GetSemesterSummaryResponseData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetSemesterSummaryResponseData) GetSemesterId() string {
	if x != nil {
		return x.SemesterId
	}
	return ""
}

func (x *GetSemesterSummaryResponseData) GetSemesterSchoolYear() string {
	if x != nil {
		return x.SemesterSchoolYear
	}
	return ""
}

func (x *GetSemesterSummaryResponseData) GetSemesterType() string {
	if x != nil {
		return x.SemesterType
	}
	return ""
}

func (x *GetSemesterSummaryResponseData) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *GetSemesterSummaryResponseData) GetStudyProgramName() string {
	if x != nil {
		return x.StudyProgramName
	}
	return ""
}

func (x *GetSemesterSummaryResponseData) GetHasPaid() bool {
	if x != nil {
		return x.HasPaid
	}
	return false
}

func (x *GetSemesterSummaryResponseData) GetAcademicGuidanceLecturerId() string {
	if x != nil {
		return x.AcademicGuidanceLecturerId
	}
	return ""
}

func (x *GetSemesterSummaryResponseData) GetAcademicGuidanceLecturerName() string {
	if x != nil {
		return x.AcademicGuidanceLecturerName
	}
	return ""
}

func (x *GetSemesterSummaryResponseData) GetAcademicGuidanceLecturerFrontTitle() string {
	if x != nil {
		return x.AcademicGuidanceLecturerFrontTitle
	}
	return ""
}

func (x *GetSemesterSummaryResponseData) GetAcademicGuidanceLecturerBackDegree() string {
	if x != nil {
		return x.AcademicGuidanceLecturerBackDegree
	}
	return ""
}

func (x *GetSemesterSummaryResponseData) GetMaximumCredit() uint32 {
	if x != nil {
		return x.MaximumCredit
	}
	return 0
}

func (x *GetSemesterSummaryResponseData) GetStudyPlanInputStartDate() string {
	if x != nil {
		return x.StudyPlanInputStartDate
	}
	return ""
}

func (x *GetSemesterSummaryResponseData) GetStudyPlanInputEndDate() string {
	if x != nil {
		return x.StudyPlanInputEndDate
	}
	return ""
}

func (x *GetSemesterSummaryResponseData) GetStudyPlanApprovalStartDate() string {
	if x != nil {
		return x.StudyPlanApprovalStartDate
	}
	return ""
}

func (x *GetSemesterSummaryResponseData) GetStudyPlanApprovalEndDate() string {
	if x != nil {
		return x.StudyPlanApprovalEndDate
	}
	return ""
}

func (x *GetSemesterSummaryResponseData) GetTotalMandatoryCreditTaken() uint32 {
	if x != nil {
		return x.TotalMandatoryCreditTaken
	}
	return 0
}

func (x *GetSemesterSummaryResponseData) GetTotalOptionalCreditTaken() uint32 {
	if x != nil {
		return x.TotalOptionalCreditTaken
	}
	return 0
}

func (x *GetSemesterSummaryResponseData) GetGpa() float64 {
	if x != nil {
		return x.Gpa
	}
	return 0
}

type GetSemesterSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                           `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *GetSemesterSummaryResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *GetSemesterSummaryResponse) Reset() {
	*x = GetSemesterSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSemesterSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSemesterSummaryResponse) ProtoMessage() {}

func (x *GetSemesterSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSemesterSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetSemesterSummaryResponse) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{4}
}

func (x *GetSemesterSummaryResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetSemesterSummaryResponse) GetData() *GetSemesterSummaryResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProfileRequest) Reset() {
	*x = GetProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileRequest) ProtoMessage() {}

func (x *GetProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileRequest.ProtoReflect.Descriptor instead.
func (*GetProfileRequest) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{5}
}

type GetProfileResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	ProfilePhotoPath      string  `protobuf:"bytes,2,opt,name=profile_photo_path,json=profilePhotoPath,proto3" json:"profile_photo_path"`
	ProfilePhotoPathType  string  `protobuf:"bytes,3,opt,name=profile_photo_path_type,json=profilePhotoPathType,proto3" json:"profile_photo_path_type"`
	ProfilePhotoUrl       string  `protobuf:"bytes,4,opt,name=profile_photo_url,json=profilePhotoUrl,proto3" json:"profile_photo_url"`
	Name                  string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	Sex                   string  `protobuf:"bytes,6,opt,name=sex,proto3" json:"sex"`
	BirthProvinceId       uint32  `protobuf:"varint,7,opt,name=birth_province_id,json=birthProvinceId,proto3" json:"birth_province_id"`
	BirthProvinceName     string  `protobuf:"bytes,8,opt,name=birth_province_name,json=birthProvinceName,proto3" json:"birth_province_name"`
	BirthRegencyId        uint32  `protobuf:"varint,9,opt,name=birth_regency_id,json=birthRegencyId,proto3" json:"birth_regency_id"`
	BirthRegencyName      string  `protobuf:"bytes,10,opt,name=birth_regency_name,json=birthRegencyName,proto3" json:"birth_regency_name"`
	BirthDate             string  `protobuf:"bytes,11,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
	BloodType             string  `protobuf:"bytes,12,opt,name=blood_type,json=bloodType,proto3" json:"blood_type"`
	Height                float64 `protobuf:"fixed64,13,opt,name=height,proto3" json:"height"`
	Weight                float64 `protobuf:"fixed64,14,opt,name=weight,proto3" json:"weight"`
	IsColorBlind          bool    `protobuf:"varint,15,opt,name=is_color_blind,json=isColorBlind,proto3" json:"is_color_blind"`
	UseGlasses            bool    `protobuf:"varint,16,opt,name=use_glasses,json=useGlasses,proto3" json:"use_glasses"`
	HasCompleteTeeth      bool    `protobuf:"varint,17,opt,name=has_complete_teeth,json=hasCompleteTeeth,proto3" json:"has_complete_teeth"`
	StudyProgramId        string  `protobuf:"bytes,18,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	StudyProgramName      string  `protobuf:"bytes,19,opt,name=study_program_name,json=studyProgramName,proto3" json:"study_program_name"`
	DiktiStudyProgramType string  `protobuf:"bytes,20,opt,name=dikti_study_program_type,json=diktiStudyProgramType,proto3" json:"dikti_study_program_type"`
	StudyLevelShortName   string  `protobuf:"bytes,21,opt,name=study_level_short_name,json=studyLevelShortName,proto3" json:"study_level_short_name"`
	AdmittanceSemester    string  `protobuf:"bytes,22,opt,name=admittance_semester,json=admittanceSemester,proto3" json:"admittance_semester"`
	StudentForce          uint32  `protobuf:"varint,23,opt,name=student_force,json=studentForce,proto3" json:"student_force"`
	AdmittanceTestNumber  string  `protobuf:"bytes,24,opt,name=admittance_test_number,json=admittanceTestNumber,proto3" json:"admittance_test_number"`
	CollegeEntranceType   string  `protobuf:"bytes,25,opt,name=college_entrance_type,json=collegeEntranceType,proto3" json:"college_entrance_type"`
	AdmittanceDate        string  `protobuf:"bytes,26,opt,name=admittance_date,json=admittanceDate,proto3" json:"admittance_date"`
	AdmittanceStatus      string  `protobuf:"bytes,27,opt,name=admittance_status,json=admittanceStatus,proto3" json:"admittance_status"`
	NpwpNumber            string  `protobuf:"bytes,28,opt,name=npwp_number,json=npwpNumber,proto3" json:"npwp_number"`
	NisnNumber            string  `protobuf:"bytes,29,opt,name=nisn_number,json=nisnNumber,proto3" json:"nisn_number"`
	Religion              string  `protobuf:"bytes,30,opt,name=religion,proto3" json:"religion"`
	MaritalStatus         string  `protobuf:"bytes,31,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status"`
	Nationality           string  `protobuf:"bytes,32,opt,name=nationality,proto3" json:"nationality"`
	ProvinceId            uint32  `protobuf:"varint,33,opt,name=province_id,json=provinceId,proto3" json:"province_id"`
	ProvinceName          string  `protobuf:"bytes,34,opt,name=province_name,json=provinceName,proto3" json:"province_name"`
	RegencyId             uint32  `protobuf:"varint,35,opt,name=regency_id,json=regencyId,proto3" json:"regency_id"`
	RegencyName           string  `protobuf:"bytes,36,opt,name=regency_name,json=regencyName,proto3" json:"regency_name"`
	DistrictId            uint32  `protobuf:"varint,37,opt,name=district_id,json=districtId,proto3" json:"district_id"`
	DistrictName          string  `protobuf:"bytes,38,opt,name=district_name,json=districtName,proto3" json:"district_name"`
	VillageId             uint32  `protobuf:"varint,39,opt,name=village_id,json=villageId,proto3" json:"village_id"`
	VillageName           string  `protobuf:"bytes,40,opt,name=village_name,json=villageName,proto3" json:"village_name"`
	Rt                    string  `protobuf:"bytes,41,opt,name=rt,proto3" json:"rt"`
	Rw                    string  `protobuf:"bytes,42,opt,name=rw,proto3" json:"rw"`
	PostalCode            string  `protobuf:"bytes,43,opt,name=postal_code,json=postalCode,proto3" json:"postal_code"`
	Address               string  `protobuf:"bytes,44,opt,name=address,proto3" json:"address"`
	PhoneNumber           string  `protobuf:"bytes,45,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	MobilePhoneNumber     string  `protobuf:"bytes,46,opt,name=mobile_phone_number,json=mobilePhoneNumber,proto3" json:"mobile_phone_number"`
	Email                 string  `protobuf:"bytes,47,opt,name=email,proto3" json:"email"`
	TransportationMean    string  `protobuf:"bytes,48,opt,name=transportation_mean,json=transportationMean,proto3" json:"transportation_mean"`
	IsKpsRecipient        bool    `protobuf:"varint,49,opt,name=is_kps_recipient,json=isKpsRecipient,proto3" json:"is_kps_recipient"`
	FundSource            string  `protobuf:"bytes,50,opt,name=fund_source,json=fundSource,proto3" json:"fund_source"`
	IsScholarshipGrantee  bool    `protobuf:"varint,51,opt,name=is_scholarship_grantee,json=isScholarshipGrantee,proto3" json:"is_scholarship_grantee"`
	TotalBrother          uint32  `protobuf:"varint,52,opt,name=total_brother,json=totalBrother,proto3" json:"total_brother"`
	TotalSister           uint32  `protobuf:"varint,53,opt,name=total_sister,json=totalSister,proto3" json:"total_sister"`
	WorkType              string  `protobuf:"bytes,54,opt,name=work_type,json=workType,proto3" json:"work_type"`
	WorkPlace             string  `protobuf:"bytes,55,opt,name=work_place,json=workPlace,proto3" json:"work_place"`
	WorkAddress           string  `protobuf:"bytes,56,opt,name=work_address,json=workAddress,proto3" json:"work_address"`
	AssuranceNumber       string  `protobuf:"bytes,57,opt,name=assurance_number,json=assuranceNumber,proto3" json:"assurance_number"`
	Hobby                 string  `protobuf:"bytes,58,opt,name=hobby,proto3" json:"hobby"`
}

func (x *GetProfileResponseData) Reset() {
	*x = GetProfileResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileResponseData) ProtoMessage() {}

func (x *GetProfileResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileResponseData.ProtoReflect.Descriptor instead.
func (*GetProfileResponseData) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{6}
}

func (x *GetProfileResponseData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetProfileResponseData) GetProfilePhotoPath() string {
	if x != nil {
		return x.ProfilePhotoPath
	}
	return ""
}

func (x *GetProfileResponseData) GetProfilePhotoPathType() string {
	if x != nil {
		return x.ProfilePhotoPathType
	}
	return ""
}

func (x *GetProfileResponseData) GetProfilePhotoUrl() string {
	if x != nil {
		return x.ProfilePhotoUrl
	}
	return ""
}

func (x *GetProfileResponseData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetProfileResponseData) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *GetProfileResponseData) GetBirthProvinceId() uint32 {
	if x != nil {
		return x.BirthProvinceId
	}
	return 0
}

func (x *GetProfileResponseData) GetBirthProvinceName() string {
	if x != nil {
		return x.BirthProvinceName
	}
	return ""
}

func (x *GetProfileResponseData) GetBirthRegencyId() uint32 {
	if x != nil {
		return x.BirthRegencyId
	}
	return 0
}

func (x *GetProfileResponseData) GetBirthRegencyName() string {
	if x != nil {
		return x.BirthRegencyName
	}
	return ""
}

func (x *GetProfileResponseData) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *GetProfileResponseData) GetBloodType() string {
	if x != nil {
		return x.BloodType
	}
	return ""
}

func (x *GetProfileResponseData) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetProfileResponseData) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *GetProfileResponseData) GetIsColorBlind() bool {
	if x != nil {
		return x.IsColorBlind
	}
	return false
}

func (x *GetProfileResponseData) GetUseGlasses() bool {
	if x != nil {
		return x.UseGlasses
	}
	return false
}

func (x *GetProfileResponseData) GetHasCompleteTeeth() bool {
	if x != nil {
		return x.HasCompleteTeeth
	}
	return false
}

func (x *GetProfileResponseData) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *GetProfileResponseData) GetStudyProgramName() string {
	if x != nil {
		return x.StudyProgramName
	}
	return ""
}

func (x *GetProfileResponseData) GetDiktiStudyProgramType() string {
	if x != nil {
		return x.DiktiStudyProgramType
	}
	return ""
}

func (x *GetProfileResponseData) GetStudyLevelShortName() string {
	if x != nil {
		return x.StudyLevelShortName
	}
	return ""
}

func (x *GetProfileResponseData) GetAdmittanceSemester() string {
	if x != nil {
		return x.AdmittanceSemester
	}
	return ""
}

func (x *GetProfileResponseData) GetStudentForce() uint32 {
	if x != nil {
		return x.StudentForce
	}
	return 0
}

func (x *GetProfileResponseData) GetAdmittanceTestNumber() string {
	if x != nil {
		return x.AdmittanceTestNumber
	}
	return ""
}

func (x *GetProfileResponseData) GetCollegeEntranceType() string {
	if x != nil {
		return x.CollegeEntranceType
	}
	return ""
}

func (x *GetProfileResponseData) GetAdmittanceDate() string {
	if x != nil {
		return x.AdmittanceDate
	}
	return ""
}

func (x *GetProfileResponseData) GetAdmittanceStatus() string {
	if x != nil {
		return x.AdmittanceStatus
	}
	return ""
}

func (x *GetProfileResponseData) GetNpwpNumber() string {
	if x != nil {
		return x.NpwpNumber
	}
	return ""
}

func (x *GetProfileResponseData) GetNisnNumber() string {
	if x != nil {
		return x.NisnNumber
	}
	return ""
}

func (x *GetProfileResponseData) GetReligion() string {
	if x != nil {
		return x.Religion
	}
	return ""
}

func (x *GetProfileResponseData) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *GetProfileResponseData) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *GetProfileResponseData) GetProvinceId() uint32 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *GetProfileResponseData) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *GetProfileResponseData) GetRegencyId() uint32 {
	if x != nil {
		return x.RegencyId
	}
	return 0
}

func (x *GetProfileResponseData) GetRegencyName() string {
	if x != nil {
		return x.RegencyName
	}
	return ""
}

func (x *GetProfileResponseData) GetDistrictId() uint32 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

func (x *GetProfileResponseData) GetDistrictName() string {
	if x != nil {
		return x.DistrictName
	}
	return ""
}

func (x *GetProfileResponseData) GetVillageId() uint32 {
	if x != nil {
		return x.VillageId
	}
	return 0
}

func (x *GetProfileResponseData) GetVillageName() string {
	if x != nil {
		return x.VillageName
	}
	return ""
}

func (x *GetProfileResponseData) GetRt() string {
	if x != nil {
		return x.Rt
	}
	return ""
}

func (x *GetProfileResponseData) GetRw() string {
	if x != nil {
		return x.Rw
	}
	return ""
}

func (x *GetProfileResponseData) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *GetProfileResponseData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetProfileResponseData) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *GetProfileResponseData) GetMobilePhoneNumber() string {
	if x != nil {
		return x.MobilePhoneNumber
	}
	return ""
}

func (x *GetProfileResponseData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetProfileResponseData) GetTransportationMean() string {
	if x != nil {
		return x.TransportationMean
	}
	return ""
}

func (x *GetProfileResponseData) GetIsKpsRecipient() bool {
	if x != nil {
		return x.IsKpsRecipient
	}
	return false
}

func (x *GetProfileResponseData) GetFundSource() string {
	if x != nil {
		return x.FundSource
	}
	return ""
}

func (x *GetProfileResponseData) GetIsScholarshipGrantee() bool {
	if x != nil {
		return x.IsScholarshipGrantee
	}
	return false
}

func (x *GetProfileResponseData) GetTotalBrother() uint32 {
	if x != nil {
		return x.TotalBrother
	}
	return 0
}

func (x *GetProfileResponseData) GetTotalSister() uint32 {
	if x != nil {
		return x.TotalSister
	}
	return 0
}

func (x *GetProfileResponseData) GetWorkType() string {
	if x != nil {
		return x.WorkType
	}
	return ""
}

func (x *GetProfileResponseData) GetWorkPlace() string {
	if x != nil {
		return x.WorkPlace
	}
	return ""
}

func (x *GetProfileResponseData) GetWorkAddress() string {
	if x != nil {
		return x.WorkAddress
	}
	return ""
}

func (x *GetProfileResponseData) GetAssuranceNumber() string {
	if x != nil {
		return x.AssuranceNumber
	}
	return ""
}

func (x *GetProfileResponseData) GetHobby() string {
	if x != nil {
		return x.Hobby
	}
	return ""
}

type GetProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                   `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *GetProfileResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *GetProfileResponse) Reset() {
	*x = GetProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileResponse) ProtoMessage() {}

func (x *GetProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileResponse.ProtoReflect.Descriptor instead.
func (*GetProfileResponse) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{7}
}

func (x *GetProfileResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetProfileResponse) GetData() *GetProfileResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfilePhotoPath     string  `protobuf:"bytes,1,opt,name=profile_photo_path,json=profilePhotoPath,proto3" json:"profile_photo_path"`
	ProfilePhotoPathType string  `protobuf:"bytes,2,opt,name=profile_photo_path_type,json=profilePhotoPathType,proto3" json:"profile_photo_path_type"`
	Sex                  string  `protobuf:"bytes,3,opt,name=sex,proto3" json:"sex"`
	BirthRegencyId       uint32  `protobuf:"varint,4,opt,name=birth_regency_id,json=birthRegencyId,proto3" json:"birth_regency_id"`
	BloodType            string  `protobuf:"bytes,5,opt,name=blood_type,json=bloodType,proto3" json:"blood_type"`
	Height               float64 `protobuf:"fixed64,6,opt,name=height,proto3" json:"height"`
	Weight               float64 `protobuf:"fixed64,7,opt,name=weight,proto3" json:"weight"`
	IsColorBlind         bool    `protobuf:"varint,8,opt,name=is_color_blind,json=isColorBlind,proto3" json:"is_color_blind"`
	UseGlasses           bool    `protobuf:"varint,9,opt,name=use_glasses,json=useGlasses,proto3" json:"use_glasses"`
	HasCompleteTeeth     bool    `protobuf:"varint,10,opt,name=has_complete_teeth,json=hasCompleteTeeth,proto3" json:"has_complete_teeth"`
	IdNumber             string  `protobuf:"bytes,11,opt,name=id_number,json=idNumber,proto3" json:"id_number"`
	NpwpNumber           string  `protobuf:"bytes,12,opt,name=npwp_number,json=npwpNumber,proto3" json:"npwp_number"`
	NisnNumber           string  `protobuf:"bytes,13,opt,name=nisn_number,json=nisnNumber,proto3" json:"nisn_number"`
	Religion             string  `protobuf:"bytes,14,opt,name=religion,proto3" json:"religion"`
	MaritalStatus        string  `protobuf:"bytes,15,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status"`
	Nationality          string  `protobuf:"bytes,16,opt,name=nationality,proto3" json:"nationality"`
	VillageId            uint32  `protobuf:"varint,17,opt,name=village_id,json=villageId,proto3" json:"village_id"`
	Rt                   string  `protobuf:"bytes,18,opt,name=rt,proto3" json:"rt"`
	Rw                   string  `protobuf:"bytes,19,opt,name=rw,proto3" json:"rw"`
	PostalCode           string  `protobuf:"bytes,20,opt,name=postal_code,json=postalCode,proto3" json:"postal_code"`
	Address              string  `protobuf:"bytes,21,opt,name=address,proto3" json:"address"`
	PhoneNumber          string  `protobuf:"bytes,22,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	MobilePhoneNumber    string  `protobuf:"bytes,23,opt,name=mobile_phone_number,json=mobilePhoneNumber,proto3" json:"mobile_phone_number"`
	Email                string  `protobuf:"bytes,24,opt,name=email,proto3" json:"email"`
	TransportationMean   string  `protobuf:"bytes,25,opt,name=transportation_mean,json=transportationMean,proto3" json:"transportation_mean"`
	IsKpsRecipient       bool    `protobuf:"varint,26,opt,name=is_kps_recipient,json=isKpsRecipient,proto3" json:"is_kps_recipient"`
	FundSource           string  `protobuf:"bytes,27,opt,name=fund_source,json=fundSource,proto3" json:"fund_source"`
	IsScholarshipGrantee bool    `protobuf:"varint,28,opt,name=is_scholarship_grantee,json=isScholarshipGrantee,proto3" json:"is_scholarship_grantee"`
	TotalBrother         uint32  `protobuf:"varint,29,opt,name=total_brother,json=totalBrother,proto3" json:"total_brother"`
	TotalSister          uint32  `protobuf:"varint,30,opt,name=total_sister,json=totalSister,proto3" json:"total_sister"`
	WorkType             string  `protobuf:"bytes,31,opt,name=work_type,json=workType,proto3" json:"work_type"`
	WorkPlace            string  `protobuf:"bytes,32,opt,name=work_place,json=workPlace,proto3" json:"work_place"`
	WorkAddress          string  `protobuf:"bytes,33,opt,name=work_address,json=workAddress,proto3" json:"work_address"`
	AssuranceNumber      string  `protobuf:"bytes,34,opt,name=assurance_number,json=assuranceNumber,proto3" json:"assurance_number"`
	Hobby                string  `protobuf:"bytes,35,opt,name=hobby,proto3" json:"hobby"`
}

func (x *UpdateProfileRequest) Reset() {
	*x = UpdateProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileRequest) ProtoMessage() {}

func (x *UpdateProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateProfileRequest) GetProfilePhotoPath() string {
	if x != nil {
		return x.ProfilePhotoPath
	}
	return ""
}

func (x *UpdateProfileRequest) GetProfilePhotoPathType() string {
	if x != nil {
		return x.ProfilePhotoPathType
	}
	return ""
}

func (x *UpdateProfileRequest) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *UpdateProfileRequest) GetBirthRegencyId() uint32 {
	if x != nil {
		return x.BirthRegencyId
	}
	return 0
}

func (x *UpdateProfileRequest) GetBloodType() string {
	if x != nil {
		return x.BloodType
	}
	return ""
}

func (x *UpdateProfileRequest) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *UpdateProfileRequest) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *UpdateProfileRequest) GetIsColorBlind() bool {
	if x != nil {
		return x.IsColorBlind
	}
	return false
}

func (x *UpdateProfileRequest) GetUseGlasses() bool {
	if x != nil {
		return x.UseGlasses
	}
	return false
}

func (x *UpdateProfileRequest) GetHasCompleteTeeth() bool {
	if x != nil {
		return x.HasCompleteTeeth
	}
	return false
}

func (x *UpdateProfileRequest) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *UpdateProfileRequest) GetNpwpNumber() string {
	if x != nil {
		return x.NpwpNumber
	}
	return ""
}

func (x *UpdateProfileRequest) GetNisnNumber() string {
	if x != nil {
		return x.NisnNumber
	}
	return ""
}

func (x *UpdateProfileRequest) GetReligion() string {
	if x != nil {
		return x.Religion
	}
	return ""
}

func (x *UpdateProfileRequest) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *UpdateProfileRequest) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *UpdateProfileRequest) GetVillageId() uint32 {
	if x != nil {
		return x.VillageId
	}
	return 0
}

func (x *UpdateProfileRequest) GetRt() string {
	if x != nil {
		return x.Rt
	}
	return ""
}

func (x *UpdateProfileRequest) GetRw() string {
	if x != nil {
		return x.Rw
	}
	return ""
}

func (x *UpdateProfileRequest) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *UpdateProfileRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateProfileRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UpdateProfileRequest) GetMobilePhoneNumber() string {
	if x != nil {
		return x.MobilePhoneNumber
	}
	return ""
}

func (x *UpdateProfileRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateProfileRequest) GetTransportationMean() string {
	if x != nil {
		return x.TransportationMean
	}
	return ""
}

func (x *UpdateProfileRequest) GetIsKpsRecipient() bool {
	if x != nil {
		return x.IsKpsRecipient
	}
	return false
}

func (x *UpdateProfileRequest) GetFundSource() string {
	if x != nil {
		return x.FundSource
	}
	return ""
}

func (x *UpdateProfileRequest) GetIsScholarshipGrantee() bool {
	if x != nil {
		return x.IsScholarshipGrantee
	}
	return false
}

func (x *UpdateProfileRequest) GetTotalBrother() uint32 {
	if x != nil {
		return x.TotalBrother
	}
	return 0
}

func (x *UpdateProfileRequest) GetTotalSister() uint32 {
	if x != nil {
		return x.TotalSister
	}
	return 0
}

func (x *UpdateProfileRequest) GetWorkType() string {
	if x != nil {
		return x.WorkType
	}
	return ""
}

func (x *UpdateProfileRequest) GetWorkPlace() string {
	if x != nil {
		return x.WorkPlace
	}
	return ""
}

func (x *UpdateProfileRequest) GetWorkAddress() string {
	if x != nil {
		return x.WorkAddress
	}
	return ""
}

func (x *UpdateProfileRequest) GetAssuranceNumber() string {
	if x != nil {
		return x.AssuranceNumber
	}
	return ""
}

func (x *UpdateProfileRequest) GetHobby() string {
	if x != nil {
		return x.Hobby
	}
	return ""
}

type UpdateProfileResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateProfileResponseData) Reset() {
	*x = UpdateProfileResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfileResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileResponseData) ProtoMessage() {}

func (x *UpdateProfileResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileResponseData.ProtoReflect.Descriptor instead.
func (*UpdateProfileResponseData) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{9}
}

type UpdateProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                      `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *UpdateProfileResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *UpdateProfileResponse) Reset() {
	*x = UpdateProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileResponse) ProtoMessage() {}

func (x *UpdateProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileResponse.ProtoReflect.Descriptor instead.
func (*UpdateProfileResponse) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateProfileResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UpdateProfileResponse) GetData() *UpdateProfileResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetParentProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetParentProfileRequest) Reset() {
	*x = GetParentProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetParentProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParentProfileRequest) ProtoMessage() {}

func (x *GetParentProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParentProfileRequest.ProtoReflect.Descriptor instead.
func (*GetParentProfileRequest) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{11}
}

type GetParentProfileResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FatherIdNumber                  string  `protobuf:"bytes,1,opt,name=father_id_number,json=fatherIdNumber,proto3" json:"father_id_number"`
	FatherName                      string  `protobuf:"bytes,2,opt,name=father_name,json=fatherName,proto3" json:"father_name"`
	FatherBirthDate                 string  `protobuf:"bytes,3,opt,name=father_birth_date,json=fatherBirthDate,proto3" json:"father_birth_date"`
	FatherDeathDate                 string  `protobuf:"bytes,4,opt,name=father_death_date,json=fatherDeathDate,proto3" json:"father_death_date"`
	FatherFinalAcademicBackground   string  `protobuf:"bytes,5,opt,name=father_final_academic_background,json=fatherFinalAcademicBackground,proto3" json:"father_final_academic_background"`
	FatherOccupation                string  `protobuf:"bytes,6,opt,name=father_occupation,json=fatherOccupation,proto3" json:"father_occupation"`
	MotherIdNumber                  string  `protobuf:"bytes,7,opt,name=mother_id_number,json=motherIdNumber,proto3" json:"mother_id_number"`
	MotherName                      string  `protobuf:"bytes,8,opt,name=mother_name,json=motherName,proto3" json:"mother_name"`
	MotherBirthDate                 string  `protobuf:"bytes,9,opt,name=mother_birth_date,json=motherBirthDate,proto3" json:"mother_birth_date"`
	MotherDeathDate                 string  `protobuf:"bytes,10,opt,name=mother_death_date,json=motherDeathDate,proto3" json:"mother_death_date"`
	MotherFinalAcademicBackground   string  `protobuf:"bytes,11,opt,name=mother_final_academic_background,json=motherFinalAcademicBackground,proto3" json:"mother_final_academic_background"`
	MotherOccupation                string  `protobuf:"bytes,12,opt,name=mother_occupation,json=motherOccupation,proto3" json:"mother_occupation"`
	ParentReligion                  string  `protobuf:"bytes,13,opt,name=parent_religion,json=parentReligion,proto3" json:"parent_religion"`
	ParentNationality               string  `protobuf:"bytes,14,opt,name=parent_nationality,json=parentNationality,proto3" json:"parent_nationality"`
	ParentAddress                   string  `protobuf:"bytes,15,opt,name=parent_address,json=parentAddress,proto3" json:"parent_address"`
	FatherWorkAddress               string  `protobuf:"bytes,16,opt,name=father_work_address,json=fatherWorkAddress,proto3" json:"father_work_address"`
	ParentProvinceId                uint32  `protobuf:"varint,17,opt,name=parent_province_id,json=parentProvinceId,proto3" json:"parent_province_id"`
	ParentProvinceName              string  `protobuf:"bytes,18,opt,name=parent_province_name,json=parentProvinceName,proto3" json:"parent_province_name"`
	ParentRegencyId                 uint32  `protobuf:"varint,19,opt,name=parent_regency_id,json=parentRegencyId,proto3" json:"parent_regency_id"`
	ParentRegencyName               string  `protobuf:"bytes,20,opt,name=parent_regency_name,json=parentRegencyName,proto3" json:"parent_regency_name"`
	ParentPostalCode                string  `protobuf:"bytes,21,opt,name=parent_postal_code,json=parentPostalCode,proto3" json:"parent_postal_code"`
	ParentPhoneNumber               string  `protobuf:"bytes,22,opt,name=parent_phone_number,json=parentPhoneNumber,proto3" json:"parent_phone_number"`
	ParentEmail                     string  `protobuf:"bytes,23,opt,name=parent_email,json=parentEmail,proto3" json:"parent_email"`
	IsFinanciallyCapable            bool    `protobuf:"varint,24,opt,name=is_financially_capable,json=isFinanciallyCapable,proto3" json:"is_financially_capable"`
	ParentIncome                    float64 `protobuf:"fixed64,25,opt,name=parent_income,json=parentIncome,proto3" json:"parent_income"`
	TotalDependent                  uint32  `protobuf:"varint,26,opt,name=total_dependent,json=totalDependent,proto3" json:"total_dependent"`
	GuardianName                    string  `protobuf:"bytes,27,opt,name=guardian_name,json=guardianName,proto3" json:"guardian_name"`
	GuardianBirthDate               string  `protobuf:"bytes,28,opt,name=guardian_birth_date,json=guardianBirthDate,proto3" json:"guardian_birth_date"`
	GuardianDeathDate               string  `protobuf:"bytes,29,opt,name=guardian_death_date,json=guardianDeathDate,proto3" json:"guardian_death_date"`
	GuardianAddress                 string  `protobuf:"bytes,30,opt,name=guardian_address,json=guardianAddress,proto3" json:"guardian_address"`
	GuardianProvinceId              uint32  `protobuf:"varint,31,opt,name=guardian_province_id,json=guardianProvinceId,proto3" json:"guardian_province_id"`
	GuardianProvinceName            string  `protobuf:"bytes,32,opt,name=guardian_province_name,json=guardianProvinceName,proto3" json:"guardian_province_name"`
	GuardianRegencyId               uint32  `protobuf:"varint,33,opt,name=guardian_regency_id,json=guardianRegencyId,proto3" json:"guardian_regency_id"`
	GuardianRegencyName             string  `protobuf:"bytes,34,opt,name=guardian_regency_name,json=guardianRegencyName,proto3" json:"guardian_regency_name"`
	GuardianPostalCode              string  `protobuf:"bytes,35,opt,name=guardian_postal_code,json=guardianPostalCode,proto3" json:"guardian_postal_code"`
	GuardianPhoneNumber             string  `protobuf:"bytes,36,opt,name=guardian_phone_number,json=guardianPhoneNumber,proto3" json:"guardian_phone_number"`
	GuardianEmail                   string  `protobuf:"bytes,37,opt,name=guardian_email,json=guardianEmail,proto3" json:"guardian_email"`
	GuardianFinalAcademicBackground string  `protobuf:"bytes,38,opt,name=guardian_final_academic_background,json=guardianFinalAcademicBackground,proto3" json:"guardian_final_academic_background"`
	GuardianOccupation              string  `protobuf:"bytes,39,opt,name=guardian_occupation,json=guardianOccupation,proto3" json:"guardian_occupation"`
}

func (x *GetParentProfileResponseData) Reset() {
	*x = GetParentProfileResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetParentProfileResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParentProfileResponseData) ProtoMessage() {}

func (x *GetParentProfileResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParentProfileResponseData.ProtoReflect.Descriptor instead.
func (*GetParentProfileResponseData) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{12}
}

func (x *GetParentProfileResponseData) GetFatherIdNumber() string {
	if x != nil {
		return x.FatherIdNumber
	}
	return ""
}

func (x *GetParentProfileResponseData) GetFatherName() string {
	if x != nil {
		return x.FatherName
	}
	return ""
}

func (x *GetParentProfileResponseData) GetFatherBirthDate() string {
	if x != nil {
		return x.FatherBirthDate
	}
	return ""
}

func (x *GetParentProfileResponseData) GetFatherDeathDate() string {
	if x != nil {
		return x.FatherDeathDate
	}
	return ""
}

func (x *GetParentProfileResponseData) GetFatherFinalAcademicBackground() string {
	if x != nil {
		return x.FatherFinalAcademicBackground
	}
	return ""
}

func (x *GetParentProfileResponseData) GetFatherOccupation() string {
	if x != nil {
		return x.FatherOccupation
	}
	return ""
}

func (x *GetParentProfileResponseData) GetMotherIdNumber() string {
	if x != nil {
		return x.MotherIdNumber
	}
	return ""
}

func (x *GetParentProfileResponseData) GetMotherName() string {
	if x != nil {
		return x.MotherName
	}
	return ""
}

func (x *GetParentProfileResponseData) GetMotherBirthDate() string {
	if x != nil {
		return x.MotherBirthDate
	}
	return ""
}

func (x *GetParentProfileResponseData) GetMotherDeathDate() string {
	if x != nil {
		return x.MotherDeathDate
	}
	return ""
}

func (x *GetParentProfileResponseData) GetMotherFinalAcademicBackground() string {
	if x != nil {
		return x.MotherFinalAcademicBackground
	}
	return ""
}

func (x *GetParentProfileResponseData) GetMotherOccupation() string {
	if x != nil {
		return x.MotherOccupation
	}
	return ""
}

func (x *GetParentProfileResponseData) GetParentReligion() string {
	if x != nil {
		return x.ParentReligion
	}
	return ""
}

func (x *GetParentProfileResponseData) GetParentNationality() string {
	if x != nil {
		return x.ParentNationality
	}
	return ""
}

func (x *GetParentProfileResponseData) GetParentAddress() string {
	if x != nil {
		return x.ParentAddress
	}
	return ""
}

func (x *GetParentProfileResponseData) GetFatherWorkAddress() string {
	if x != nil {
		return x.FatherWorkAddress
	}
	return ""
}

func (x *GetParentProfileResponseData) GetParentProvinceId() uint32 {
	if x != nil {
		return x.ParentProvinceId
	}
	return 0
}

func (x *GetParentProfileResponseData) GetParentProvinceName() string {
	if x != nil {
		return x.ParentProvinceName
	}
	return ""
}

func (x *GetParentProfileResponseData) GetParentRegencyId() uint32 {
	if x != nil {
		return x.ParentRegencyId
	}
	return 0
}

func (x *GetParentProfileResponseData) GetParentRegencyName() string {
	if x != nil {
		return x.ParentRegencyName
	}
	return ""
}

func (x *GetParentProfileResponseData) GetParentPostalCode() string {
	if x != nil {
		return x.ParentPostalCode
	}
	return ""
}

func (x *GetParentProfileResponseData) GetParentPhoneNumber() string {
	if x != nil {
		return x.ParentPhoneNumber
	}
	return ""
}

func (x *GetParentProfileResponseData) GetParentEmail() string {
	if x != nil {
		return x.ParentEmail
	}
	return ""
}

func (x *GetParentProfileResponseData) GetIsFinanciallyCapable() bool {
	if x != nil {
		return x.IsFinanciallyCapable
	}
	return false
}

func (x *GetParentProfileResponseData) GetParentIncome() float64 {
	if x != nil {
		return x.ParentIncome
	}
	return 0
}

func (x *GetParentProfileResponseData) GetTotalDependent() uint32 {
	if x != nil {
		return x.TotalDependent
	}
	return 0
}

func (x *GetParentProfileResponseData) GetGuardianName() string {
	if x != nil {
		return x.GuardianName
	}
	return ""
}

func (x *GetParentProfileResponseData) GetGuardianBirthDate() string {
	if x != nil {
		return x.GuardianBirthDate
	}
	return ""
}

func (x *GetParentProfileResponseData) GetGuardianDeathDate() string {
	if x != nil {
		return x.GuardianDeathDate
	}
	return ""
}

func (x *GetParentProfileResponseData) GetGuardianAddress() string {
	if x != nil {
		return x.GuardianAddress
	}
	return ""
}

func (x *GetParentProfileResponseData) GetGuardianProvinceId() uint32 {
	if x != nil {
		return x.GuardianProvinceId
	}
	return 0
}

func (x *GetParentProfileResponseData) GetGuardianProvinceName() string {
	if x != nil {
		return x.GuardianProvinceName
	}
	return ""
}

func (x *GetParentProfileResponseData) GetGuardianRegencyId() uint32 {
	if x != nil {
		return x.GuardianRegencyId
	}
	return 0
}

func (x *GetParentProfileResponseData) GetGuardianRegencyName() string {
	if x != nil {
		return x.GuardianRegencyName
	}
	return ""
}

func (x *GetParentProfileResponseData) GetGuardianPostalCode() string {
	if x != nil {
		return x.GuardianPostalCode
	}
	return ""
}

func (x *GetParentProfileResponseData) GetGuardianPhoneNumber() string {
	if x != nil {
		return x.GuardianPhoneNumber
	}
	return ""
}

func (x *GetParentProfileResponseData) GetGuardianEmail() string {
	if x != nil {
		return x.GuardianEmail
	}
	return ""
}

func (x *GetParentProfileResponseData) GetGuardianFinalAcademicBackground() string {
	if x != nil {
		return x.GuardianFinalAcademicBackground
	}
	return ""
}

func (x *GetParentProfileResponseData) GetGuardianOccupation() string {
	if x != nil {
		return x.GuardianOccupation
	}
	return ""
}

type GetParentProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                         `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *GetParentProfileResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *GetParentProfileResponse) Reset() {
	*x = GetParentProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetParentProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParentProfileResponse) ProtoMessage() {}

func (x *GetParentProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParentProfileResponse.ProtoReflect.Descriptor instead.
func (*GetParentProfileResponse) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{13}
}

func (x *GetParentProfileResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetParentProfileResponse) GetData() *GetParentProfileResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateParentProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FatherIdNumber                  string  `protobuf:"bytes,1,opt,name=father_id_number,json=fatherIdNumber,proto3" json:"father_id_number"`
	FatherName                      string  `protobuf:"bytes,2,opt,name=father_name,json=fatherName,proto3" json:"father_name"`
	FatherBirthDate                 string  `protobuf:"bytes,3,opt,name=father_birth_date,json=fatherBirthDate,proto3" json:"father_birth_date"`
	FatherDeathDate                 string  `protobuf:"bytes,4,opt,name=father_death_date,json=fatherDeathDate,proto3" json:"father_death_date"`
	FatherFinalAcademicBackground   string  `protobuf:"bytes,5,opt,name=father_final_academic_background,json=fatherFinalAcademicBackground,proto3" json:"father_final_academic_background"`
	FatherOccupation                string  `protobuf:"bytes,6,opt,name=father_occupation,json=fatherOccupation,proto3" json:"father_occupation"`
	MotherIdNumber                  string  `protobuf:"bytes,7,opt,name=mother_id_number,json=motherIdNumber,proto3" json:"mother_id_number"`
	MotherName                      string  `protobuf:"bytes,8,opt,name=mother_name,json=motherName,proto3" json:"mother_name"`
	MotherBirthDate                 string  `protobuf:"bytes,9,opt,name=mother_birth_date,json=motherBirthDate,proto3" json:"mother_birth_date"`
	MotherDeathDate                 string  `protobuf:"bytes,10,opt,name=mother_death_date,json=motherDeathDate,proto3" json:"mother_death_date"`
	MotherFinalAcademicBackground   string  `protobuf:"bytes,11,opt,name=mother_final_academic_background,json=motherFinalAcademicBackground,proto3" json:"mother_final_academic_background"`
	MotherOccupation                string  `protobuf:"bytes,12,opt,name=mother_occupation,json=motherOccupation,proto3" json:"mother_occupation"`
	ParentReligion                  string  `protobuf:"bytes,13,opt,name=parent_religion,json=parentReligion,proto3" json:"parent_religion"`
	ParentNationality               string  `protobuf:"bytes,14,opt,name=parent_nationality,json=parentNationality,proto3" json:"parent_nationality"`
	ParentAddress                   string  `protobuf:"bytes,15,opt,name=parent_address,json=parentAddress,proto3" json:"parent_address"`
	FatherWorkAddress               string  `protobuf:"bytes,16,opt,name=father_work_address,json=fatherWorkAddress,proto3" json:"father_work_address"`
	ParentRegencyId                 uint32  `protobuf:"varint,17,opt,name=parent_regency_id,json=parentRegencyId,proto3" json:"parent_regency_id"`
	ParentPostalCode                string  `protobuf:"bytes,18,opt,name=parent_postal_code,json=parentPostalCode,proto3" json:"parent_postal_code"`
	ParentPhoneNumber               string  `protobuf:"bytes,19,opt,name=parent_phone_number,json=parentPhoneNumber,proto3" json:"parent_phone_number"`
	ParentEmail                     string  `protobuf:"bytes,20,opt,name=parent_email,json=parentEmail,proto3" json:"parent_email"`
	IsFinanciallyCapable            bool    `protobuf:"varint,21,opt,name=is_financially_capable,json=isFinanciallyCapable,proto3" json:"is_financially_capable"`
	ParentIncome                    float64 `protobuf:"fixed64,22,opt,name=parent_income,json=parentIncome,proto3" json:"parent_income"`
	TotalDependent                  uint32  `protobuf:"varint,23,opt,name=total_dependent,json=totalDependent,proto3" json:"total_dependent"`
	GuardianName                    string  `protobuf:"bytes,24,opt,name=guardian_name,json=guardianName,proto3" json:"guardian_name"`
	GuardianBirthDate               string  `protobuf:"bytes,25,opt,name=guardian_birth_date,json=guardianBirthDate,proto3" json:"guardian_birth_date"`
	GuardianDeathDate               string  `protobuf:"bytes,26,opt,name=guardian_death_date,json=guardianDeathDate,proto3" json:"guardian_death_date"`
	GuardianAddress                 string  `protobuf:"bytes,27,opt,name=guardian_address,json=guardianAddress,proto3" json:"guardian_address"`
	GuardianRegencyId               uint32  `protobuf:"varint,28,opt,name=guardian_regency_id,json=guardianRegencyId,proto3" json:"guardian_regency_id"`
	GuardianPostalCode              string  `protobuf:"bytes,29,opt,name=guardian_postal_code,json=guardianPostalCode,proto3" json:"guardian_postal_code"`
	GuardianPhoneNumber             string  `protobuf:"bytes,30,opt,name=guardian_phone_number,json=guardianPhoneNumber,proto3" json:"guardian_phone_number"`
	GuardianEmail                   string  `protobuf:"bytes,31,opt,name=guardian_email,json=guardianEmail,proto3" json:"guardian_email"`
	GuardianFinalAcademicBackground string  `protobuf:"bytes,32,opt,name=guardian_final_academic_background,json=guardianFinalAcademicBackground,proto3" json:"guardian_final_academic_background"`
	GuardianOccupation              string  `protobuf:"bytes,33,opt,name=guardian_occupation,json=guardianOccupation,proto3" json:"guardian_occupation"`
}

func (x *UpdateParentProfileRequest) Reset() {
	*x = UpdateParentProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateParentProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateParentProfileRequest) ProtoMessage() {}

func (x *UpdateParentProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateParentProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateParentProfileRequest) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateParentProfileRequest) GetFatherIdNumber() string {
	if x != nil {
		return x.FatherIdNumber
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetFatherName() string {
	if x != nil {
		return x.FatherName
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetFatherBirthDate() string {
	if x != nil {
		return x.FatherBirthDate
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetFatherDeathDate() string {
	if x != nil {
		return x.FatherDeathDate
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetFatherFinalAcademicBackground() string {
	if x != nil {
		return x.FatherFinalAcademicBackground
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetFatherOccupation() string {
	if x != nil {
		return x.FatherOccupation
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetMotherIdNumber() string {
	if x != nil {
		return x.MotherIdNumber
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetMotherName() string {
	if x != nil {
		return x.MotherName
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetMotherBirthDate() string {
	if x != nil {
		return x.MotherBirthDate
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetMotherDeathDate() string {
	if x != nil {
		return x.MotherDeathDate
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetMotherFinalAcademicBackground() string {
	if x != nil {
		return x.MotherFinalAcademicBackground
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetMotherOccupation() string {
	if x != nil {
		return x.MotherOccupation
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetParentReligion() string {
	if x != nil {
		return x.ParentReligion
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetParentNationality() string {
	if x != nil {
		return x.ParentNationality
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetParentAddress() string {
	if x != nil {
		return x.ParentAddress
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetFatherWorkAddress() string {
	if x != nil {
		return x.FatherWorkAddress
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetParentRegencyId() uint32 {
	if x != nil {
		return x.ParentRegencyId
	}
	return 0
}

func (x *UpdateParentProfileRequest) GetParentPostalCode() string {
	if x != nil {
		return x.ParentPostalCode
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetParentPhoneNumber() string {
	if x != nil {
		return x.ParentPhoneNumber
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetParentEmail() string {
	if x != nil {
		return x.ParentEmail
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetIsFinanciallyCapable() bool {
	if x != nil {
		return x.IsFinanciallyCapable
	}
	return false
}

func (x *UpdateParentProfileRequest) GetParentIncome() float64 {
	if x != nil {
		return x.ParentIncome
	}
	return 0
}

func (x *UpdateParentProfileRequest) GetTotalDependent() uint32 {
	if x != nil {
		return x.TotalDependent
	}
	return 0
}

func (x *UpdateParentProfileRequest) GetGuardianName() string {
	if x != nil {
		return x.GuardianName
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetGuardianBirthDate() string {
	if x != nil {
		return x.GuardianBirthDate
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetGuardianDeathDate() string {
	if x != nil {
		return x.GuardianDeathDate
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetGuardianAddress() string {
	if x != nil {
		return x.GuardianAddress
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetGuardianRegencyId() uint32 {
	if x != nil {
		return x.GuardianRegencyId
	}
	return 0
}

func (x *UpdateParentProfileRequest) GetGuardianPostalCode() string {
	if x != nil {
		return x.GuardianPostalCode
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetGuardianPhoneNumber() string {
	if x != nil {
		return x.GuardianPhoneNumber
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetGuardianEmail() string {
	if x != nil {
		return x.GuardianEmail
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetGuardianFinalAcademicBackground() string {
	if x != nil {
		return x.GuardianFinalAcademicBackground
	}
	return ""
}

func (x *UpdateParentProfileRequest) GetGuardianOccupation() string {
	if x != nil {
		return x.GuardianOccupation
	}
	return ""
}

type UpdateParentProfileResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateParentProfileResponseData) Reset() {
	*x = UpdateParentProfileResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateParentProfileResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateParentProfileResponseData) ProtoMessage() {}

func (x *UpdateParentProfileResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateParentProfileResponseData.ProtoReflect.Descriptor instead.
func (*UpdateParentProfileResponseData) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{15}
}

type UpdateParentProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                            `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *UpdateParentProfileResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *UpdateParentProfileResponse) Reset() {
	*x = UpdateParentProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateParentProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateParentProfileResponse) ProtoMessage() {}

func (x *UpdateParentProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateParentProfileResponse.ProtoReflect.Descriptor instead.
func (*UpdateParentProfileResponse) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateParentProfileResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UpdateParentProfileResponse) GetData() *UpdateParentProfileResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSchoolProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSchoolProfileRequest) Reset() {
	*x = GetSchoolProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchoolProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchoolProfileRequest) ProtoMessage() {}

func (x *GetSchoolProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchoolProfileRequest.ProtoReflect.Descriptor instead.
func (*GetSchoolProfileRequest) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{17}
}

type GetSchoolProfileResponseDataPreHighSchoolHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Level          string `protobuf:"bytes,2,opt,name=level,proto3" json:"level"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	GraduationYear string `protobuf:"bytes,4,opt,name=graduation_year,json=graduationYear,proto3" json:"graduation_year"`
}

func (x *GetSchoolProfileResponseDataPreHighSchoolHistory) Reset() {
	*x = GetSchoolProfileResponseDataPreHighSchoolHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchoolProfileResponseDataPreHighSchoolHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchoolProfileResponseDataPreHighSchoolHistory) ProtoMessage() {}

func (x *GetSchoolProfileResponseDataPreHighSchoolHistory) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchoolProfileResponseDataPreHighSchoolHistory.ProtoReflect.Descriptor instead.
func (*GetSchoolProfileResponseDataPreHighSchoolHistory) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{18}
}

func (x *GetSchoolProfileResponseDataPreHighSchoolHistory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetSchoolProfileResponseDataPreHighSchoolHistory) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *GetSchoolProfileResponseDataPreHighSchoolHistory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetSchoolProfileResponseDataPreHighSchoolHistory) GetGraduationYear() string {
	if x != nil {
		return x.GraduationYear
	}
	return ""
}

type GetSchoolProfileResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchoolEnrollmentYear            string                                              `protobuf:"bytes,1,opt,name=school_enrollment_year,json=schoolEnrollmentYear,proto3" json:"school_enrollment_year"`
	SchoolGraduationYear            string                                              `protobuf:"bytes,2,opt,name=school_graduation_year,json=schoolGraduationYear,proto3" json:"school_graduation_year"`
	SchoolEnrollmentClass           string                                              `protobuf:"bytes,3,opt,name=school_enrollment_class,json=schoolEnrollmentClass,proto3" json:"school_enrollment_class"`
	SchoolMajor                     string                                              `protobuf:"bytes,4,opt,name=school_major,json=schoolMajor,proto3" json:"school_major"`
	SchoolType                      string                                              `protobuf:"bytes,5,opt,name=school_type,json=schoolType,proto3" json:"school_type"`
	SchoolName                      string                                              `protobuf:"bytes,6,opt,name=school_name,json=schoolName,proto3" json:"school_name"`
	SchoolProvinceId                uint32                                              `protobuf:"varint,7,opt,name=school_province_id,json=schoolProvinceId,proto3" json:"school_province_id"`
	SchoolProvinceName              string                                              `protobuf:"bytes,8,opt,name=school_province_name,json=schoolProvinceName,proto3" json:"school_province_name"`
	SchoolAddress                   string                                              `protobuf:"bytes,9,opt,name=school_address,json=schoolAddress,proto3" json:"school_address"`
	SchoolCertificateNumber         string                                              `protobuf:"bytes,10,opt,name=school_certificate_number,json=schoolCertificateNumber,proto3" json:"school_certificate_number"`
	SchoolCertificateDate           string                                              `protobuf:"bytes,11,opt,name=school_certificate_date,json=schoolCertificateDate,proto3" json:"school_certificate_date"`
	SchoolStatus                    string                                              `protobuf:"bytes,12,opt,name=school_status,json=schoolStatus,proto3" json:"school_status"`
	SchoolAccreditation             string                                              `protobuf:"bytes,13,opt,name=school_accreditation,json=schoolAccreditation,proto3" json:"school_accreditation"`
	SchoolFinalExamScore            float64                                             `protobuf:"fixed64,14,opt,name=school_final_exam_score,json=schoolFinalExamScore,proto3" json:"school_final_exam_score"`
	SchoolMathematicsFinalExamScore float64                                             `protobuf:"fixed64,15,opt,name=school_mathematics_final_exam_score,json=schoolMathematicsFinalExamScore,proto3" json:"school_mathematics_final_exam_score"`
	SchoolIndonesianFinalExamScore  float64                                             `protobuf:"fixed64,16,opt,name=school_indonesian_final_exam_score,json=schoolIndonesianFinalExamScore,proto3" json:"school_indonesian_final_exam_score"`
	SchoolEnglishFinalExamScore     float64                                             `protobuf:"fixed64,17,opt,name=school_english_final_exam_score,json=schoolEnglishFinalExamScore,proto3" json:"school_english_final_exam_score"`
	SchoolMathematicsReportScore    float64                                             `protobuf:"fixed64,18,opt,name=school_mathematics_report_score,json=schoolMathematicsReportScore,proto3" json:"school_mathematics_report_score"`
	SchoolIndonesianReportScore     float64                                             `protobuf:"fixed64,19,opt,name=school_indonesian_report_score,json=schoolIndonesianReportScore,proto3" json:"school_indonesian_report_score"`
	SchoolEnglishReportScore        float64                                             `protobuf:"fixed64,20,opt,name=school_english_report_score,json=schoolEnglishReportScore,proto3" json:"school_english_report_score"`
	PreHighSchoolHistories          []*GetSchoolProfileResponseDataPreHighSchoolHistory `protobuf:"bytes,21,rep,name=pre_high_school_histories,json=preHighSchoolHistories,proto3" json:"pre_high_school_histories"`
}

func (x *GetSchoolProfileResponseData) Reset() {
	*x = GetSchoolProfileResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchoolProfileResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchoolProfileResponseData) ProtoMessage() {}

func (x *GetSchoolProfileResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchoolProfileResponseData.ProtoReflect.Descriptor instead.
func (*GetSchoolProfileResponseData) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{19}
}

func (x *GetSchoolProfileResponseData) GetSchoolEnrollmentYear() string {
	if x != nil {
		return x.SchoolEnrollmentYear
	}
	return ""
}

func (x *GetSchoolProfileResponseData) GetSchoolGraduationYear() string {
	if x != nil {
		return x.SchoolGraduationYear
	}
	return ""
}

func (x *GetSchoolProfileResponseData) GetSchoolEnrollmentClass() string {
	if x != nil {
		return x.SchoolEnrollmentClass
	}
	return ""
}

func (x *GetSchoolProfileResponseData) GetSchoolMajor() string {
	if x != nil {
		return x.SchoolMajor
	}
	return ""
}

func (x *GetSchoolProfileResponseData) GetSchoolType() string {
	if x != nil {
		return x.SchoolType
	}
	return ""
}

func (x *GetSchoolProfileResponseData) GetSchoolName() string {
	if x != nil {
		return x.SchoolName
	}
	return ""
}

func (x *GetSchoolProfileResponseData) GetSchoolProvinceId() uint32 {
	if x != nil {
		return x.SchoolProvinceId
	}
	return 0
}

func (x *GetSchoolProfileResponseData) GetSchoolProvinceName() string {
	if x != nil {
		return x.SchoolProvinceName
	}
	return ""
}

func (x *GetSchoolProfileResponseData) GetSchoolAddress() string {
	if x != nil {
		return x.SchoolAddress
	}
	return ""
}

func (x *GetSchoolProfileResponseData) GetSchoolCertificateNumber() string {
	if x != nil {
		return x.SchoolCertificateNumber
	}
	return ""
}

func (x *GetSchoolProfileResponseData) GetSchoolCertificateDate() string {
	if x != nil {
		return x.SchoolCertificateDate
	}
	return ""
}

func (x *GetSchoolProfileResponseData) GetSchoolStatus() string {
	if x != nil {
		return x.SchoolStatus
	}
	return ""
}

func (x *GetSchoolProfileResponseData) GetSchoolAccreditation() string {
	if x != nil {
		return x.SchoolAccreditation
	}
	return ""
}

func (x *GetSchoolProfileResponseData) GetSchoolFinalExamScore() float64 {
	if x != nil {
		return x.SchoolFinalExamScore
	}
	return 0
}

func (x *GetSchoolProfileResponseData) GetSchoolMathematicsFinalExamScore() float64 {
	if x != nil {
		return x.SchoolMathematicsFinalExamScore
	}
	return 0
}

func (x *GetSchoolProfileResponseData) GetSchoolIndonesianFinalExamScore() float64 {
	if x != nil {
		return x.SchoolIndonesianFinalExamScore
	}
	return 0
}

func (x *GetSchoolProfileResponseData) GetSchoolEnglishFinalExamScore() float64 {
	if x != nil {
		return x.SchoolEnglishFinalExamScore
	}
	return 0
}

func (x *GetSchoolProfileResponseData) GetSchoolMathematicsReportScore() float64 {
	if x != nil {
		return x.SchoolMathematicsReportScore
	}
	return 0
}

func (x *GetSchoolProfileResponseData) GetSchoolIndonesianReportScore() float64 {
	if x != nil {
		return x.SchoolIndonesianReportScore
	}
	return 0
}

func (x *GetSchoolProfileResponseData) GetSchoolEnglishReportScore() float64 {
	if x != nil {
		return x.SchoolEnglishReportScore
	}
	return 0
}

func (x *GetSchoolProfileResponseData) GetPreHighSchoolHistories() []*GetSchoolProfileResponseDataPreHighSchoolHistory {
	if x != nil {
		return x.PreHighSchoolHistories
	}
	return nil
}

type GetSchoolProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                         `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *GetSchoolProfileResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *GetSchoolProfileResponse) Reset() {
	*x = GetSchoolProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchoolProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchoolProfileResponse) ProtoMessage() {}

func (x *GetSchoolProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchoolProfileResponse.ProtoReflect.Descriptor instead.
func (*GetSchoolProfileResponse) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{20}
}

func (x *GetSchoolProfileResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetSchoolProfileResponse) GetData() *GetSchoolProfileResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateSchoolProfileRequestPreHighSchoolHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level          string `protobuf:"bytes,1,opt,name=level,proto3" json:"level"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	GraduationYear string `protobuf:"bytes,3,opt,name=graduation_year,json=graduationYear,proto3" json:"graduation_year"`
}

func (x *UpdateSchoolProfileRequestPreHighSchoolHistory) Reset() {
	*x = UpdateSchoolProfileRequestPreHighSchoolHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSchoolProfileRequestPreHighSchoolHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchoolProfileRequestPreHighSchoolHistory) ProtoMessage() {}

func (x *UpdateSchoolProfileRequestPreHighSchoolHistory) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchoolProfileRequestPreHighSchoolHistory.ProtoReflect.Descriptor instead.
func (*UpdateSchoolProfileRequestPreHighSchoolHistory) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateSchoolProfileRequestPreHighSchoolHistory) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *UpdateSchoolProfileRequestPreHighSchoolHistory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSchoolProfileRequestPreHighSchoolHistory) GetGraduationYear() string {
	if x != nil {
		return x.GraduationYear
	}
	return ""
}

type UpdateSchoolProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchoolEnrollmentYear            string                                            `protobuf:"bytes,1,opt,name=school_enrollment_year,json=schoolEnrollmentYear,proto3" json:"school_enrollment_year"`
	SchoolGraduationYear            string                                            `protobuf:"bytes,2,opt,name=school_graduation_year,json=schoolGraduationYear,proto3" json:"school_graduation_year"`
	SchoolEnrollmentClass           string                                            `protobuf:"bytes,3,opt,name=school_enrollment_class,json=schoolEnrollmentClass,proto3" json:"school_enrollment_class"`
	SchoolMajor                     string                                            `protobuf:"bytes,4,opt,name=school_major,json=schoolMajor,proto3" json:"school_major"`
	SchoolType                      string                                            `protobuf:"bytes,5,opt,name=school_type,json=schoolType,proto3" json:"school_type"`
	SchoolName                      string                                            `protobuf:"bytes,6,opt,name=school_name,json=schoolName,proto3" json:"school_name"`
	SchoolProvinceId                uint32                                            `protobuf:"varint,7,opt,name=school_province_id,json=schoolProvinceId,proto3" json:"school_province_id"`
	SchoolAddress                   string                                            `protobuf:"bytes,8,opt,name=school_address,json=schoolAddress,proto3" json:"school_address"`
	SchoolCertificateNumber         string                                            `protobuf:"bytes,9,opt,name=school_certificate_number,json=schoolCertificateNumber,proto3" json:"school_certificate_number"`
	SchoolCertificateDate           string                                            `protobuf:"bytes,10,opt,name=school_certificate_date,json=schoolCertificateDate,proto3" json:"school_certificate_date"`
	SchoolStatus                    string                                            `protobuf:"bytes,11,opt,name=school_status,json=schoolStatus,proto3" json:"school_status"`
	SchoolAccreditation             string                                            `protobuf:"bytes,12,opt,name=school_accreditation,json=schoolAccreditation,proto3" json:"school_accreditation"`
	SchoolFinalExamScore            float64                                           `protobuf:"fixed64,13,opt,name=school_final_exam_score,json=schoolFinalExamScore,proto3" json:"school_final_exam_score"`
	SchoolMathematicsFinalExamScore float64                                           `protobuf:"fixed64,14,opt,name=school_mathematics_final_exam_score,json=schoolMathematicsFinalExamScore,proto3" json:"school_mathematics_final_exam_score"`
	SchoolIndonesianFinalExamScore  float64                                           `protobuf:"fixed64,15,opt,name=school_indonesian_final_exam_score,json=schoolIndonesianFinalExamScore,proto3" json:"school_indonesian_final_exam_score"`
	SchoolEnglishFinalExamScore     float64                                           `protobuf:"fixed64,16,opt,name=school_english_final_exam_score,json=schoolEnglishFinalExamScore,proto3" json:"school_english_final_exam_score"`
	SchoolMathematicsReportScore    float64                                           `protobuf:"fixed64,17,opt,name=school_mathematics_report_score,json=schoolMathematicsReportScore,proto3" json:"school_mathematics_report_score"`
	SchoolIndonesianReportScore     float64                                           `protobuf:"fixed64,18,opt,name=school_indonesian_report_score,json=schoolIndonesianReportScore,proto3" json:"school_indonesian_report_score"`
	SchoolEnglishReportScore        float64                                           `protobuf:"fixed64,19,opt,name=school_english_report_score,json=schoolEnglishReportScore,proto3" json:"school_english_report_score"`
	PreHighSchoolHistories          []*UpdateSchoolProfileRequestPreHighSchoolHistory `protobuf:"bytes,20,rep,name=pre_high_school_histories,json=preHighSchoolHistories,proto3" json:"pre_high_school_histories"`
}

func (x *UpdateSchoolProfileRequest) Reset() {
	*x = UpdateSchoolProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSchoolProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchoolProfileRequest) ProtoMessage() {}

func (x *UpdateSchoolProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchoolProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateSchoolProfileRequest) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateSchoolProfileRequest) GetSchoolEnrollmentYear() string {
	if x != nil {
		return x.SchoolEnrollmentYear
	}
	return ""
}

func (x *UpdateSchoolProfileRequest) GetSchoolGraduationYear() string {
	if x != nil {
		return x.SchoolGraduationYear
	}
	return ""
}

func (x *UpdateSchoolProfileRequest) GetSchoolEnrollmentClass() string {
	if x != nil {
		return x.SchoolEnrollmentClass
	}
	return ""
}

func (x *UpdateSchoolProfileRequest) GetSchoolMajor() string {
	if x != nil {
		return x.SchoolMajor
	}
	return ""
}

func (x *UpdateSchoolProfileRequest) GetSchoolType() string {
	if x != nil {
		return x.SchoolType
	}
	return ""
}

func (x *UpdateSchoolProfileRequest) GetSchoolName() string {
	if x != nil {
		return x.SchoolName
	}
	return ""
}

func (x *UpdateSchoolProfileRequest) GetSchoolProvinceId() uint32 {
	if x != nil {
		return x.SchoolProvinceId
	}
	return 0
}

func (x *UpdateSchoolProfileRequest) GetSchoolAddress() string {
	if x != nil {
		return x.SchoolAddress
	}
	return ""
}

func (x *UpdateSchoolProfileRequest) GetSchoolCertificateNumber() string {
	if x != nil {
		return x.SchoolCertificateNumber
	}
	return ""
}

func (x *UpdateSchoolProfileRequest) GetSchoolCertificateDate() string {
	if x != nil {
		return x.SchoolCertificateDate
	}
	return ""
}

func (x *UpdateSchoolProfileRequest) GetSchoolStatus() string {
	if x != nil {
		return x.SchoolStatus
	}
	return ""
}

func (x *UpdateSchoolProfileRequest) GetSchoolAccreditation() string {
	if x != nil {
		return x.SchoolAccreditation
	}
	return ""
}

func (x *UpdateSchoolProfileRequest) GetSchoolFinalExamScore() float64 {
	if x != nil {
		return x.SchoolFinalExamScore
	}
	return 0
}

func (x *UpdateSchoolProfileRequest) GetSchoolMathematicsFinalExamScore() float64 {
	if x != nil {
		return x.SchoolMathematicsFinalExamScore
	}
	return 0
}

func (x *UpdateSchoolProfileRequest) GetSchoolIndonesianFinalExamScore() float64 {
	if x != nil {
		return x.SchoolIndonesianFinalExamScore
	}
	return 0
}

func (x *UpdateSchoolProfileRequest) GetSchoolEnglishFinalExamScore() float64 {
	if x != nil {
		return x.SchoolEnglishFinalExamScore
	}
	return 0
}

func (x *UpdateSchoolProfileRequest) GetSchoolMathematicsReportScore() float64 {
	if x != nil {
		return x.SchoolMathematicsReportScore
	}
	return 0
}

func (x *UpdateSchoolProfileRequest) GetSchoolIndonesianReportScore() float64 {
	if x != nil {
		return x.SchoolIndonesianReportScore
	}
	return 0
}

func (x *UpdateSchoolProfileRequest) GetSchoolEnglishReportScore() float64 {
	if x != nil {
		return x.SchoolEnglishReportScore
	}
	return 0
}

func (x *UpdateSchoolProfileRequest) GetPreHighSchoolHistories() []*UpdateSchoolProfileRequestPreHighSchoolHistory {
	if x != nil {
		return x.PreHighSchoolHistories
	}
	return nil
}

type UpdateSchoolProfileResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSchoolProfileResponseData) Reset() {
	*x = UpdateSchoolProfileResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSchoolProfileResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchoolProfileResponseData) ProtoMessage() {}

func (x *UpdateSchoolProfileResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchoolProfileResponseData.ProtoReflect.Descriptor instead.
func (*UpdateSchoolProfileResponseData) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{23}
}

type UpdateSchoolProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                            `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *UpdateSchoolProfileResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *UpdateSchoolProfileResponse) Reset() {
	*x = UpdateSchoolProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_student_general_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSchoolProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchoolProfileResponse) ProtoMessage() {}

func (x *UpdateSchoolProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_student_general_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchoolProfileResponse.ProtoReflect.Descriptor instead.
func (*UpdateSchoolProfileResponse) Descriptor() ([]byte, []int) {
	return file_student_general_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateSchoolProfileResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UpdateSchoolProfileResponse) GetData() *UpdateSchoolProfileResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_student_general_proto protoreflect.FileDescriptor

var file_student_general_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x22, 0x4c, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x72, 0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x72, 0x65, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x1b, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8a, 0x08, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6d, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6d, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x50, 0x61, 0x69, 0x64,
	0x12, 0x41, 0x0a, 0x1d, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x26, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x52,
	0x0a, 0x26, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x42, 0x0a, 0x1e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x50, 0x6c, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f,
	0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f,
	0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x61, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x67, 0x70, 0x61, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x43, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe7, 0x10, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x2a, 0x0a,
	0x11, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x69, 0x72, 0x74, 0x68, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x69, 0x72, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x62, 0x69, 0x72, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x62, 0x6c, 0x69, 0x6e,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x47,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x65, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x65, 0x65, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18,
	0x64, 0x69, 0x6b, 0x74, 0x69, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x64, 0x69, 0x6b, 0x74, 0x69, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x64,
	0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67,
	0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64,
	0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x70, 0x77, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x70, 0x77, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x69, 0x73, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x69, 0x73, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x69, 0x6c, 0x6c, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x6c, 0x6c,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x74, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x77, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x61, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x73, 0x5f, 0x6b, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4b, 0x70, 0x73, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x73, 0x63,
	0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x63, 0x68, 0x6f, 0x6c,
	0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x72, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x68, 0x6f, 0x62, 0x62, 0x79, 0x22, 0x7c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xbc, 0x09, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x47, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x65, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x65, 0x74,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x70, 0x77, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x70, 0x77, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x69, 0x73, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x69, 0x73, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x69, 0x6c, 0x6c, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x77, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x72, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x6b, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4b, 0x70, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6c,
	0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x68, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x62,
	0x62, 0x79, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x82, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xc7, 0x0e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x66,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x69, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x20,
	0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6c,
	0x69, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x34,
	0x0a, 0x16, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x44, 0x65,
	0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61,
	0x6e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4b, 0x0a, 0x22, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61,
	0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x99, 0x0c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x61,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1d, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x2b, 0x0a, 0x11, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x47, 0x0a, 0x20, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6d, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61,
	0x6e, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61,
	0x6e, 0x44, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61,
	0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x65, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61,
	0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x4b, 0x0a, 0x22, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x2f, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6f, 0x63, 0x63, 0x75,
	0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x21, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x44,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x95, 0x01, 0x0a, 0x30, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x72, 0x65, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x22, 0xda, 0x09, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12, 0x34,
	0x0a, 0x16, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x65,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x45, 0x78, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x22, 0x73, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64,
	0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f,
	0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78,
	0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x68,
	0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64,
	0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x73, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x5f, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x73, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x7c, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x5f, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x65, 0x48, 0x69, 0x67, 0x68, 0x53,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x16, 0x70, 0x72,
	0x65, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x83, 0x01, 0x0a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x65, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x59, 0x65, 0x61, 0x72, 0x22, 0xa4, 0x09, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x65,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x36, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x41, 0x63, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x78, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f,
	0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x22, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e,
	0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x78, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61,
	0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x44, 0x0a, 0x1f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f,
	0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x1e,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61,
	0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x6f,
	0x6e, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x67, 0x6c,
	0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x45, 0x6e,
	0x67, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x7a, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x65, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x16, 0x70, 0x72, 0x65, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x21, 0x0a, 0x1f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x8e, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x81, 0x06, 0x0a, 0x15, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x2a, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x72, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x72, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x1a, 0x5a, 0x18, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_student_general_proto_rawDescOnce sync.Once
	file_student_general_proto_rawDescData = file_student_general_proto_rawDesc
)

func file_student_general_proto_rawDescGZIP() []byte {
	file_student_general_proto_rawDescOnce.Do(func() {
		file_student_general_proto_rawDescData = protoimpl.X.CompressGZIP(file_student_general_proto_rawDescData)
	})
	return file_student_general_proto_rawDescData
}

var file_student_general_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_student_general_proto_goTypes = []interface{}{
	(*Meta)(nil),                                             // 0: student_general.Meta
	(*Pagination)(nil),                                       // 1: student_general.Pagination
	(*GetSemesterSummaryRequest)(nil),                        // 2: student_general.GetSemesterSummaryRequest
	(*GetSemesterSummaryResponseData)(nil),                   // 3: student_general.GetSemesterSummaryResponseData
	(*GetSemesterSummaryResponse)(nil),                       // 4: student_general.GetSemesterSummaryResponse
	(*GetProfileRequest)(nil),                                // 5: student_general.GetProfileRequest
	(*GetProfileResponseData)(nil),                           // 6: student_general.GetProfileResponseData
	(*GetProfileResponse)(nil),                               // 7: student_general.GetProfileResponse
	(*UpdateProfileRequest)(nil),                             // 8: student_general.UpdateProfileRequest
	(*UpdateProfileResponseData)(nil),                        // 9: student_general.UpdateProfileResponseData
	(*UpdateProfileResponse)(nil),                            // 10: student_general.UpdateProfileResponse
	(*GetParentProfileRequest)(nil),                          // 11: student_general.GetParentProfileRequest
	(*GetParentProfileResponseData)(nil),                     // 12: student_general.GetParentProfileResponseData
	(*GetParentProfileResponse)(nil),                         // 13: student_general.GetParentProfileResponse
	(*UpdateParentProfileRequest)(nil),                       // 14: student_general.UpdateParentProfileRequest
	(*UpdateParentProfileResponseData)(nil),                  // 15: student_general.UpdateParentProfileResponseData
	(*UpdateParentProfileResponse)(nil),                      // 16: student_general.UpdateParentProfileResponse
	(*GetSchoolProfileRequest)(nil),                          // 17: student_general.GetSchoolProfileRequest
	(*GetSchoolProfileResponseDataPreHighSchoolHistory)(nil), // 18: student_general.GetSchoolProfileResponseDataPreHighSchoolHistory
	(*GetSchoolProfileResponseData)(nil),                     // 19: student_general.GetSchoolProfileResponseData
	(*GetSchoolProfileResponse)(nil),                         // 20: student_general.GetSchoolProfileResponse
	(*UpdateSchoolProfileRequestPreHighSchoolHistory)(nil),   // 21: student_general.UpdateSchoolProfileRequestPreHighSchoolHistory
	(*UpdateSchoolProfileRequest)(nil),                       // 22: student_general.UpdateSchoolProfileRequest
	(*UpdateSchoolProfileResponseData)(nil),                  // 23: student_general.UpdateSchoolProfileResponseData
	(*UpdateSchoolProfileResponse)(nil),                      // 24: student_general.UpdateSchoolProfileResponse
}
var file_student_general_proto_depIdxs = []int32{
	0,  // 0: student_general.GetSemesterSummaryResponse.meta:type_name -> student_general.Meta
	3,  // 1: student_general.GetSemesterSummaryResponse.data:type_name -> student_general.GetSemesterSummaryResponseData
	0,  // 2: student_general.GetProfileResponse.meta:type_name -> student_general.Meta
	6,  // 3: student_general.GetProfileResponse.data:type_name -> student_general.GetProfileResponseData
	0,  // 4: student_general.UpdateProfileResponse.meta:type_name -> student_general.Meta
	9,  // 5: student_general.UpdateProfileResponse.data:type_name -> student_general.UpdateProfileResponseData
	0,  // 6: student_general.GetParentProfileResponse.meta:type_name -> student_general.Meta
	12, // 7: student_general.GetParentProfileResponse.data:type_name -> student_general.GetParentProfileResponseData
	0,  // 8: student_general.UpdateParentProfileResponse.meta:type_name -> student_general.Meta
	15, // 9: student_general.UpdateParentProfileResponse.data:type_name -> student_general.UpdateParentProfileResponseData
	18, // 10: student_general.GetSchoolProfileResponseData.pre_high_school_histories:type_name -> student_general.GetSchoolProfileResponseDataPreHighSchoolHistory
	0,  // 11: student_general.GetSchoolProfileResponse.meta:type_name -> student_general.Meta
	19, // 12: student_general.GetSchoolProfileResponse.data:type_name -> student_general.GetSchoolProfileResponseData
	21, // 13: student_general.UpdateSchoolProfileRequest.pre_high_school_histories:type_name -> student_general.UpdateSchoolProfileRequestPreHighSchoolHistory
	0,  // 14: student_general.UpdateSchoolProfileResponse.meta:type_name -> student_general.Meta
	23, // 15: student_general.UpdateSchoolProfileResponse.data:type_name -> student_general.UpdateSchoolProfileResponseData
	2,  // 16: student_general.StudentGeneralHandler.GetSemesterSummary:input_type -> student_general.GetSemesterSummaryRequest
	5,  // 17: student_general.StudentGeneralHandler.GetProfile:input_type -> student_general.GetProfileRequest
	8,  // 18: student_general.StudentGeneralHandler.UpdateProfile:input_type -> student_general.UpdateProfileRequest
	11, // 19: student_general.StudentGeneralHandler.GetParentProfile:input_type -> student_general.GetParentProfileRequest
	14, // 20: student_general.StudentGeneralHandler.UpdateParentProfile:input_type -> student_general.UpdateParentProfileRequest
	17, // 21: student_general.StudentGeneralHandler.GetSchoolProfile:input_type -> student_general.GetSchoolProfileRequest
	22, // 22: student_general.StudentGeneralHandler.UpdateSchoolProfile:input_type -> student_general.UpdateSchoolProfileRequest
	4,  // 23: student_general.StudentGeneralHandler.GetSemesterSummary:output_type -> student_general.GetSemesterSummaryResponse
	7,  // 24: student_general.StudentGeneralHandler.GetProfile:output_type -> student_general.GetProfileResponse
	10, // 25: student_general.StudentGeneralHandler.UpdateProfile:output_type -> student_general.UpdateProfileResponse
	13, // 26: student_general.StudentGeneralHandler.GetParentProfile:output_type -> student_general.GetParentProfileResponse
	16, // 27: student_general.StudentGeneralHandler.UpdateParentProfile:output_type -> student_general.UpdateParentProfileResponse
	20, // 28: student_general.StudentGeneralHandler.GetSchoolProfile:output_type -> student_general.GetSchoolProfileResponse
	24, // 29: student_general.StudentGeneralHandler.UpdateSchoolProfile:output_type -> student_general.UpdateSchoolProfileResponse
	23, // [23:30] is the sub-list for method output_type
	16, // [16:23] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_student_general_proto_init() }
func file_student_general_proto_init() {
	if File_student_general_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_student_general_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSemesterSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSemesterSummaryResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSemesterSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfileResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetParentProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetParentProfileResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetParentProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateParentProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateParentProfileResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateParentProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchoolProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchoolProfileResponseDataPreHighSchoolHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchoolProfileResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchoolProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSchoolProfileRequestPreHighSchoolHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSchoolProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSchoolProfileResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_student_general_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSchoolProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_student_general_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_student_general_proto_goTypes,
		DependencyIndexes: file_student_general_proto_depIdxs,
		MessageInfos:      file_student_general_proto_msgTypes,
	}.Build()
	File_student_general_proto = out.File
	file_student_general_proto_rawDesc = nil
	file_student_general_proto_goTypes = nil
	file_student_general_proto_depIdxs = nil
}
