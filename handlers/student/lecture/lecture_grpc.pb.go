// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: student/lecture.proto

package lecture

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentLectureHandlerClient is the client API for StudentLectureHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentLectureHandlerClient interface {
	AttendAutonomousLecture(ctx context.Context, in *AttendAutonomousLectureRequest, opts ...grpc.CallOption) (*AttendAutonomousLectureResponse, error)
	GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error)
}

type studentLectureHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentLectureHandlerClient(cc grpc.ClientConnInterface) StudentLectureHandlerClient {
	return &studentLectureHandlerClient{cc}
}

func (c *studentLectureHandlerClient) AttendAutonomousLecture(ctx context.Context, in *AttendAutonomousLectureRequest, opts ...grpc.CallOption) (*AttendAutonomousLectureResponse, error) {
	out := new(AttendAutonomousLectureResponse)
	err := c.cc.Invoke(ctx, "/student_lecture.StudentLectureHandler/AttendAutonomousLecture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentLectureHandlerClient) GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error) {
	out := new(GetHistoryResponse)
	err := c.cc.Invoke(ctx, "/student_lecture.StudentLectureHandler/GetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentLectureHandlerServer is the server API for StudentLectureHandler service.
// All implementations must embed UnimplementedStudentLectureHandlerServer
// for forward compatibility
type StudentLectureHandlerServer interface {
	AttendAutonomousLecture(context.Context, *AttendAutonomousLectureRequest) (*AttendAutonomousLectureResponse, error)
	GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error)
	mustEmbedUnimplementedStudentLectureHandlerServer()
}

// UnimplementedStudentLectureHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedStudentLectureHandlerServer struct {
}

func (UnimplementedStudentLectureHandlerServer) AttendAutonomousLecture(context.Context, *AttendAutonomousLectureRequest) (*AttendAutonomousLectureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttendAutonomousLecture not implemented")
}
func (UnimplementedStudentLectureHandlerServer) GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedStudentLectureHandlerServer) mustEmbedUnimplementedStudentLectureHandlerServer() {}

// UnsafeStudentLectureHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentLectureHandlerServer will
// result in compilation errors.
type UnsafeStudentLectureHandlerServer interface {
	mustEmbedUnimplementedStudentLectureHandlerServer()
}

func RegisterStudentLectureHandlerServer(s grpc.ServiceRegistrar, srv StudentLectureHandlerServer) {
	s.RegisterService(&StudentLectureHandler_ServiceDesc, srv)
}

func _StudentLectureHandler_AttendAutonomousLecture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttendAutonomousLectureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentLectureHandlerServer).AttendAutonomousLecture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_lecture.StudentLectureHandler/AttendAutonomousLecture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentLectureHandlerServer).AttendAutonomousLecture(ctx, req.(*AttendAutonomousLectureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentLectureHandler_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentLectureHandlerServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_lecture.StudentLectureHandler/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentLectureHandlerServer).GetHistory(ctx, req.(*GetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentLectureHandler_ServiceDesc is the grpc.ServiceDesc for StudentLectureHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentLectureHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "student_lecture.StudentLectureHandler",
	HandlerType: (*StudentLectureHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttendAutonomousLecture",
			Handler:    _StudentLectureHandler_AttendAutonomousLecture_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _StudentLectureHandler_GetHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "student/lecture.proto",
}
