// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: student/student_skpi.proto

package student_skpi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentStudentSkpiHandlerClient is the client API for StudentStudentSkpiHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentStudentSkpiHandlerClient interface {
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error)
	Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*UpsertResponse, error)
}

type studentStudentSkpiHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentStudentSkpiHandlerClient(cc grpc.ClientConnInterface) StudentStudentSkpiHandlerClient {
	return &studentStudentSkpiHandlerClient{cc}
}

func (c *studentStudentSkpiHandlerClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error) {
	out := new(GetDetailResponse)
	err := c.cc.Invoke(ctx, "/student_student_skpi.StudentStudentSkpiHandler/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentStudentSkpiHandlerClient) Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*UpsertResponse, error) {
	out := new(UpsertResponse)
	err := c.cc.Invoke(ctx, "/student_student_skpi.StudentStudentSkpiHandler/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentStudentSkpiHandlerServer is the server API for StudentStudentSkpiHandler service.
// All implementations must embed UnimplementedStudentStudentSkpiHandlerServer
// for forward compatibility
type StudentStudentSkpiHandlerServer interface {
	GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error)
	Upsert(context.Context, *UpsertRequest) (*UpsertResponse, error)
	mustEmbedUnimplementedStudentStudentSkpiHandlerServer()
}

// UnimplementedStudentStudentSkpiHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedStudentStudentSkpiHandlerServer struct {
}

func (UnimplementedStudentStudentSkpiHandlerServer) GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedStudentStudentSkpiHandlerServer) Upsert(context.Context, *UpsertRequest) (*UpsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedStudentStudentSkpiHandlerServer) mustEmbedUnimplementedStudentStudentSkpiHandlerServer() {
}

// UnsafeStudentStudentSkpiHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentStudentSkpiHandlerServer will
// result in compilation errors.
type UnsafeStudentStudentSkpiHandlerServer interface {
	mustEmbedUnimplementedStudentStudentSkpiHandlerServer()
}

func RegisterStudentStudentSkpiHandlerServer(s grpc.ServiceRegistrar, srv StudentStudentSkpiHandlerServer) {
	s.RegisterService(&StudentStudentSkpiHandler_ServiceDesc, srv)
}

func _StudentStudentSkpiHandler_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentStudentSkpiHandlerServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_student_skpi.StudentStudentSkpiHandler/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentStudentSkpiHandlerServer).GetDetail(ctx, req.(*GetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentStudentSkpiHandler_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentStudentSkpiHandlerServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_student_skpi.StudentStudentSkpiHandler/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentStudentSkpiHandlerServer).Upsert(ctx, req.(*UpsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentStudentSkpiHandler_ServiceDesc is the grpc.ServiceDesc for StudentStudentSkpiHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentStudentSkpiHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "student_student_skpi.StudentStudentSkpiHandler",
	HandlerType: (*StudentStudentSkpiHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDetail",
			Handler:    _StudentStudentSkpiHandler_GetDetail_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _StudentStudentSkpiHandler_Upsert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "student/student_skpi.proto",
}
