// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: admin/report.proto

package report

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminReportHandlerClient is the client API for AdminReportHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminReportHandlerClient interface {
	StudentStatus(ctx context.Context, in *StudentStatusRequest, opts ...grpc.CallOption) (*StudentStatusResponse, error)
	StudentClassGrade(ctx context.Context, in *StudentClassGradeRequest, opts ...grpc.CallOption) (*StudentClassGradeResponse, error)
	StudentProvince(ctx context.Context, in *StudentProvinceRequest, opts ...grpc.CallOption) (*StudentProvinceResponse, error)
	StudentSchoolProvince(ctx context.Context, in *StudentSchoolProvinceRequest, opts ...grpc.CallOption) (*StudentSchoolProvinceResponse, error)
	GpaDistribution(ctx context.Context, in *GpaDistributionRequest, opts ...grpc.CallOption) (*GpaDistributionResponse, error)
	StudyDurationDistribution(ctx context.Context, in *StudyDurationDistributionRequest, opts ...grpc.CallOption) (*StudyDurationDistributionResponse, error)
	ThesisDurationDistribution(ctx context.Context, in *ThesisDurationDistributionRequest, opts ...grpc.CallOption) (*ThesisDurationDistributionResponse, error)
	StudentStatusSummary(ctx context.Context, in *StudentStatusSummaryRequest, opts ...grpc.CallOption) (*StudentStatusSummaryResponse, error)
	SubjectSummary(ctx context.Context, in *SubjectSummaryRequest, opts ...grpc.CallOption) (*SubjectSummaryResponse, error)
}

type adminReportHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminReportHandlerClient(cc grpc.ClientConnInterface) AdminReportHandlerClient {
	return &adminReportHandlerClient{cc}
}

func (c *adminReportHandlerClient) StudentStatus(ctx context.Context, in *StudentStatusRequest, opts ...grpc.CallOption) (*StudentStatusResponse, error) {
	out := new(StudentStatusResponse)
	err := c.cc.Invoke(ctx, "/admin_report.AdminReportHandler/StudentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminReportHandlerClient) StudentClassGrade(ctx context.Context, in *StudentClassGradeRequest, opts ...grpc.CallOption) (*StudentClassGradeResponse, error) {
	out := new(StudentClassGradeResponse)
	err := c.cc.Invoke(ctx, "/admin_report.AdminReportHandler/StudentClassGrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminReportHandlerClient) StudentProvince(ctx context.Context, in *StudentProvinceRequest, opts ...grpc.CallOption) (*StudentProvinceResponse, error) {
	out := new(StudentProvinceResponse)
	err := c.cc.Invoke(ctx, "/admin_report.AdminReportHandler/StudentProvince", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminReportHandlerClient) StudentSchoolProvince(ctx context.Context, in *StudentSchoolProvinceRequest, opts ...grpc.CallOption) (*StudentSchoolProvinceResponse, error) {
	out := new(StudentSchoolProvinceResponse)
	err := c.cc.Invoke(ctx, "/admin_report.AdminReportHandler/StudentSchoolProvince", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminReportHandlerClient) GpaDistribution(ctx context.Context, in *GpaDistributionRequest, opts ...grpc.CallOption) (*GpaDistributionResponse, error) {
	out := new(GpaDistributionResponse)
	err := c.cc.Invoke(ctx, "/admin_report.AdminReportHandler/GpaDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminReportHandlerClient) StudyDurationDistribution(ctx context.Context, in *StudyDurationDistributionRequest, opts ...grpc.CallOption) (*StudyDurationDistributionResponse, error) {
	out := new(StudyDurationDistributionResponse)
	err := c.cc.Invoke(ctx, "/admin_report.AdminReportHandler/StudyDurationDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminReportHandlerClient) ThesisDurationDistribution(ctx context.Context, in *ThesisDurationDistributionRequest, opts ...grpc.CallOption) (*ThesisDurationDistributionResponse, error) {
	out := new(ThesisDurationDistributionResponse)
	err := c.cc.Invoke(ctx, "/admin_report.AdminReportHandler/ThesisDurationDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminReportHandlerClient) StudentStatusSummary(ctx context.Context, in *StudentStatusSummaryRequest, opts ...grpc.CallOption) (*StudentStatusSummaryResponse, error) {
	out := new(StudentStatusSummaryResponse)
	err := c.cc.Invoke(ctx, "/admin_report.AdminReportHandler/StudentStatusSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminReportHandlerClient) SubjectSummary(ctx context.Context, in *SubjectSummaryRequest, opts ...grpc.CallOption) (*SubjectSummaryResponse, error) {
	out := new(SubjectSummaryResponse)
	err := c.cc.Invoke(ctx, "/admin_report.AdminReportHandler/SubjectSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminReportHandlerServer is the server API for AdminReportHandler service.
// All implementations must embed UnimplementedAdminReportHandlerServer
// for forward compatibility
type AdminReportHandlerServer interface {
	StudentStatus(context.Context, *StudentStatusRequest) (*StudentStatusResponse, error)
	StudentClassGrade(context.Context, *StudentClassGradeRequest) (*StudentClassGradeResponse, error)
	StudentProvince(context.Context, *StudentProvinceRequest) (*StudentProvinceResponse, error)
	StudentSchoolProvince(context.Context, *StudentSchoolProvinceRequest) (*StudentSchoolProvinceResponse, error)
	GpaDistribution(context.Context, *GpaDistributionRequest) (*GpaDistributionResponse, error)
	StudyDurationDistribution(context.Context, *StudyDurationDistributionRequest) (*StudyDurationDistributionResponse, error)
	ThesisDurationDistribution(context.Context, *ThesisDurationDistributionRequest) (*ThesisDurationDistributionResponse, error)
	StudentStatusSummary(context.Context, *StudentStatusSummaryRequest) (*StudentStatusSummaryResponse, error)
	SubjectSummary(context.Context, *SubjectSummaryRequest) (*SubjectSummaryResponse, error)
	mustEmbedUnimplementedAdminReportHandlerServer()
}

// UnimplementedAdminReportHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedAdminReportHandlerServer struct {
}

func (UnimplementedAdminReportHandlerServer) StudentStatus(context.Context, *StudentStatusRequest) (*StudentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentStatus not implemented")
}
func (UnimplementedAdminReportHandlerServer) StudentClassGrade(context.Context, *StudentClassGradeRequest) (*StudentClassGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentClassGrade not implemented")
}
func (UnimplementedAdminReportHandlerServer) StudentProvince(context.Context, *StudentProvinceRequest) (*StudentProvinceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentProvince not implemented")
}
func (UnimplementedAdminReportHandlerServer) StudentSchoolProvince(context.Context, *StudentSchoolProvinceRequest) (*StudentSchoolProvinceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentSchoolProvince not implemented")
}
func (UnimplementedAdminReportHandlerServer) GpaDistribution(context.Context, *GpaDistributionRequest) (*GpaDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GpaDistribution not implemented")
}
func (UnimplementedAdminReportHandlerServer) StudyDurationDistribution(context.Context, *StudyDurationDistributionRequest) (*StudyDurationDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudyDurationDistribution not implemented")
}
func (UnimplementedAdminReportHandlerServer) ThesisDurationDistribution(context.Context, *ThesisDurationDistributionRequest) (*ThesisDurationDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThesisDurationDistribution not implemented")
}
func (UnimplementedAdminReportHandlerServer) StudentStatusSummary(context.Context, *StudentStatusSummaryRequest) (*StudentStatusSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentStatusSummary not implemented")
}
func (UnimplementedAdminReportHandlerServer) SubjectSummary(context.Context, *SubjectSummaryRequest) (*SubjectSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectSummary not implemented")
}
func (UnimplementedAdminReportHandlerServer) mustEmbedUnimplementedAdminReportHandlerServer() {}

// UnsafeAdminReportHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminReportHandlerServer will
// result in compilation errors.
type UnsafeAdminReportHandlerServer interface {
	mustEmbedUnimplementedAdminReportHandlerServer()
}

func RegisterAdminReportHandlerServer(s grpc.ServiceRegistrar, srv AdminReportHandlerServer) {
	s.RegisterService(&AdminReportHandler_ServiceDesc, srv)
}

func _AdminReportHandler_StudentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminReportHandlerServer).StudentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_report.AdminReportHandler/StudentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminReportHandlerServer).StudentStatus(ctx, req.(*StudentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminReportHandler_StudentClassGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentClassGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminReportHandlerServer).StudentClassGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_report.AdminReportHandler/StudentClassGrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminReportHandlerServer).StudentClassGrade(ctx, req.(*StudentClassGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminReportHandler_StudentProvince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentProvinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminReportHandlerServer).StudentProvince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_report.AdminReportHandler/StudentProvince",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminReportHandlerServer).StudentProvince(ctx, req.(*StudentProvinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminReportHandler_StudentSchoolProvince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentSchoolProvinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminReportHandlerServer).StudentSchoolProvince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_report.AdminReportHandler/StudentSchoolProvince",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminReportHandlerServer).StudentSchoolProvince(ctx, req.(*StudentSchoolProvinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminReportHandler_GpaDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpaDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminReportHandlerServer).GpaDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_report.AdminReportHandler/GpaDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminReportHandlerServer).GpaDistribution(ctx, req.(*GpaDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminReportHandler_StudyDurationDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyDurationDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminReportHandlerServer).StudyDurationDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_report.AdminReportHandler/StudyDurationDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminReportHandlerServer).StudyDurationDistribution(ctx, req.(*StudyDurationDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminReportHandler_ThesisDurationDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThesisDurationDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminReportHandlerServer).ThesisDurationDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_report.AdminReportHandler/ThesisDurationDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminReportHandlerServer).ThesisDurationDistribution(ctx, req.(*ThesisDurationDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminReportHandler_StudentStatusSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentStatusSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminReportHandlerServer).StudentStatusSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_report.AdminReportHandler/StudentStatusSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminReportHandlerServer).StudentStatusSummary(ctx, req.(*StudentStatusSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminReportHandler_SubjectSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminReportHandlerServer).SubjectSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_report.AdminReportHandler/SubjectSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminReportHandlerServer).SubjectSummary(ctx, req.(*SubjectSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminReportHandler_ServiceDesc is the grpc.ServiceDesc for AdminReportHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminReportHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_report.AdminReportHandler",
	HandlerType: (*AdminReportHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StudentStatus",
			Handler:    _AdminReportHandler_StudentStatus_Handler,
		},
		{
			MethodName: "StudentClassGrade",
			Handler:    _AdminReportHandler_StudentClassGrade_Handler,
		},
		{
			MethodName: "StudentProvince",
			Handler:    _AdminReportHandler_StudentProvince_Handler,
		},
		{
			MethodName: "StudentSchoolProvince",
			Handler:    _AdminReportHandler_StudentSchoolProvince_Handler,
		},
		{
			MethodName: "GpaDistribution",
			Handler:    _AdminReportHandler_GpaDistribution_Handler,
		},
		{
			MethodName: "StudyDurationDistribution",
			Handler:    _AdminReportHandler_StudyDurationDistribution_Handler,
		},
		{
			MethodName: "ThesisDurationDistribution",
			Handler:    _AdminReportHandler_ThesisDurationDistribution_Handler,
		},
		{
			MethodName: "StudentStatusSummary",
			Handler:    _AdminReportHandler_StudentStatusSummary_Handler,
		},
		{
			MethodName: "SubjectSummary",
			Handler:    _AdminReportHandler_SubjectSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/report.proto",
}
