// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: admin/student_leave.proto

package student_leave

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminStudentLeaveHandlerClient is the client API for AdminStudentLeaveHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminStudentLeaveHandlerClient interface {
	GetListRequests(ctx context.Context, in *GetListRequestsRequest, opts ...grpc.CallOption) (*GetListRequestsResponse, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error)
	End(ctx context.Context, in *EndRequest, opts ...grpc.CallOption) (*EndResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type adminStudentLeaveHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminStudentLeaveHandlerClient(cc grpc.ClientConnInterface) AdminStudentLeaveHandlerClient {
	return &adminStudentLeaveHandlerClient{cc}
}

func (c *adminStudentLeaveHandlerClient) GetListRequests(ctx context.Context, in *GetListRequestsRequest, opts ...grpc.CallOption) (*GetListRequestsResponse, error) {
	out := new(GetListRequestsResponse)
	err := c.cc.Invoke(ctx, "/admin_student_leave.AdminStudentLeaveHandler/GetListRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminStudentLeaveHandlerClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/admin_student_leave.AdminStudentLeaveHandler/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminStudentLeaveHandlerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/admin_student_leave.AdminStudentLeaveHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminStudentLeaveHandlerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/admin_student_leave.AdminStudentLeaveHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminStudentLeaveHandlerClient) Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error) {
	out := new(ApproveResponse)
	err := c.cc.Invoke(ctx, "/admin_student_leave.AdminStudentLeaveHandler/Approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminStudentLeaveHandlerClient) End(ctx context.Context, in *EndRequest, opts ...grpc.CallOption) (*EndResponse, error) {
	out := new(EndResponse)
	err := c.cc.Invoke(ctx, "/admin_student_leave.AdminStudentLeaveHandler/End", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminStudentLeaveHandlerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/admin_student_leave.AdminStudentLeaveHandler/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminStudentLeaveHandlerServer is the server API for AdminStudentLeaveHandler service.
// All implementations must embed UnimplementedAdminStudentLeaveHandlerServer
// for forward compatibility
type AdminStudentLeaveHandlerServer interface {
	GetListRequests(context.Context, *GetListRequestsRequest) (*GetListRequestsResponse, error)
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Approve(context.Context, *ApproveRequest) (*ApproveResponse, error)
	End(context.Context, *EndRequest) (*EndResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedAdminStudentLeaveHandlerServer()
}

// UnimplementedAdminStudentLeaveHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedAdminStudentLeaveHandlerServer struct {
}

func (UnimplementedAdminStudentLeaveHandlerServer) GetListRequests(context.Context, *GetListRequestsRequest) (*GetListRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListRequests not implemented")
}
func (UnimplementedAdminStudentLeaveHandlerServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedAdminStudentLeaveHandlerServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAdminStudentLeaveHandlerServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAdminStudentLeaveHandlerServer) Approve(context.Context, *ApproveRequest) (*ApproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedAdminStudentLeaveHandlerServer) End(context.Context, *EndRequest) (*EndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method End not implemented")
}
func (UnimplementedAdminStudentLeaveHandlerServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdminStudentLeaveHandlerServer) mustEmbedUnimplementedAdminStudentLeaveHandlerServer() {
}

// UnsafeAdminStudentLeaveHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminStudentLeaveHandlerServer will
// result in compilation errors.
type UnsafeAdminStudentLeaveHandlerServer interface {
	mustEmbedUnimplementedAdminStudentLeaveHandlerServer()
}

func RegisterAdminStudentLeaveHandlerServer(s grpc.ServiceRegistrar, srv AdminStudentLeaveHandlerServer) {
	s.RegisterService(&AdminStudentLeaveHandler_ServiceDesc, srv)
}

func _AdminStudentLeaveHandler_GetListRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminStudentLeaveHandlerServer).GetListRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_student_leave.AdminStudentLeaveHandler/GetListRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminStudentLeaveHandlerServer).GetListRequests(ctx, req.(*GetListRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminStudentLeaveHandler_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminStudentLeaveHandlerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_student_leave.AdminStudentLeaveHandler/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminStudentLeaveHandlerServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminStudentLeaveHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminStudentLeaveHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_student_leave.AdminStudentLeaveHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminStudentLeaveHandlerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminStudentLeaveHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminStudentLeaveHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_student_leave.AdminStudentLeaveHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminStudentLeaveHandlerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminStudentLeaveHandler_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminStudentLeaveHandlerServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_student_leave.AdminStudentLeaveHandler/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminStudentLeaveHandlerServer).Approve(ctx, req.(*ApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminStudentLeaveHandler_End_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminStudentLeaveHandlerServer).End(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_student_leave.AdminStudentLeaveHandler/End",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminStudentLeaveHandlerServer).End(ctx, req.(*EndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminStudentLeaveHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminStudentLeaveHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_student_leave.AdminStudentLeaveHandler/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminStudentLeaveHandlerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminStudentLeaveHandler_ServiceDesc is the grpc.ServiceDesc for AdminStudentLeaveHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminStudentLeaveHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_student_leave.AdminStudentLeaveHandler",
	HandlerType: (*AdminStudentLeaveHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListRequests",
			Handler:    _AdminStudentLeaveHandler_GetListRequests_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _AdminStudentLeaveHandler_GetList_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AdminStudentLeaveHandler_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AdminStudentLeaveHandler_Update_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _AdminStudentLeaveHandler_Approve_Handler,
		},
		{
			MethodName: "End",
			Handler:    _AdminStudentLeaveHandler_End_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdminStudentLeaveHandler_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/student_leave.proto",
}
