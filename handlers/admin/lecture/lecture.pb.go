// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: admin/lecture.proto

package lecture

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Status  uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	Code    string `protobuf:"bytes,3,opt,name=code,proto3" json:"code"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{0}
}

func (x *Meta) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Meta) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Meta) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit        uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Prev         uint32 `protobuf:"varint,3,opt,name=prev,proto3" json:"prev"`
	Next         uint32 `protobuf:"varint,4,opt,name=next,proto3" json:"next"`
	TotalPages   uint32 `protobuf:"varint,5,opt,name=total_pages,json=totalPages,proto3" json:"total_pages"`
	TotalRecords uint32 `protobuf:"varint,6,opt,name=total_records,json=totalRecords,proto3" json:"total_records"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{1}
}

func (x *Pagination) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Pagination) GetPrev() uint32 {
	if x != nil {
		return x.Prev
	}
	return 0
}

func (x *Pagination) GetNext() uint32 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *Pagination) GetTotalPages() uint32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *Pagination) GetTotalRecords() uint32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page             uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit            uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	ClassId          string `protobuf:"bytes,3,opt,name=class_id,json=classId,proto3" json:"class_id"`
	HasActualLecture string `protobuf:"bytes,4,opt,name=has_actual_lecture,json=hasActualLecture,proto3" json:"has_actual_lecture"`
	IsExam           string `protobuf:"bytes,5,opt,name=is_exam,json=isExam,proto3" json:"is_exam"`
	ExamType         string `protobuf:"bytes,6,opt,name=exam_type,json=examType,proto3" json:"exam_type"`
	SemesterId       string `protobuf:"bytes,7,opt,name=semester_id,json=semesterId,proto3" json:"semester_id"`
}

func (x *GetListRequest) Reset() {
	*x = GetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRequest) ProtoMessage() {}

func (x *GetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRequest.ProtoReflect.Descriptor instead.
func (*GetListRequest) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{2}
}

func (x *GetListRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetListRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetListRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *GetListRequest) GetHasActualLecture() string {
	if x != nil {
		return x.HasActualLecture
	}
	return ""
}

func (x *GetListRequest) GetIsExam() string {
	if x != nil {
		return x.IsExam
	}
	return ""
}

func (x *GetListRequest) GetExamType() string {
	if x != nil {
		return x.ExamType
	}
	return ""
}

func (x *GetListRequest) GetSemesterId() string {
	if x != nil {
		return x.SemesterId
	}
	return ""
}

type GetListResponseDataExamSupervisor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	FrontTitle             string `protobuf:"bytes,3,opt,name=front_title,json=frontTitle,proto3" json:"front_title"`
	BackDegree             string `protobuf:"bytes,4,opt,name=back_degree,json=backDegree,proto3" json:"back_degree"`
	ExamSupervisorRoleId   string `protobuf:"bytes,5,opt,name=exam_supervisor_role_id,json=examSupervisorRoleId,proto3" json:"exam_supervisor_role_id"`
	ExamSupervisorRoleName string `protobuf:"bytes,6,opt,name=exam_supervisor_role_name,json=examSupervisorRoleName,proto3" json:"exam_supervisor_role_name"`
}

func (x *GetListResponseDataExamSupervisor) Reset() {
	*x = GetListResponseDataExamSupervisor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponseDataExamSupervisor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponseDataExamSupervisor) ProtoMessage() {}

func (x *GetListResponseDataExamSupervisor) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponseDataExamSupervisor.ProtoReflect.Descriptor instead.
func (*GetListResponseDataExamSupervisor) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{3}
}

func (x *GetListResponseDataExamSupervisor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetListResponseDataExamSupervisor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetListResponseDataExamSupervisor) GetFrontTitle() string {
	if x != nil {
		return x.FrontTitle
	}
	return ""
}

func (x *GetListResponseDataExamSupervisor) GetBackDegree() string {
	if x != nil {
		return x.BackDegree
	}
	return ""
}

func (x *GetListResponseDataExamSupervisor) GetExamSupervisorRoleId() string {
	if x != nil {
		return x.ExamSupervisorRoleId
	}
	return ""
}

func (x *GetListResponseDataExamSupervisor) GetExamSupervisorRoleName() string {
	if x != nil {
		return x.ExamSupervisorRoleName
	}
	return ""
}

type GetListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	LecturePlanDate               string                               `protobuf:"bytes,2,opt,name=lecture_plan_date,json=lecturePlanDate,proto3" json:"lecture_plan_date"`
	LecturePlanDayOfWeek          uint32                               `protobuf:"varint,3,opt,name=lecture_plan_day_of_week,json=lecturePlanDayOfWeek,proto3" json:"lecture_plan_day_of_week"`
	LecturePlanStartTime          uint32                               `protobuf:"varint,4,opt,name=lecture_plan_start_time,json=lecturePlanStartTime,proto3" json:"lecture_plan_start_time"`
	LecturePlanEndTime            uint32                               `protobuf:"varint,5,opt,name=lecture_plan_end_time,json=lecturePlanEndTime,proto3" json:"lecture_plan_end_time"`
	LectureActualDate             string                               `protobuf:"bytes,6,opt,name=lecture_actual_date,json=lectureActualDate,proto3" json:"lecture_actual_date"`
	LectureActualDayOfWeek        uint32                               `protobuf:"varint,7,opt,name=lecture_actual_day_of_week,json=lectureActualDayOfWeek,proto3" json:"lecture_actual_day_of_week"`
	LectureActualStartTime        uint32                               `protobuf:"varint,8,opt,name=lecture_actual_start_time,json=lectureActualStartTime,proto3" json:"lecture_actual_start_time"`
	LectureActualEndTime          uint32                               `protobuf:"varint,9,opt,name=lecture_actual_end_time,json=lectureActualEndTime,proto3" json:"lecture_actual_end_time"`
	LecturerId                    string                               `protobuf:"bytes,10,opt,name=lecturer_id,json=lecturerId,proto3" json:"lecturer_id"`
	LecturerName                  string                               `protobuf:"bytes,11,opt,name=lecturer_name,json=lecturerName,proto3" json:"lecturer_name"`
	ForeignLecturerName           string                               `protobuf:"bytes,12,opt,name=foreign_lecturer_name,json=foreignLecturerName,proto3" json:"foreign_lecturer_name"`
	ForeignLecturerSourceInstance string                               `protobuf:"bytes,13,opt,name=foreign_lecturer_source_instance,json=foreignLecturerSourceInstance,proto3" json:"foreign_lecturer_source_instance"`
	IsOriginalLecturer            bool                                 `protobuf:"varint,14,opt,name=is_original_lecturer,json=isOriginalLecturer,proto3" json:"is_original_lecturer"`
	ClassId                       string                               `protobuf:"bytes,15,opt,name=class_id,json=classId,proto3" json:"class_id"`
	ClassName                     string                               `protobuf:"bytes,16,opt,name=class_name,json=className,proto3" json:"class_name"`
	RoomId                        string                               `protobuf:"bytes,17,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	RoomName                      string                               `protobuf:"bytes,18,opt,name=room_name,json=roomName,proto3" json:"room_name"`
	IsMidtermExam                 bool                                 `protobuf:"varint,19,opt,name=is_midterm_exam,json=isMidtermExam,proto3" json:"is_midterm_exam"`
	IsEndtermExam                 bool                                 `protobuf:"varint,20,opt,name=is_endterm_exam,json=isEndtermExam,proto3" json:"is_endterm_exam"`
	IsTheoryExam                  bool                                 `protobuf:"varint,21,opt,name=is_theory_exam,json=isTheoryExam,proto3" json:"is_theory_exam"`
	IsPracticumExam               bool                                 `protobuf:"varint,22,opt,name=is_practicum_exam,json=isPracticumExam,proto3" json:"is_practicum_exam"`
	IsFieldPracticumExam          bool                                 `protobuf:"varint,23,opt,name=is_field_practicum_exam,json=isFieldPracticumExam,proto3" json:"is_field_practicum_exam"`
	ExamSupervisors               []*GetListResponseDataExamSupervisor `protobuf:"bytes,24,rep,name=exam_supervisors,json=examSupervisors,proto3" json:"exam_supervisors"`
	SubjectName                   string                               `protobuf:"bytes,25,opt,name=subject_name,json=subjectName,proto3" json:"subject_name"`
	SubjectCode                   string                               `protobuf:"bytes,26,opt,name=subject_code,json=subjectCode,proto3" json:"subject_code"`
	TotalParticipant              uint32                               `protobuf:"varint,27,opt,name=total_participant,json=totalParticipant,proto3" json:"total_participant"`
	BuildingId                    string                               `protobuf:"bytes,28,opt,name=building_id,json=buildingId,proto3" json:"building_id"`
	BuildingName                  string                               `protobuf:"bytes,29,opt,name=building_name,json=buildingName,proto3" json:"building_name"`
}

func (x *GetListResponseData) Reset() {
	*x = GetListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponseData) ProtoMessage() {}

func (x *GetListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponseData.ProtoReflect.Descriptor instead.
func (*GetListResponseData) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{4}
}

func (x *GetListResponseData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetListResponseData) GetLecturePlanDate() string {
	if x != nil {
		return x.LecturePlanDate
	}
	return ""
}

func (x *GetListResponseData) GetLecturePlanDayOfWeek() uint32 {
	if x != nil {
		return x.LecturePlanDayOfWeek
	}
	return 0
}

func (x *GetListResponseData) GetLecturePlanStartTime() uint32 {
	if x != nil {
		return x.LecturePlanStartTime
	}
	return 0
}

func (x *GetListResponseData) GetLecturePlanEndTime() uint32 {
	if x != nil {
		return x.LecturePlanEndTime
	}
	return 0
}

func (x *GetListResponseData) GetLectureActualDate() string {
	if x != nil {
		return x.LectureActualDate
	}
	return ""
}

func (x *GetListResponseData) GetLectureActualDayOfWeek() uint32 {
	if x != nil {
		return x.LectureActualDayOfWeek
	}
	return 0
}

func (x *GetListResponseData) GetLectureActualStartTime() uint32 {
	if x != nil {
		return x.LectureActualStartTime
	}
	return 0
}

func (x *GetListResponseData) GetLectureActualEndTime() uint32 {
	if x != nil {
		return x.LectureActualEndTime
	}
	return 0
}

func (x *GetListResponseData) GetLecturerId() string {
	if x != nil {
		return x.LecturerId
	}
	return ""
}

func (x *GetListResponseData) GetLecturerName() string {
	if x != nil {
		return x.LecturerName
	}
	return ""
}

func (x *GetListResponseData) GetForeignLecturerName() string {
	if x != nil {
		return x.ForeignLecturerName
	}
	return ""
}

func (x *GetListResponseData) GetForeignLecturerSourceInstance() string {
	if x != nil {
		return x.ForeignLecturerSourceInstance
	}
	return ""
}

func (x *GetListResponseData) GetIsOriginalLecturer() bool {
	if x != nil {
		return x.IsOriginalLecturer
	}
	return false
}

func (x *GetListResponseData) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *GetListResponseData) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *GetListResponseData) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GetListResponseData) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *GetListResponseData) GetIsMidtermExam() bool {
	if x != nil {
		return x.IsMidtermExam
	}
	return false
}

func (x *GetListResponseData) GetIsEndtermExam() bool {
	if x != nil {
		return x.IsEndtermExam
	}
	return false
}

func (x *GetListResponseData) GetIsTheoryExam() bool {
	if x != nil {
		return x.IsTheoryExam
	}
	return false
}

func (x *GetListResponseData) GetIsPracticumExam() bool {
	if x != nil {
		return x.IsPracticumExam
	}
	return false
}

func (x *GetListResponseData) GetIsFieldPracticumExam() bool {
	if x != nil {
		return x.IsFieldPracticumExam
	}
	return false
}

func (x *GetListResponseData) GetExamSupervisors() []*GetListResponseDataExamSupervisor {
	if x != nil {
		return x.ExamSupervisors
	}
	return nil
}

func (x *GetListResponseData) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *GetListResponseData) GetSubjectCode() string {
	if x != nil {
		return x.SubjectCode
	}
	return ""
}

func (x *GetListResponseData) GetTotalParticipant() uint32 {
	if x != nil {
		return x.TotalParticipant
	}
	return 0
}

func (x *GetListResponseData) GetBuildingId() string {
	if x != nil {
		return x.BuildingId
	}
	return ""
}

func (x *GetListResponseData) GetBuildingName() string {
	if x != nil {
		return x.BuildingName
	}
	return ""
}

type GetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta       *Meta                  `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Pagination *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	Data       []*GetListResponseData `protobuf:"bytes,3,rep,name=data,proto3" json:"data"`
}

func (x *GetListResponse) Reset() {
	*x = GetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponse) ProtoMessage() {}

func (x *GetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponse.ProtoReflect.Descriptor instead.
func (*GetListResponse) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{5}
}

func (x *GetListResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListResponse) GetData() []*GetListResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BulkCreateRequestLecturePlanExamSupervisor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamSupervisorId     string `protobuf:"bytes,1,opt,name=exam_supervisor_id,json=examSupervisorId,proto3" json:"exam_supervisor_id"`
	ExamSupervisorRoleId string `protobuf:"bytes,2,opt,name=exam_supervisor_role_id,json=examSupervisorRoleId,proto3" json:"exam_supervisor_role_id"`
}

func (x *BulkCreateRequestLecturePlanExamSupervisor) Reset() {
	*x = BulkCreateRequestLecturePlanExamSupervisor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateRequestLecturePlanExamSupervisor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateRequestLecturePlanExamSupervisor) ProtoMessage() {}

func (x *BulkCreateRequestLecturePlanExamSupervisor) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateRequestLecturePlanExamSupervisor.ProtoReflect.Descriptor instead.
func (*BulkCreateRequestLecturePlanExamSupervisor) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{6}
}

func (x *BulkCreateRequestLecturePlanExamSupervisor) GetExamSupervisorId() string {
	if x != nil {
		return x.ExamSupervisorId
	}
	return ""
}

func (x *BulkCreateRequestLecturePlanExamSupervisor) GetExamSupervisorRoleId() string {
	if x != nil {
		return x.ExamSupervisorRoleId
	}
	return ""
}

type BulkCreateRequestLecturePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LecturePlanDate      string                                        `protobuf:"bytes,1,opt,name=lecture_plan_date,json=lecturePlanDate,proto3" json:"lecture_plan_date"`
	LecturePlanStartTime uint32                                        `protobuf:"varint,2,opt,name=lecture_plan_start_time,json=lecturePlanStartTime,proto3" json:"lecture_plan_start_time"`
	LecturePlanEndTime   uint32                                        `protobuf:"varint,3,opt,name=lecture_plan_end_time,json=lecturePlanEndTime,proto3" json:"lecture_plan_end_time"`
	RoomId               string                                        `protobuf:"bytes,4,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	LecturerId           string                                        `protobuf:"bytes,5,opt,name=lecturer_id,json=lecturerId,proto3" json:"lecturer_id"`
	IsExam               bool                                          `protobuf:"varint,6,opt,name=is_exam,json=isExam,proto3" json:"is_exam"`
	IsTheoryExam         bool                                          `protobuf:"varint,7,opt,name=is_theory_exam,json=isTheoryExam,proto3" json:"is_theory_exam"`
	IsPracticumExam      bool                                          `protobuf:"varint,8,opt,name=is_practicum_exam,json=isPracticumExam,proto3" json:"is_practicum_exam"`
	IsFieldPracticumExam bool                                          `protobuf:"varint,9,opt,name=is_field_practicum_exam,json=isFieldPracticumExam,proto3" json:"is_field_practicum_exam"`
	IsMidtermExam        bool                                          `protobuf:"varint,10,opt,name=is_midterm_exam,json=isMidtermExam,proto3" json:"is_midterm_exam"`
	IsEndtermExam        bool                                          `protobuf:"varint,11,opt,name=is_endterm_exam,json=isEndtermExam,proto3" json:"is_endterm_exam"`
	ExamSupervisors      []*BulkCreateRequestLecturePlanExamSupervisor `protobuf:"bytes,12,rep,name=exam_supervisors,json=examSupervisors,proto3" json:"exam_supervisors"`
}

func (x *BulkCreateRequestLecturePlan) Reset() {
	*x = BulkCreateRequestLecturePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateRequestLecturePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateRequestLecturePlan) ProtoMessage() {}

func (x *BulkCreateRequestLecturePlan) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateRequestLecturePlan.ProtoReflect.Descriptor instead.
func (*BulkCreateRequestLecturePlan) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{7}
}

func (x *BulkCreateRequestLecturePlan) GetLecturePlanDate() string {
	if x != nil {
		return x.LecturePlanDate
	}
	return ""
}

func (x *BulkCreateRequestLecturePlan) GetLecturePlanStartTime() uint32 {
	if x != nil {
		return x.LecturePlanStartTime
	}
	return 0
}

func (x *BulkCreateRequestLecturePlan) GetLecturePlanEndTime() uint32 {
	if x != nil {
		return x.LecturePlanEndTime
	}
	return 0
}

func (x *BulkCreateRequestLecturePlan) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *BulkCreateRequestLecturePlan) GetLecturerId() string {
	if x != nil {
		return x.LecturerId
	}
	return ""
}

func (x *BulkCreateRequestLecturePlan) GetIsExam() bool {
	if x != nil {
		return x.IsExam
	}
	return false
}

func (x *BulkCreateRequestLecturePlan) GetIsTheoryExam() bool {
	if x != nil {
		return x.IsTheoryExam
	}
	return false
}

func (x *BulkCreateRequestLecturePlan) GetIsPracticumExam() bool {
	if x != nil {
		return x.IsPracticumExam
	}
	return false
}

func (x *BulkCreateRequestLecturePlan) GetIsFieldPracticumExam() bool {
	if x != nil {
		return x.IsFieldPracticumExam
	}
	return false
}

func (x *BulkCreateRequestLecturePlan) GetIsMidtermExam() bool {
	if x != nil {
		return x.IsMidtermExam
	}
	return false
}

func (x *BulkCreateRequestLecturePlan) GetIsEndtermExam() bool {
	if x != nil {
		return x.IsEndtermExam
	}
	return false
}

func (x *BulkCreateRequestLecturePlan) GetExamSupervisors() []*BulkCreateRequestLecturePlanExamSupervisor {
	if x != nil {
		return x.ExamSupervisors
	}
	return nil
}

type BulkCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId      string                          `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id"`
	LecturePlans []*BulkCreateRequestLecturePlan `protobuf:"bytes,2,rep,name=lecture_plans,json=lecturePlans,proto3" json:"lecture_plans"`
}

func (x *BulkCreateRequest) Reset() {
	*x = BulkCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateRequest) ProtoMessage() {}

func (x *BulkCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateRequest) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{8}
}

func (x *BulkCreateRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *BulkCreateRequest) GetLecturePlans() []*BulkCreateRequestLecturePlan {
	if x != nil {
		return x.LecturePlans
	}
	return nil
}

type BulkCreateResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BulkCreateResponseData) Reset() {
	*x = BulkCreateResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateResponseData) ProtoMessage() {}

func (x *BulkCreateResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateResponseData.ProtoReflect.Descriptor instead.
func (*BulkCreateResponseData) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{9}
}

type BulkCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                   `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *BulkCreateResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *BulkCreateResponse) Reset() {
	*x = BulkCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateResponse) ProtoMessage() {}

func (x *BulkCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateResponse.ProtoReflect.Descriptor instead.
func (*BulkCreateResponse) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{10}
}

func (x *BulkCreateResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *BulkCreateResponse) GetData() *BulkCreateResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateRequestParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id"`
	IsAttend  bool   `protobuf:"varint,2,opt,name=is_attend,json=isAttend,proto3" json:"is_attend"`
	IsSick    bool   `protobuf:"varint,3,opt,name=is_sick,json=isSick,proto3" json:"is_sick"`
	IsLeave   bool   `protobuf:"varint,4,opt,name=is_leave,json=isLeave,proto3" json:"is_leave"`
	IsAwol    bool   `protobuf:"varint,5,opt,name=is_awol,json=isAwol,proto3" json:"is_awol"`
}

func (x *UpdateRequestParticipant) Reset() {
	*x = UpdateRequestParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequestParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequestParticipant) ProtoMessage() {}

func (x *UpdateRequestParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequestParticipant.ProtoReflect.Descriptor instead.
func (*UpdateRequestParticipant) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateRequestParticipant) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *UpdateRequestParticipant) GetIsAttend() bool {
	if x != nil {
		return x.IsAttend
	}
	return false
}

func (x *UpdateRequestParticipant) GetIsSick() bool {
	if x != nil {
		return x.IsSick
	}
	return false
}

func (x *UpdateRequestParticipant) GetIsLeave() bool {
	if x != nil {
		return x.IsLeave
	}
	return false
}

func (x *UpdateRequestParticipant) GetIsAwol() bool {
	if x != nil {
		return x.IsAwol
	}
	return false
}

type UpdateRequestExamSupervisor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamSupervisorId     string `protobuf:"bytes,1,opt,name=exam_supervisor_id,json=examSupervisorId,proto3" json:"exam_supervisor_id"`
	ExamSupervisorRoleId string `protobuf:"bytes,2,opt,name=exam_supervisor_role_id,json=examSupervisorRoleId,proto3" json:"exam_supervisor_role_id"`
}

func (x *UpdateRequestExamSupervisor) Reset() {
	*x = UpdateRequestExamSupervisor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequestExamSupervisor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequestExamSupervisor) ProtoMessage() {}

func (x *UpdateRequestExamSupervisor) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequestExamSupervisor.ProtoReflect.Descriptor instead.
func (*UpdateRequestExamSupervisor) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateRequestExamSupervisor) GetExamSupervisorId() string {
	if x != nil {
		return x.ExamSupervisorId
	}
	return ""
}

func (x *UpdateRequestExamSupervisor) GetExamSupervisorRoleId() string {
	if x != nil {
		return x.ExamSupervisorRoleId
	}
	return ""
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	LecturerId                    string                         `protobuf:"bytes,2,opt,name=lecturer_id,json=lecturerId,proto3" json:"lecturer_id"`
	ForeignLecturerName           string                         `protobuf:"bytes,3,opt,name=foreign_lecturer_name,json=foreignLecturerName,proto3" json:"foreign_lecturer_name"`
	ForeignLecturerSourceInstance string                         `protobuf:"bytes,4,opt,name=foreign_lecturer_source_instance,json=foreignLecturerSourceInstance,proto3" json:"foreign_lecturer_source_instance"`
	LecturePlanDate               string                         `protobuf:"bytes,5,opt,name=lecture_plan_date,json=lecturePlanDate,proto3" json:"lecture_plan_date"`
	LecturePlanStartTime          uint32                         `protobuf:"varint,6,opt,name=lecture_plan_start_time,json=lecturePlanStartTime,proto3" json:"lecture_plan_start_time"`
	LecturePlanEndTime            uint32                         `protobuf:"varint,7,opt,name=lecture_plan_end_time,json=lecturePlanEndTime,proto3" json:"lecture_plan_end_time"`
	LectureTheme                  string                         `protobuf:"bytes,8,opt,name=lecture_theme,json=lectureTheme,proto3" json:"lecture_theme"`
	LectureSubject                string                         `protobuf:"bytes,9,opt,name=lecture_subject,json=lectureSubject,proto3" json:"lecture_subject"`
	Remarks                       string                         `protobuf:"bytes,10,opt,name=remarks,proto3" json:"remarks"`
	Participants                  []*UpdateRequestParticipant    `protobuf:"bytes,11,rep,name=participants,proto3" json:"participants"`
	RoomId                        string                         `protobuf:"bytes,12,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	ExamSupervisors               []*UpdateRequestExamSupervisor `protobuf:"bytes,13,rep,name=exam_supervisors,json=examSupervisors,proto3" json:"exam_supervisors"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRequest) GetLecturerId() string {
	if x != nil {
		return x.LecturerId
	}
	return ""
}

func (x *UpdateRequest) GetForeignLecturerName() string {
	if x != nil {
		return x.ForeignLecturerName
	}
	return ""
}

func (x *UpdateRequest) GetForeignLecturerSourceInstance() string {
	if x != nil {
		return x.ForeignLecturerSourceInstance
	}
	return ""
}

func (x *UpdateRequest) GetLecturePlanDate() string {
	if x != nil {
		return x.LecturePlanDate
	}
	return ""
}

func (x *UpdateRequest) GetLecturePlanStartTime() uint32 {
	if x != nil {
		return x.LecturePlanStartTime
	}
	return 0
}

func (x *UpdateRequest) GetLecturePlanEndTime() uint32 {
	if x != nil {
		return x.LecturePlanEndTime
	}
	return 0
}

func (x *UpdateRequest) GetLectureTheme() string {
	if x != nil {
		return x.LectureTheme
	}
	return ""
}

func (x *UpdateRequest) GetLectureSubject() string {
	if x != nil {
		return x.LectureSubject
	}
	return ""
}

func (x *UpdateRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *UpdateRequest) GetParticipants() []*UpdateRequestParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *UpdateRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *UpdateRequest) GetExamSupervisors() []*UpdateRequestExamSupervisor {
	if x != nil {
		return x.ExamSupervisors
	}
	return nil
}

type UpdateResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateResponseData) Reset() {
	*x = UpdateResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponseData) ProtoMessage() {}

func (x *UpdateResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponseData.ProtoReflect.Descriptor instead.
func (*UpdateResponseData) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{14}
}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *UpdateResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UpdateResponse) GetData() *UpdateResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResponseData) Reset() {
	*x = DeleteResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponseData) ProtoMessage() {}

func (x *DeleteResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponseData.ProtoReflect.Descriptor instead.
func (*DeleteResponseData) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{17}
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *DeleteResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DeleteResponse) GetData() *DeleteResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResetParticipationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *ResetParticipationRequest) Reset() {
	*x = ResetParticipationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetParticipationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetParticipationRequest) ProtoMessage() {}

func (x *ResetParticipationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetParticipationRequest.ProtoReflect.Descriptor instead.
func (*ResetParticipationRequest) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{19}
}

func (x *ResetParticipationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ResetParticipationResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetParticipationResponseData) Reset() {
	*x = ResetParticipationResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetParticipationResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetParticipationResponseData) ProtoMessage() {}

func (x *ResetParticipationResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetParticipationResponseData.ProtoReflect.Descriptor instead.
func (*ResetParticipationResponseData) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{20}
}

type ResetParticipationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                           `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *ResetParticipationResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *ResetParticipationResponse) Reset() {
	*x = ResetParticipationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetParticipationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetParticipationResponse) ProtoMessage() {}

func (x *ResetParticipationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetParticipationResponse.ProtoReflect.Descriptor instead.
func (*ResetParticipationResponse) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{21}
}

func (x *ResetParticipationResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ResetParticipationResponse) GetData() *ResetParticipationResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetStudentParticipationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit     uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	StudentId string `protobuf:"bytes,3,opt,name=student_id,json=studentId,proto3" json:"student_id"`
	ClassId   string `protobuf:"bytes,4,opt,name=class_id,json=classId,proto3" json:"class_id"`
}

func (x *GetStudentParticipationRequest) Reset() {
	*x = GetStudentParticipationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStudentParticipationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentParticipationRequest) ProtoMessage() {}

func (x *GetStudentParticipationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentParticipationRequest.ProtoReflect.Descriptor instead.
func (*GetStudentParticipationRequest) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{22}
}

func (x *GetStudentParticipationRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetStudentParticipationRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetStudentParticipationRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *GetStudentParticipationRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

type GetStudentParticipationResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	LecturePlanDate        string `protobuf:"bytes,2,opt,name=lecture_plan_date,json=lecturePlanDate,proto3" json:"lecture_plan_date"`
	LecturePlanDayOfWeek   uint32 `protobuf:"varint,3,opt,name=lecture_plan_day_of_week,json=lecturePlanDayOfWeek,proto3" json:"lecture_plan_day_of_week"`
	LecturePlanStartTime   uint32 `protobuf:"varint,4,opt,name=lecture_plan_start_time,json=lecturePlanStartTime,proto3" json:"lecture_plan_start_time"`
	LecturePlanEndTime     uint32 `protobuf:"varint,5,opt,name=lecture_plan_end_time,json=lecturePlanEndTime,proto3" json:"lecture_plan_end_time"`
	LectureActualDate      string `protobuf:"bytes,6,opt,name=lecture_actual_date,json=lectureActualDate,proto3" json:"lecture_actual_date"`
	LectureActualDayOfWeek uint32 `protobuf:"varint,7,opt,name=lecture_actual_day_of_week,json=lectureActualDayOfWeek,proto3" json:"lecture_actual_day_of_week"`
	LectureActualStartTime uint32 `protobuf:"varint,8,opt,name=lecture_actual_start_time,json=lectureActualStartTime,proto3" json:"lecture_actual_start_time"`
	LectureActualEndTime   uint32 `protobuf:"varint,9,opt,name=lecture_actual_end_time,json=lectureActualEndTime,proto3" json:"lecture_actual_end_time"`
	IsAttend               bool   `protobuf:"varint,10,opt,name=is_attend,json=isAttend,proto3" json:"is_attend"`
	IsSick                 bool   `protobuf:"varint,11,opt,name=is_sick,json=isSick,proto3" json:"is_sick"`
	IsLeave                bool   `protobuf:"varint,12,opt,name=is_leave,json=isLeave,proto3" json:"is_leave"`
	IsAwol                 bool   `protobuf:"varint,13,opt,name=is_awol,json=isAwol,proto3" json:"is_awol"`
}

func (x *GetStudentParticipationResponseData) Reset() {
	*x = GetStudentParticipationResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStudentParticipationResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentParticipationResponseData) ProtoMessage() {}

func (x *GetStudentParticipationResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentParticipationResponseData.ProtoReflect.Descriptor instead.
func (*GetStudentParticipationResponseData) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{23}
}

func (x *GetStudentParticipationResponseData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetStudentParticipationResponseData) GetLecturePlanDate() string {
	if x != nil {
		return x.LecturePlanDate
	}
	return ""
}

func (x *GetStudentParticipationResponseData) GetLecturePlanDayOfWeek() uint32 {
	if x != nil {
		return x.LecturePlanDayOfWeek
	}
	return 0
}

func (x *GetStudentParticipationResponseData) GetLecturePlanStartTime() uint32 {
	if x != nil {
		return x.LecturePlanStartTime
	}
	return 0
}

func (x *GetStudentParticipationResponseData) GetLecturePlanEndTime() uint32 {
	if x != nil {
		return x.LecturePlanEndTime
	}
	return 0
}

func (x *GetStudentParticipationResponseData) GetLectureActualDate() string {
	if x != nil {
		return x.LectureActualDate
	}
	return ""
}

func (x *GetStudentParticipationResponseData) GetLectureActualDayOfWeek() uint32 {
	if x != nil {
		return x.LectureActualDayOfWeek
	}
	return 0
}

func (x *GetStudentParticipationResponseData) GetLectureActualStartTime() uint32 {
	if x != nil {
		return x.LectureActualStartTime
	}
	return 0
}

func (x *GetStudentParticipationResponseData) GetLectureActualEndTime() uint32 {
	if x != nil {
		return x.LectureActualEndTime
	}
	return 0
}

func (x *GetStudentParticipationResponseData) GetIsAttend() bool {
	if x != nil {
		return x.IsAttend
	}
	return false
}

func (x *GetStudentParticipationResponseData) GetIsSick() bool {
	if x != nil {
		return x.IsSick
	}
	return false
}

func (x *GetStudentParticipationResponseData) GetIsLeave() bool {
	if x != nil {
		return x.IsLeave
	}
	return false
}

func (x *GetStudentParticipationResponseData) GetIsAwol() bool {
	if x != nil {
		return x.IsAwol
	}
	return false
}

type GetStudentParticipationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta       *Meta                                  `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Pagination *Pagination                            `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	Data       []*GetStudentParticipationResponseData `protobuf:"bytes,3,rep,name=data,proto3" json:"data"`
}

func (x *GetStudentParticipationResponse) Reset() {
	*x = GetStudentParticipationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStudentParticipationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentParticipationResponse) ProtoMessage() {}

func (x *GetStudentParticipationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentParticipationResponse.ProtoReflect.Descriptor instead.
func (*GetStudentParticipationResponse) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{24}
}

func (x *GetStudentParticipationResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetStudentParticipationResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetStudentParticipationResponse) GetData() []*GetStudentParticipationResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCalendarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year       uint32 `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month      uint32 `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	RoomId     string `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	LecturerId string `protobuf:"bytes,4,opt,name=lecturer_id,json=lecturerId,proto3" json:"lecturer_id"`
	ClassId    string `protobuf:"bytes,5,opt,name=class_id,json=classId,proto3" json:"class_id"`
}

func (x *GetCalendarRequest) Reset() {
	*x = GetCalendarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalendarRequest) ProtoMessage() {}

func (x *GetCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalendarRequest.ProtoReflect.Descriptor instead.
func (*GetCalendarRequest) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{25}
}

func (x *GetCalendarRequest) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *GetCalendarRequest) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *GetCalendarRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GetCalendarRequest) GetLecturerId() string {
	if x != nil {
		return x.LecturerId
	}
	return ""
}

func (x *GetCalendarRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

type GetCalendarResponseDataLecture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LecturePlanStartTime          uint32 `protobuf:"varint,1,opt,name=lecture_plan_start_time,json=lecturePlanStartTime,proto3" json:"lecture_plan_start_time"`
	LecturePlanEndTime            uint32 `protobuf:"varint,2,opt,name=lecture_plan_end_time,json=lecturePlanEndTime,proto3" json:"lecture_plan_end_time"`
	ClassId                       string `protobuf:"bytes,3,opt,name=class_id,json=classId,proto3" json:"class_id"`
	ClassName                     string `protobuf:"bytes,4,opt,name=class_name,json=className,proto3" json:"class_name"`
	RoomId                        string `protobuf:"bytes,5,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	RoomName                      string `protobuf:"bytes,6,opt,name=room_name,json=roomName,proto3" json:"room_name"`
	LecturerId                    string `protobuf:"bytes,7,opt,name=lecturer_id,json=lecturerId,proto3" json:"lecturer_id"`
	LecturerName                  string `protobuf:"bytes,8,opt,name=lecturer_name,json=lecturerName,proto3" json:"lecturer_name"`
	LecturerFrontTitle            string `protobuf:"bytes,9,opt,name=lecturer_front_title,json=lecturerFrontTitle,proto3" json:"lecturer_front_title"`
	LecturerBackDegree            string `protobuf:"bytes,10,opt,name=lecturer_back_degree,json=lecturerBackDegree,proto3" json:"lecturer_back_degree"`
	ForeignLecturerName           string `protobuf:"bytes,11,opt,name=foreign_lecturer_name,json=foreignLecturerName,proto3" json:"foreign_lecturer_name"`
	ForeignLecturerSourceInstance string `protobuf:"bytes,12,opt,name=foreign_lecturer_source_instance,json=foreignLecturerSourceInstance,proto3" json:"foreign_lecturer_source_instance"`
}

func (x *GetCalendarResponseDataLecture) Reset() {
	*x = GetCalendarResponseDataLecture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCalendarResponseDataLecture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalendarResponseDataLecture) ProtoMessage() {}

func (x *GetCalendarResponseDataLecture) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalendarResponseDataLecture.ProtoReflect.Descriptor instead.
func (*GetCalendarResponseDataLecture) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{26}
}

func (x *GetCalendarResponseDataLecture) GetLecturePlanStartTime() uint32 {
	if x != nil {
		return x.LecturePlanStartTime
	}
	return 0
}

func (x *GetCalendarResponseDataLecture) GetLecturePlanEndTime() uint32 {
	if x != nil {
		return x.LecturePlanEndTime
	}
	return 0
}

func (x *GetCalendarResponseDataLecture) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *GetCalendarResponseDataLecture) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *GetCalendarResponseDataLecture) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GetCalendarResponseDataLecture) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *GetCalendarResponseDataLecture) GetLecturerId() string {
	if x != nil {
		return x.LecturerId
	}
	return ""
}

func (x *GetCalendarResponseDataLecture) GetLecturerName() string {
	if x != nil {
		return x.LecturerName
	}
	return ""
}

func (x *GetCalendarResponseDataLecture) GetLecturerFrontTitle() string {
	if x != nil {
		return x.LecturerFrontTitle
	}
	return ""
}

func (x *GetCalendarResponseDataLecture) GetLecturerBackDegree() string {
	if x != nil {
		return x.LecturerBackDegree
	}
	return ""
}

func (x *GetCalendarResponseDataLecture) GetForeignLecturerName() string {
	if x != nil {
		return x.ForeignLecturerName
	}
	return ""
}

func (x *GetCalendarResponseDataLecture) GetForeignLecturerSourceInstance() string {
	if x != nil {
		return x.ForeignLecturerSourceInstance
	}
	return ""
}

type GetCalendarResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date     string                            `protobuf:"bytes,1,opt,name=date,proto3" json:"date"`
	Lectures []*GetCalendarResponseDataLecture `protobuf:"bytes,2,rep,name=lectures,proto3" json:"lectures"`
}

func (x *GetCalendarResponseData) Reset() {
	*x = GetCalendarResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCalendarResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalendarResponseData) ProtoMessage() {}

func (x *GetCalendarResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalendarResponseData.ProtoReflect.Descriptor instead.
func (*GetCalendarResponseData) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{27}
}

func (x *GetCalendarResponseData) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GetCalendarResponseData) GetLectures() []*GetCalendarResponseDataLecture {
	if x != nil {
		return x.Lectures
	}
	return nil
}

type GetCalendarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                      `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data []*GetCalendarResponseData `protobuf:"bytes,2,rep,name=data,proto3" json:"data"`
}

func (x *GetCalendarResponse) Reset() {
	*x = GetCalendarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecture_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCalendarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalendarResponse) ProtoMessage() {}

func (x *GetCalendarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecture_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalendarResponse.ProtoReflect.Descriptor instead.
func (*GetCalendarResponse) Descriptor() ([]byte, []int) {
	return file_admin_lecture_proto_rawDescGZIP(), []int{28}
}

func (x *GetCalendarResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetCalendarResponse) GetData() []*GetCalendarResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_admin_lecture_proto protoreflect.FileDescriptor

var file_admin_lecture_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x72, 0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x72, 0x65, 0x76, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e,
	0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68,
	0x61, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6d, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xfb, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78,
	0x61, 0x6d, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x78, 0x61,
	0x6d, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x78,
	0x61, 0x6d, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa5, 0x0a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x6c, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f,
	0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b,
	0x12, 0x35, 0x0a, 0x17, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x6c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x79,
	0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x66, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69,
	0x73, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x64, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x65, 0x78, 0x61, 0x6d,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x69, 0x64, 0x74, 0x65, 0x72,
	0x6d, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x74,
	0x65, 0x72, 0x6d, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x45, 0x6e, 0x64, 0x74, 0x65, 0x72, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x45,
	0x78, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x63, 0x75, 0x6d, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x12,
	0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x63, 0x75, 0x6d, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x69, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63,
	0x75, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x5b, 0x0a, 0x10, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x52, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xad, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x91, 0x01, 0x0a,
	0x2a, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x61,
	0x6d, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x65,
	0x78, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x61,
	0x6d, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x61, 0x6d,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0xc6, 0x04, 0x0a, 0x1c, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x17, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73,
	0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x61, 0x6d,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d,
	0x5f, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x17,
	0x69, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63,
	0x75, 0x6d, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69,
	0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x45,
	0x78, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x64, 0x74, 0x65, 0x72,
	0x6d, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x4d, 0x69, 0x64, 0x74, 0x65, 0x72, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x73, 0x5f, 0x65, 0x6e, 0x64, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x74, 0x65, 0x72, 0x6d, 0x45,
	0x78, 0x61, 0x6d, 0x12, 0x64, 0x0a, 0x10, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x42, 0x75,
	0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0d, 0x6c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0c,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x18, 0x0a, 0x16,
	0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x78, 0x0a, 0x12, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xa3, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x73, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x69,
	0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x61, 0x77, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x41, 0x77, 0x6f, 0x6c, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xf8, 0x04, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x66, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x15, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x55, 0x0a, 0x10, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1f,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x41,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x84, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x22, 0xcb, 0x04, 0x0a, 0x23, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x18,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x4f, 0x66,
	0x57, 0x65, 0x65, 0x6b, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a,
	0x0a, 0x1a, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x73, 0x69, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x69,
	0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x61, 0x77, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x41, 0x77, 0x6f, 0x6c, 0x22, 0xcd, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x22, 0xa1, 0x04, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x67,
	0x72, 0x65, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1d, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x78, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x49, 0x0a, 0x08, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x08, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x89, 0x05, 0x0a, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x4a,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x42, 0x75,
	0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6b, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x18, 0x5a, 0x16, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_lecture_proto_rawDescOnce sync.Once
	file_admin_lecture_proto_rawDescData = file_admin_lecture_proto_rawDesc
)

func file_admin_lecture_proto_rawDescGZIP() []byte {
	file_admin_lecture_proto_rawDescOnce.Do(func() {
		file_admin_lecture_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_lecture_proto_rawDescData)
	})
	return file_admin_lecture_proto_rawDescData
}

var file_admin_lecture_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_admin_lecture_proto_goTypes = []interface{}{
	(*Meta)(nil),                                       // 0: admin_lecture.Meta
	(*Pagination)(nil),                                 // 1: admin_lecture.Pagination
	(*GetListRequest)(nil),                             // 2: admin_lecture.GetListRequest
	(*GetListResponseDataExamSupervisor)(nil),          // 3: admin_lecture.GetListResponseDataExamSupervisor
	(*GetListResponseData)(nil),                        // 4: admin_lecture.GetListResponseData
	(*GetListResponse)(nil),                            // 5: admin_lecture.GetListResponse
	(*BulkCreateRequestLecturePlanExamSupervisor)(nil), // 6: admin_lecture.BulkCreateRequestLecturePlanExamSupervisor
	(*BulkCreateRequestLecturePlan)(nil),               // 7: admin_lecture.BulkCreateRequestLecturePlan
	(*BulkCreateRequest)(nil),                          // 8: admin_lecture.BulkCreateRequest
	(*BulkCreateResponseData)(nil),                     // 9: admin_lecture.BulkCreateResponseData
	(*BulkCreateResponse)(nil),                         // 10: admin_lecture.BulkCreateResponse
	(*UpdateRequestParticipant)(nil),                   // 11: admin_lecture.UpdateRequestParticipant
	(*UpdateRequestExamSupervisor)(nil),                // 12: admin_lecture.UpdateRequestExamSupervisor
	(*UpdateRequest)(nil),                              // 13: admin_lecture.UpdateRequest
	(*UpdateResponseData)(nil),                         // 14: admin_lecture.UpdateResponseData
	(*UpdateResponse)(nil),                             // 15: admin_lecture.UpdateResponse
	(*DeleteRequest)(nil),                              // 16: admin_lecture.DeleteRequest
	(*DeleteResponseData)(nil),                         // 17: admin_lecture.DeleteResponseData
	(*DeleteResponse)(nil),                             // 18: admin_lecture.DeleteResponse
	(*ResetParticipationRequest)(nil),                  // 19: admin_lecture.ResetParticipationRequest
	(*ResetParticipationResponseData)(nil),             // 20: admin_lecture.ResetParticipationResponseData
	(*ResetParticipationResponse)(nil),                 // 21: admin_lecture.ResetParticipationResponse
	(*GetStudentParticipationRequest)(nil),             // 22: admin_lecture.GetStudentParticipationRequest
	(*GetStudentParticipationResponseData)(nil),        // 23: admin_lecture.GetStudentParticipationResponseData
	(*GetStudentParticipationResponse)(nil),            // 24: admin_lecture.GetStudentParticipationResponse
	(*GetCalendarRequest)(nil),                         // 25: admin_lecture.GetCalendarRequest
	(*GetCalendarResponseDataLecture)(nil),             // 26: admin_lecture.GetCalendarResponseDataLecture
	(*GetCalendarResponseData)(nil),                    // 27: admin_lecture.GetCalendarResponseData
	(*GetCalendarResponse)(nil),                        // 28: admin_lecture.GetCalendarResponse
}
var file_admin_lecture_proto_depIdxs = []int32{
	3,  // 0: admin_lecture.GetListResponseData.exam_supervisors:type_name -> admin_lecture.GetListResponseDataExamSupervisor
	0,  // 1: admin_lecture.GetListResponse.meta:type_name -> admin_lecture.Meta
	1,  // 2: admin_lecture.GetListResponse.pagination:type_name -> admin_lecture.Pagination
	4,  // 3: admin_lecture.GetListResponse.data:type_name -> admin_lecture.GetListResponseData
	6,  // 4: admin_lecture.BulkCreateRequestLecturePlan.exam_supervisors:type_name -> admin_lecture.BulkCreateRequestLecturePlanExamSupervisor
	7,  // 5: admin_lecture.BulkCreateRequest.lecture_plans:type_name -> admin_lecture.BulkCreateRequestLecturePlan
	0,  // 6: admin_lecture.BulkCreateResponse.meta:type_name -> admin_lecture.Meta
	9,  // 7: admin_lecture.BulkCreateResponse.data:type_name -> admin_lecture.BulkCreateResponseData
	11, // 8: admin_lecture.UpdateRequest.participants:type_name -> admin_lecture.UpdateRequestParticipant
	12, // 9: admin_lecture.UpdateRequest.exam_supervisors:type_name -> admin_lecture.UpdateRequestExamSupervisor
	0,  // 10: admin_lecture.UpdateResponse.meta:type_name -> admin_lecture.Meta
	14, // 11: admin_lecture.UpdateResponse.data:type_name -> admin_lecture.UpdateResponseData
	0,  // 12: admin_lecture.DeleteResponse.meta:type_name -> admin_lecture.Meta
	17, // 13: admin_lecture.DeleteResponse.data:type_name -> admin_lecture.DeleteResponseData
	0,  // 14: admin_lecture.ResetParticipationResponse.meta:type_name -> admin_lecture.Meta
	20, // 15: admin_lecture.ResetParticipationResponse.data:type_name -> admin_lecture.ResetParticipationResponseData
	0,  // 16: admin_lecture.GetStudentParticipationResponse.meta:type_name -> admin_lecture.Meta
	1,  // 17: admin_lecture.GetStudentParticipationResponse.pagination:type_name -> admin_lecture.Pagination
	23, // 18: admin_lecture.GetStudentParticipationResponse.data:type_name -> admin_lecture.GetStudentParticipationResponseData
	26, // 19: admin_lecture.GetCalendarResponseData.lectures:type_name -> admin_lecture.GetCalendarResponseDataLecture
	0,  // 20: admin_lecture.GetCalendarResponse.meta:type_name -> admin_lecture.Meta
	27, // 21: admin_lecture.GetCalendarResponse.data:type_name -> admin_lecture.GetCalendarResponseData
	2,  // 22: admin_lecture.AdminLectureHandler.GetList:input_type -> admin_lecture.GetListRequest
	8,  // 23: admin_lecture.AdminLectureHandler.BulkCreate:input_type -> admin_lecture.BulkCreateRequest
	13, // 24: admin_lecture.AdminLectureHandler.Update:input_type -> admin_lecture.UpdateRequest
	16, // 25: admin_lecture.AdminLectureHandler.Delete:input_type -> admin_lecture.DeleteRequest
	19, // 26: admin_lecture.AdminLectureHandler.ResetParticipation:input_type -> admin_lecture.ResetParticipationRequest
	22, // 27: admin_lecture.AdminLectureHandler.GetStudentParticipation:input_type -> admin_lecture.GetStudentParticipationRequest
	25, // 28: admin_lecture.AdminLectureHandler.GetCalendar:input_type -> admin_lecture.GetCalendarRequest
	5,  // 29: admin_lecture.AdminLectureHandler.GetList:output_type -> admin_lecture.GetListResponse
	10, // 30: admin_lecture.AdminLectureHandler.BulkCreate:output_type -> admin_lecture.BulkCreateResponse
	15, // 31: admin_lecture.AdminLectureHandler.Update:output_type -> admin_lecture.UpdateResponse
	18, // 32: admin_lecture.AdminLectureHandler.Delete:output_type -> admin_lecture.DeleteResponse
	21, // 33: admin_lecture.AdminLectureHandler.ResetParticipation:output_type -> admin_lecture.ResetParticipationResponse
	24, // 34: admin_lecture.AdminLectureHandler.GetStudentParticipation:output_type -> admin_lecture.GetStudentParticipationResponse
	28, // 35: admin_lecture.AdminLectureHandler.GetCalendar:output_type -> admin_lecture.GetCalendarResponse
	29, // [29:36] is the sub-list for method output_type
	22, // [22:29] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_admin_lecture_proto_init() }
func file_admin_lecture_proto_init() {
	if File_admin_lecture_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_admin_lecture_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponseDataExamSupervisor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateRequestLecturePlanExamSupervisor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateRequestLecturePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequestParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequestExamSupervisor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetParticipationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetParticipationResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetParticipationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStudentParticipationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStudentParticipationResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStudentParticipationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCalendarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCalendarResponseDataLecture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCalendarResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecture_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCalendarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_lecture_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_lecture_proto_goTypes,
		DependencyIndexes: file_admin_lecture_proto_depIdxs,
		MessageInfos:      file_admin_lecture_proto_msgTypes,
	}.Build()
	File_admin_lecture_proto = out.File
	file_admin_lecture_proto_rawDesc = nil
	file_admin_lecture_proto_goTypes = nil
	file_admin_lecture_proto_depIdxs = nil
}
