// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: admin/lecture.proto

package lecture

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminLectureHandlerClient is the client API for AdminLectureHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminLectureHandlerClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	BulkCreate(ctx context.Context, in *BulkCreateRequest, opts ...grpc.CallOption) (*BulkCreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ResetParticipation(ctx context.Context, in *ResetParticipationRequest, opts ...grpc.CallOption) (*ResetParticipationResponse, error)
	GetStudentParticipation(ctx context.Context, in *GetStudentParticipationRequest, opts ...grpc.CallOption) (*GetStudentParticipationResponse, error)
	GetCalendar(ctx context.Context, in *GetCalendarRequest, opts ...grpc.CallOption) (*GetCalendarResponse, error)
}

type adminLectureHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminLectureHandlerClient(cc grpc.ClientConnInterface) AdminLectureHandlerClient {
	return &adminLectureHandlerClient{cc}
}

func (c *adminLectureHandlerClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/admin_lecture.AdminLectureHandler/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminLectureHandlerClient) BulkCreate(ctx context.Context, in *BulkCreateRequest, opts ...grpc.CallOption) (*BulkCreateResponse, error) {
	out := new(BulkCreateResponse)
	err := c.cc.Invoke(ctx, "/admin_lecture.AdminLectureHandler/BulkCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminLectureHandlerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/admin_lecture.AdminLectureHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminLectureHandlerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/admin_lecture.AdminLectureHandler/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminLectureHandlerClient) ResetParticipation(ctx context.Context, in *ResetParticipationRequest, opts ...grpc.CallOption) (*ResetParticipationResponse, error) {
	out := new(ResetParticipationResponse)
	err := c.cc.Invoke(ctx, "/admin_lecture.AdminLectureHandler/ResetParticipation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminLectureHandlerClient) GetStudentParticipation(ctx context.Context, in *GetStudentParticipationRequest, opts ...grpc.CallOption) (*GetStudentParticipationResponse, error) {
	out := new(GetStudentParticipationResponse)
	err := c.cc.Invoke(ctx, "/admin_lecture.AdminLectureHandler/GetStudentParticipation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminLectureHandlerClient) GetCalendar(ctx context.Context, in *GetCalendarRequest, opts ...grpc.CallOption) (*GetCalendarResponse, error) {
	out := new(GetCalendarResponse)
	err := c.cc.Invoke(ctx, "/admin_lecture.AdminLectureHandler/GetCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminLectureHandlerServer is the server API for AdminLectureHandler service.
// All implementations must embed UnimplementedAdminLectureHandlerServer
// for forward compatibility
type AdminLectureHandlerServer interface {
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	BulkCreate(context.Context, *BulkCreateRequest) (*BulkCreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	ResetParticipation(context.Context, *ResetParticipationRequest) (*ResetParticipationResponse, error)
	GetStudentParticipation(context.Context, *GetStudentParticipationRequest) (*GetStudentParticipationResponse, error)
	GetCalendar(context.Context, *GetCalendarRequest) (*GetCalendarResponse, error)
	mustEmbedUnimplementedAdminLectureHandlerServer()
}

// UnimplementedAdminLectureHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedAdminLectureHandlerServer struct {
}

func (UnimplementedAdminLectureHandlerServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedAdminLectureHandlerServer) BulkCreate(context.Context, *BulkCreateRequest) (*BulkCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreate not implemented")
}
func (UnimplementedAdminLectureHandlerServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAdminLectureHandlerServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdminLectureHandlerServer) ResetParticipation(context.Context, *ResetParticipationRequest) (*ResetParticipationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetParticipation not implemented")
}
func (UnimplementedAdminLectureHandlerServer) GetStudentParticipation(context.Context, *GetStudentParticipationRequest) (*GetStudentParticipationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentParticipation not implemented")
}
func (UnimplementedAdminLectureHandlerServer) GetCalendar(context.Context, *GetCalendarRequest) (*GetCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCalendar not implemented")
}
func (UnimplementedAdminLectureHandlerServer) mustEmbedUnimplementedAdminLectureHandlerServer() {}

// UnsafeAdminLectureHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminLectureHandlerServer will
// result in compilation errors.
type UnsafeAdminLectureHandlerServer interface {
	mustEmbedUnimplementedAdminLectureHandlerServer()
}

func RegisterAdminLectureHandlerServer(s grpc.ServiceRegistrar, srv AdminLectureHandlerServer) {
	s.RegisterService(&AdminLectureHandler_ServiceDesc, srv)
}

func _AdminLectureHandler_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLectureHandlerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_lecture.AdminLectureHandler/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLectureHandlerServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminLectureHandler_BulkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLectureHandlerServer).BulkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_lecture.AdminLectureHandler/BulkCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLectureHandlerServer).BulkCreate(ctx, req.(*BulkCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminLectureHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLectureHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_lecture.AdminLectureHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLectureHandlerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminLectureHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLectureHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_lecture.AdminLectureHandler/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLectureHandlerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminLectureHandler_ResetParticipation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetParticipationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLectureHandlerServer).ResetParticipation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_lecture.AdminLectureHandler/ResetParticipation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLectureHandlerServer).ResetParticipation(ctx, req.(*ResetParticipationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminLectureHandler_GetStudentParticipation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentParticipationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLectureHandlerServer).GetStudentParticipation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_lecture.AdminLectureHandler/GetStudentParticipation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLectureHandlerServer).GetStudentParticipation(ctx, req.(*GetStudentParticipationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminLectureHandler_GetCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLectureHandlerServer).GetCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_lecture.AdminLectureHandler/GetCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLectureHandlerServer).GetCalendar(ctx, req.(*GetCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminLectureHandler_ServiceDesc is the grpc.ServiceDesc for AdminLectureHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminLectureHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_lecture.AdminLectureHandler",
	HandlerType: (*AdminLectureHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _AdminLectureHandler_GetList_Handler,
		},
		{
			MethodName: "BulkCreate",
			Handler:    _AdminLectureHandler_BulkCreate_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AdminLectureHandler_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdminLectureHandler_Delete_Handler,
		},
		{
			MethodName: "ResetParticipation",
			Handler:    _AdminLectureHandler_ResetParticipation_Handler,
		},
		{
			MethodName: "GetStudentParticipation",
			Handler:    _AdminLectureHandler_GetStudentParticipation_Handler,
		},
		{
			MethodName: "GetCalendar",
			Handler:    _AdminLectureHandler_GetCalendar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/lecture.proto",
}
