// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: admin/class_exam.proto

package class_exam

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClassExamHandlerClient is the client API for AdminClassExamHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClassExamHandlerClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetSubmission(ctx context.Context, in *GetSubmissionRequest, opts ...grpc.CallOption) (*GetSubmissionResponse, error)
}

type adminClassExamHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClassExamHandlerClient(cc grpc.ClientConnInterface) AdminClassExamHandlerClient {
	return &adminClassExamHandlerClient{cc}
}

func (c *adminClassExamHandlerClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/admin_class_exam.AdminClassExamHandler/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClassExamHandlerClient) GetSubmission(ctx context.Context, in *GetSubmissionRequest, opts ...grpc.CallOption) (*GetSubmissionResponse, error) {
	out := new(GetSubmissionResponse)
	err := c.cc.Invoke(ctx, "/admin_class_exam.AdminClassExamHandler/GetSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminClassExamHandlerServer is the server API for AdminClassExamHandler service.
// All implementations must embed UnimplementedAdminClassExamHandlerServer
// for forward compatibility
type AdminClassExamHandlerServer interface {
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	GetSubmission(context.Context, *GetSubmissionRequest) (*GetSubmissionResponse, error)
	mustEmbedUnimplementedAdminClassExamHandlerServer()
}

// UnimplementedAdminClassExamHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedAdminClassExamHandlerServer struct {
}

func (UnimplementedAdminClassExamHandlerServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedAdminClassExamHandlerServer) GetSubmission(context.Context, *GetSubmissionRequest) (*GetSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmission not implemented")
}
func (UnimplementedAdminClassExamHandlerServer) mustEmbedUnimplementedAdminClassExamHandlerServer() {}

// UnsafeAdminClassExamHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminClassExamHandlerServer will
// result in compilation errors.
type UnsafeAdminClassExamHandlerServer interface {
	mustEmbedUnimplementedAdminClassExamHandlerServer()
}

func RegisterAdminClassExamHandlerServer(s grpc.ServiceRegistrar, srv AdminClassExamHandlerServer) {
	s.RegisterService(&AdminClassExamHandler_ServiceDesc, srv)
}

func _AdminClassExamHandler_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminClassExamHandlerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_class_exam.AdminClassExamHandler/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminClassExamHandlerServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminClassExamHandler_GetSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminClassExamHandlerServer).GetSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_class_exam.AdminClassExamHandler/GetSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminClassExamHandlerServer).GetSubmission(ctx, req.(*GetSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminClassExamHandler_ServiceDesc is the grpc.ServiceDesc for AdminClassExamHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminClassExamHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_class_exam.AdminClassExamHandler",
	HandlerType: (*AdminClassExamHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _AdminClassExamHandler_GetList_Handler,
		},
		{
			MethodName: "GetSubmission",
			Handler:    _AdminClassExamHandler_GetSubmission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/class_exam.proto",
}
