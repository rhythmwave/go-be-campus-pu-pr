// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: admin/student_class.proto

package student_class

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminStudentClassHandlerClient is the client API for AdminStudentClassHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminStudentClassHandlerClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	TransferStudentClass(ctx context.Context, in *TransferStudentClassRequest, opts ...grpc.CallOption) (*TransferStudentClassResponse, error)
	ReshuffleStudentClass(ctx context.Context, in *ReshuffleStudentClassRequest, opts ...grpc.CallOption) (*ReshuffleStudentClassResponse, error)
	MergeStudentClass(ctx context.Context, in *MergeStudentClassRequest, opts ...grpc.CallOption) (*MergeStudentClassResponse, error)
	BulkGradeStudentClass(ctx context.Context, in *BulkGradeStudentClassRequest, opts ...grpc.CallOption) (*BulkGradeStudentClassResponse, error)
}

type adminStudentClassHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminStudentClassHandlerClient(cc grpc.ClientConnInterface) AdminStudentClassHandlerClient {
	return &adminStudentClassHandlerClient{cc}
}

func (c *adminStudentClassHandlerClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/admin_student_class.AdminStudentClassHandler/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminStudentClassHandlerClient) TransferStudentClass(ctx context.Context, in *TransferStudentClassRequest, opts ...grpc.CallOption) (*TransferStudentClassResponse, error) {
	out := new(TransferStudentClassResponse)
	err := c.cc.Invoke(ctx, "/admin_student_class.AdminStudentClassHandler/TransferStudentClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminStudentClassHandlerClient) ReshuffleStudentClass(ctx context.Context, in *ReshuffleStudentClassRequest, opts ...grpc.CallOption) (*ReshuffleStudentClassResponse, error) {
	out := new(ReshuffleStudentClassResponse)
	err := c.cc.Invoke(ctx, "/admin_student_class.AdminStudentClassHandler/ReshuffleStudentClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminStudentClassHandlerClient) MergeStudentClass(ctx context.Context, in *MergeStudentClassRequest, opts ...grpc.CallOption) (*MergeStudentClassResponse, error) {
	out := new(MergeStudentClassResponse)
	err := c.cc.Invoke(ctx, "/admin_student_class.AdminStudentClassHandler/MergeStudentClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminStudentClassHandlerClient) BulkGradeStudentClass(ctx context.Context, in *BulkGradeStudentClassRequest, opts ...grpc.CallOption) (*BulkGradeStudentClassResponse, error) {
	out := new(BulkGradeStudentClassResponse)
	err := c.cc.Invoke(ctx, "/admin_student_class.AdminStudentClassHandler/BulkGradeStudentClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminStudentClassHandlerServer is the server API for AdminStudentClassHandler service.
// All implementations must embed UnimplementedAdminStudentClassHandlerServer
// for forward compatibility
type AdminStudentClassHandlerServer interface {
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	TransferStudentClass(context.Context, *TransferStudentClassRequest) (*TransferStudentClassResponse, error)
	ReshuffleStudentClass(context.Context, *ReshuffleStudentClassRequest) (*ReshuffleStudentClassResponse, error)
	MergeStudentClass(context.Context, *MergeStudentClassRequest) (*MergeStudentClassResponse, error)
	BulkGradeStudentClass(context.Context, *BulkGradeStudentClassRequest) (*BulkGradeStudentClassResponse, error)
	mustEmbedUnimplementedAdminStudentClassHandlerServer()
}

// UnimplementedAdminStudentClassHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedAdminStudentClassHandlerServer struct {
}

func (UnimplementedAdminStudentClassHandlerServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedAdminStudentClassHandlerServer) TransferStudentClass(context.Context, *TransferStudentClassRequest) (*TransferStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferStudentClass not implemented")
}
func (UnimplementedAdminStudentClassHandlerServer) ReshuffleStudentClass(context.Context, *ReshuffleStudentClassRequest) (*ReshuffleStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReshuffleStudentClass not implemented")
}
func (UnimplementedAdminStudentClassHandlerServer) MergeStudentClass(context.Context, *MergeStudentClassRequest) (*MergeStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeStudentClass not implemented")
}
func (UnimplementedAdminStudentClassHandlerServer) BulkGradeStudentClass(context.Context, *BulkGradeStudentClassRequest) (*BulkGradeStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkGradeStudentClass not implemented")
}
func (UnimplementedAdminStudentClassHandlerServer) mustEmbedUnimplementedAdminStudentClassHandlerServer() {
}

// UnsafeAdminStudentClassHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminStudentClassHandlerServer will
// result in compilation errors.
type UnsafeAdminStudentClassHandlerServer interface {
	mustEmbedUnimplementedAdminStudentClassHandlerServer()
}

func RegisterAdminStudentClassHandlerServer(s grpc.ServiceRegistrar, srv AdminStudentClassHandlerServer) {
	s.RegisterService(&AdminStudentClassHandler_ServiceDesc, srv)
}

func _AdminStudentClassHandler_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminStudentClassHandlerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_student_class.AdminStudentClassHandler/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminStudentClassHandlerServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminStudentClassHandler_TransferStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminStudentClassHandlerServer).TransferStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_student_class.AdminStudentClassHandler/TransferStudentClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminStudentClassHandlerServer).TransferStudentClass(ctx, req.(*TransferStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminStudentClassHandler_ReshuffleStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReshuffleStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminStudentClassHandlerServer).ReshuffleStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_student_class.AdminStudentClassHandler/ReshuffleStudentClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminStudentClassHandlerServer).ReshuffleStudentClass(ctx, req.(*ReshuffleStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminStudentClassHandler_MergeStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminStudentClassHandlerServer).MergeStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_student_class.AdminStudentClassHandler/MergeStudentClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminStudentClassHandlerServer).MergeStudentClass(ctx, req.(*MergeStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminStudentClassHandler_BulkGradeStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkGradeStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminStudentClassHandlerServer).BulkGradeStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_student_class.AdminStudentClassHandler/BulkGradeStudentClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminStudentClassHandlerServer).BulkGradeStudentClass(ctx, req.(*BulkGradeStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminStudentClassHandler_ServiceDesc is the grpc.ServiceDesc for AdminStudentClassHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminStudentClassHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_student_class.AdminStudentClassHandler",
	HandlerType: (*AdminStudentClassHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _AdminStudentClassHandler_GetList_Handler,
		},
		{
			MethodName: "TransferStudentClass",
			Handler:    _AdminStudentClassHandler_TransferStudentClass_Handler,
		},
		{
			MethodName: "ReshuffleStudentClass",
			Handler:    _AdminStudentClassHandler_ReshuffleStudentClass_Handler,
		},
		{
			MethodName: "MergeStudentClass",
			Handler:    _AdminStudentClassHandler_MergeStudentClass_Handler,
		},
		{
			MethodName: "BulkGradeStudentClass",
			Handler:    _AdminStudentClassHandler_BulkGradeStudentClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/student_class.proto",
}
