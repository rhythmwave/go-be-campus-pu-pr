// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: admin/subject.proto

package subject

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminSubjectHandlerClient is the client API for AdminSubjectHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminSubjectHandlerClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	SetPrerequisiteSubject(ctx context.Context, in *SetPrerequisiteSubjectRequest, opts ...grpc.CallOption) (*SetPrerequisiteSubjectResponse, error)
	SetEquivalentSubject(ctx context.Context, in *SetEquivalentSubjectRequest, opts ...grpc.CallOption) (*SetEquivalentSubjectResponse, error)
	DeleteEquivalentSubject(ctx context.Context, in *DeleteEquivalentSubjectRequest, opts ...grpc.CallOption) (*DeleteEquivalentSubjectResponse, error)
}

type adminSubjectHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminSubjectHandlerClient(cc grpc.ClientConnInterface) AdminSubjectHandlerClient {
	return &adminSubjectHandlerClient{cc}
}

func (c *adminSubjectHandlerClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/admin_subject.AdminSubjectHandler/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminSubjectHandlerClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error) {
	out := new(GetDetailResponse)
	err := c.cc.Invoke(ctx, "/admin_subject.AdminSubjectHandler/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminSubjectHandlerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/admin_subject.AdminSubjectHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminSubjectHandlerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/admin_subject.AdminSubjectHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminSubjectHandlerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/admin_subject.AdminSubjectHandler/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminSubjectHandlerClient) SetPrerequisiteSubject(ctx context.Context, in *SetPrerequisiteSubjectRequest, opts ...grpc.CallOption) (*SetPrerequisiteSubjectResponse, error) {
	out := new(SetPrerequisiteSubjectResponse)
	err := c.cc.Invoke(ctx, "/admin_subject.AdminSubjectHandler/SetPrerequisiteSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminSubjectHandlerClient) SetEquivalentSubject(ctx context.Context, in *SetEquivalentSubjectRequest, opts ...grpc.CallOption) (*SetEquivalentSubjectResponse, error) {
	out := new(SetEquivalentSubjectResponse)
	err := c.cc.Invoke(ctx, "/admin_subject.AdminSubjectHandler/SetEquivalentSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminSubjectHandlerClient) DeleteEquivalentSubject(ctx context.Context, in *DeleteEquivalentSubjectRequest, opts ...grpc.CallOption) (*DeleteEquivalentSubjectResponse, error) {
	out := new(DeleteEquivalentSubjectResponse)
	err := c.cc.Invoke(ctx, "/admin_subject.AdminSubjectHandler/DeleteEquivalentSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminSubjectHandlerServer is the server API for AdminSubjectHandler service.
// All implementations must embed UnimplementedAdminSubjectHandlerServer
// for forward compatibility
type AdminSubjectHandlerServer interface {
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	SetPrerequisiteSubject(context.Context, *SetPrerequisiteSubjectRequest) (*SetPrerequisiteSubjectResponse, error)
	SetEquivalentSubject(context.Context, *SetEquivalentSubjectRequest) (*SetEquivalentSubjectResponse, error)
	DeleteEquivalentSubject(context.Context, *DeleteEquivalentSubjectRequest) (*DeleteEquivalentSubjectResponse, error)
	mustEmbedUnimplementedAdminSubjectHandlerServer()
}

// UnimplementedAdminSubjectHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedAdminSubjectHandlerServer struct {
}

func (UnimplementedAdminSubjectHandlerServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedAdminSubjectHandlerServer) GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedAdminSubjectHandlerServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAdminSubjectHandlerServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAdminSubjectHandlerServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdminSubjectHandlerServer) SetPrerequisiteSubject(context.Context, *SetPrerequisiteSubjectRequest) (*SetPrerequisiteSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPrerequisiteSubject not implemented")
}
func (UnimplementedAdminSubjectHandlerServer) SetEquivalentSubject(context.Context, *SetEquivalentSubjectRequest) (*SetEquivalentSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEquivalentSubject not implemented")
}
func (UnimplementedAdminSubjectHandlerServer) DeleteEquivalentSubject(context.Context, *DeleteEquivalentSubjectRequest) (*DeleteEquivalentSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEquivalentSubject not implemented")
}
func (UnimplementedAdminSubjectHandlerServer) mustEmbedUnimplementedAdminSubjectHandlerServer() {}

// UnsafeAdminSubjectHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminSubjectHandlerServer will
// result in compilation errors.
type UnsafeAdminSubjectHandlerServer interface {
	mustEmbedUnimplementedAdminSubjectHandlerServer()
}

func RegisterAdminSubjectHandlerServer(s grpc.ServiceRegistrar, srv AdminSubjectHandlerServer) {
	s.RegisterService(&AdminSubjectHandler_ServiceDesc, srv)
}

func _AdminSubjectHandler_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminSubjectHandlerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_subject.AdminSubjectHandler/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminSubjectHandlerServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminSubjectHandler_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminSubjectHandlerServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_subject.AdminSubjectHandler/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminSubjectHandlerServer).GetDetail(ctx, req.(*GetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminSubjectHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminSubjectHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_subject.AdminSubjectHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminSubjectHandlerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminSubjectHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminSubjectHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_subject.AdminSubjectHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminSubjectHandlerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminSubjectHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminSubjectHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_subject.AdminSubjectHandler/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminSubjectHandlerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminSubjectHandler_SetPrerequisiteSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPrerequisiteSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminSubjectHandlerServer).SetPrerequisiteSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_subject.AdminSubjectHandler/SetPrerequisiteSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminSubjectHandlerServer).SetPrerequisiteSubject(ctx, req.(*SetPrerequisiteSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminSubjectHandler_SetEquivalentSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEquivalentSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminSubjectHandlerServer).SetEquivalentSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_subject.AdminSubjectHandler/SetEquivalentSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminSubjectHandlerServer).SetEquivalentSubject(ctx, req.(*SetEquivalentSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminSubjectHandler_DeleteEquivalentSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEquivalentSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminSubjectHandlerServer).DeleteEquivalentSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_subject.AdminSubjectHandler/DeleteEquivalentSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminSubjectHandlerServer).DeleteEquivalentSubject(ctx, req.(*DeleteEquivalentSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminSubjectHandler_ServiceDesc is the grpc.ServiceDesc for AdminSubjectHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminSubjectHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_subject.AdminSubjectHandler",
	HandlerType: (*AdminSubjectHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _AdminSubjectHandler_GetList_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _AdminSubjectHandler_GetDetail_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AdminSubjectHandler_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AdminSubjectHandler_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdminSubjectHandler_Delete_Handler,
		},
		{
			MethodName: "SetPrerequisiteSubject",
			Handler:    _AdminSubjectHandler_SetPrerequisiteSubject_Handler,
		},
		{
			MethodName: "SetEquivalentSubject",
			Handler:    _AdminSubjectHandler_SetEquivalentSubject_Handler,
		},
		{
			MethodName: "DeleteEquivalentSubject",
			Handler:    _AdminSubjectHandler_DeleteEquivalentSubject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/subject.proto",
}
