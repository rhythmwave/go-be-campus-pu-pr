// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: admin/subject.proto

package subject

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Status  uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	Code    string `protobuf:"bytes,3,opt,name=code,proto3" json:"code"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{0}
}

func (x *Meta) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Meta) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Meta) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit        uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Prev         uint32 `protobuf:"varint,3,opt,name=prev,proto3" json:"prev"`
	Next         uint32 `protobuf:"varint,4,opt,name=next,proto3" json:"next"`
	TotalPages   uint32 `protobuf:"varint,5,opt,name=total_pages,json=totalPages,proto3" json:"total_pages"`
	TotalRecords uint32 `protobuf:"varint,6,opt,name=total_records,json=totalRecords,proto3" json:"total_records"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{1}
}

func (x *Pagination) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Pagination) GetPrev() uint32 {
	if x != nil {
		return x.Prev
	}
	return 0
}

func (x *Pagination) GetNext() uint32 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *Pagination) GetTotalPages() uint32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *Pagination) GetTotalRecords() uint32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page                     uint32   `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                    uint32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Search                   string   `protobuf:"bytes,3,opt,name=search,proto3" json:"search"`
	CurriculumId             []string `protobuf:"bytes,4,rep,name=curriculum_id,json=curriculumId,proto3" json:"curriculum_id"`
	PrerequisiteOfSubjectId  string   `protobuf:"bytes,5,opt,name=prerequisite_of_subject_id,json=prerequisiteOfSubjectId,proto3" json:"prerequisite_of_subject_id"`
	EquivalentToCurriculumId string   `protobuf:"bytes,6,opt,name=equivalent_to_curriculum_id,json=equivalentToCurriculumId,proto3" json:"equivalent_to_curriculum_id"`
	SemesterPackage          uint32   `protobuf:"varint,7,opt,name=semester_package,json=semesterPackage,proto3" json:"semester_package"`
	ClassSemesterId          string   `protobuf:"bytes,8,opt,name=class_semester_id,json=classSemesterId,proto3" json:"class_semester_id"`
	IsThesis                 string   `protobuf:"bytes,9,opt,name=is_thesis,json=isThesis,proto3" json:"is_thesis"`
	IsMbkm                   bool     `protobuf:"varint,10,opt,name=is_mbkm,json=isMbkm,proto3" json:"is_mbkm"`
	StudyProgramId           string   `protobuf:"bytes,11,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
}

func (x *GetListRequest) Reset() {
	*x = GetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRequest) ProtoMessage() {}

func (x *GetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRequest.ProtoReflect.Descriptor instead.
func (*GetListRequest) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{2}
}

func (x *GetListRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetListRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetListRequest) GetCurriculumId() []string {
	if x != nil {
		return x.CurriculumId
	}
	return nil
}

func (x *GetListRequest) GetPrerequisiteOfSubjectId() string {
	if x != nil {
		return x.PrerequisiteOfSubjectId
	}
	return ""
}

func (x *GetListRequest) GetEquivalentToCurriculumId() string {
	if x != nil {
		return x.EquivalentToCurriculumId
	}
	return ""
}

func (x *GetListRequest) GetSemesterPackage() uint32 {
	if x != nil {
		return x.SemesterPackage
	}
	return 0
}

func (x *GetListRequest) GetClassSemesterId() string {
	if x != nil {
		return x.ClassSemesterId
	}
	return ""
}

func (x *GetListRequest) GetIsThesis() string {
	if x != nil {
		return x.IsThesis
	}
	return ""
}

func (x *GetListRequest) GetIsMbkm() bool {
	if x != nil {
		return x.IsMbkm
	}
	return false
}

func (x *GetListRequest) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

type GetListResponseDataClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
}

func (x *GetListResponseDataClass) Reset() {
	*x = GetListResponseDataClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponseDataClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponseDataClass) ProtoMessage() {}

func (x *GetListResponseDataClass) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponseDataClass.ProtoReflect.Descriptor instead.
func (*GetListResponseDataClass) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{3}
}

func (x *GetListResponseDataClass) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetListResponseDataClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	StudyProgramId                string                      `protobuf:"bytes,2,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	StudyProgramName              string                      `protobuf:"bytes,3,opt,name=study_program_name,json=studyProgramName,proto3" json:"study_program_name"`
	CurriculumId                  string                      `protobuf:"bytes,4,opt,name=curriculum_id,json=curriculumId,proto3" json:"curriculum_id"`
	CurriculumName                string                      `protobuf:"bytes,5,opt,name=curriculum_name,json=curriculumName,proto3" json:"curriculum_name"`
	Code                          string                      `protobuf:"bytes,6,opt,name=code,proto3" json:"code"`
	Name                          string                      `protobuf:"bytes,7,opt,name=name,proto3" json:"name"`
	IsMandatory                   bool                        `protobuf:"varint,8,opt,name=is_mandatory,json=isMandatory,proto3" json:"is_mandatory"`
	SemesterPackage               uint32                      `protobuf:"varint,9,opt,name=semester_package,json=semesterPackage,proto3" json:"semester_package"`
	TheoryCredit                  uint32                      `protobuf:"varint,10,opt,name=theory_credit,json=theoryCredit,proto3" json:"theory_credit"`
	PracticumCredit               uint32                      `protobuf:"varint,11,opt,name=practicum_credit,json=practicumCredit,proto3" json:"practicum_credit"`
	FieldPracticumCredit          uint32                      `protobuf:"varint,12,opt,name=field_practicum_credit,json=fieldPracticumCredit,proto3" json:"field_practicum_credit"`
	SubjectPrerequisiteId         string                      `protobuf:"bytes,13,opt,name=subject_prerequisite_id,json=subjectPrerequisiteId,proto3" json:"subject_prerequisite_id"`
	PrerequisiteType              string                      `protobuf:"bytes,14,opt,name=prerequisite_type,json=prerequisiteType,proto3" json:"prerequisite_type"`
	PrerequisiteMinimumGradePoint float64                     `protobuf:"fixed64,15,opt,name=prerequisite_minimum_grade_point,json=prerequisiteMinimumGradePoint,proto3" json:"prerequisite_minimum_grade_point"`
	EquivalentStudyProgramId      string                      `protobuf:"bytes,16,opt,name=equivalent_study_program_id,json=equivalentStudyProgramId,proto3" json:"equivalent_study_program_id"`
	EquivalentStudyProgramName    string                      `protobuf:"bytes,17,opt,name=equivalent_study_program_name,json=equivalentStudyProgramName,proto3" json:"equivalent_study_program_name"`
	EquivalentCurriculumId        string                      `protobuf:"bytes,18,opt,name=equivalent_curriculum_id,json=equivalentCurriculumId,proto3" json:"equivalent_curriculum_id"`
	EquivalentCurriculumName      string                      `protobuf:"bytes,19,opt,name=equivalent_curriculum_name,json=equivalentCurriculumName,proto3" json:"equivalent_curriculum_name"`
	EquivalentSubjectCode         string                      `protobuf:"bytes,20,opt,name=equivalent_subject_code,json=equivalentSubjectCode,proto3" json:"equivalent_subject_code"`
	EquivalentSubjectName         string                      `protobuf:"bytes,21,opt,name=equivalent_subject_name,json=equivalentSubjectName,proto3" json:"equivalent_subject_name"`
	EquivalentSubjectId           string                      `protobuf:"bytes,22,opt,name=equivalent_subject_id,json=equivalentSubjectId,proto3" json:"equivalent_subject_id"`
	SubjectCategoryId             string                      `protobuf:"bytes,23,opt,name=subject_category_id,json=subjectCategoryId,proto3" json:"subject_category_id"`
	SubjectCategoryName           string                      `protobuf:"bytes,24,opt,name=subject_category_name,json=subjectCategoryName,proto3" json:"subject_category_name"`
	Classes                       []*GetListResponseDataClass `protobuf:"bytes,25,rep,name=classes,proto3" json:"classes"`
	IsThesis                      bool                        `protobuf:"varint,26,opt,name=is_thesis,json=isThesis,proto3" json:"is_thesis"`
	IsMbkm                        bool                        `protobuf:"varint,27,opt,name=is_mbkm,json=isMbkm,proto3" json:"is_mbkm"`
	TotalLessonPlan               uint32                      `protobuf:"varint,28,opt,name=total_lesson_plan,json=totalLessonPlan,proto3" json:"total_lesson_plan"`
}

func (x *GetListResponseData) Reset() {
	*x = GetListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponseData) ProtoMessage() {}

func (x *GetListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponseData.ProtoReflect.Descriptor instead.
func (*GetListResponseData) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{4}
}

func (x *GetListResponseData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetListResponseData) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *GetListResponseData) GetStudyProgramName() string {
	if x != nil {
		return x.StudyProgramName
	}
	return ""
}

func (x *GetListResponseData) GetCurriculumId() string {
	if x != nil {
		return x.CurriculumId
	}
	return ""
}

func (x *GetListResponseData) GetCurriculumName() string {
	if x != nil {
		return x.CurriculumName
	}
	return ""
}

func (x *GetListResponseData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetListResponseData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetListResponseData) GetIsMandatory() bool {
	if x != nil {
		return x.IsMandatory
	}
	return false
}

func (x *GetListResponseData) GetSemesterPackage() uint32 {
	if x != nil {
		return x.SemesterPackage
	}
	return 0
}

func (x *GetListResponseData) GetTheoryCredit() uint32 {
	if x != nil {
		return x.TheoryCredit
	}
	return 0
}

func (x *GetListResponseData) GetPracticumCredit() uint32 {
	if x != nil {
		return x.PracticumCredit
	}
	return 0
}

func (x *GetListResponseData) GetFieldPracticumCredit() uint32 {
	if x != nil {
		return x.FieldPracticumCredit
	}
	return 0
}

func (x *GetListResponseData) GetSubjectPrerequisiteId() string {
	if x != nil {
		return x.SubjectPrerequisiteId
	}
	return ""
}

func (x *GetListResponseData) GetPrerequisiteType() string {
	if x != nil {
		return x.PrerequisiteType
	}
	return ""
}

func (x *GetListResponseData) GetPrerequisiteMinimumGradePoint() float64 {
	if x != nil {
		return x.PrerequisiteMinimumGradePoint
	}
	return 0
}

func (x *GetListResponseData) GetEquivalentStudyProgramId() string {
	if x != nil {
		return x.EquivalentStudyProgramId
	}
	return ""
}

func (x *GetListResponseData) GetEquivalentStudyProgramName() string {
	if x != nil {
		return x.EquivalentStudyProgramName
	}
	return ""
}

func (x *GetListResponseData) GetEquivalentCurriculumId() string {
	if x != nil {
		return x.EquivalentCurriculumId
	}
	return ""
}

func (x *GetListResponseData) GetEquivalentCurriculumName() string {
	if x != nil {
		return x.EquivalentCurriculumName
	}
	return ""
}

func (x *GetListResponseData) GetEquivalentSubjectCode() string {
	if x != nil {
		return x.EquivalentSubjectCode
	}
	return ""
}

func (x *GetListResponseData) GetEquivalentSubjectName() string {
	if x != nil {
		return x.EquivalentSubjectName
	}
	return ""
}

func (x *GetListResponseData) GetEquivalentSubjectId() string {
	if x != nil {
		return x.EquivalentSubjectId
	}
	return ""
}

func (x *GetListResponseData) GetSubjectCategoryId() string {
	if x != nil {
		return x.SubjectCategoryId
	}
	return ""
}

func (x *GetListResponseData) GetSubjectCategoryName() string {
	if x != nil {
		return x.SubjectCategoryName
	}
	return ""
}

func (x *GetListResponseData) GetClasses() []*GetListResponseDataClass {
	if x != nil {
		return x.Classes
	}
	return nil
}

func (x *GetListResponseData) GetIsThesis() bool {
	if x != nil {
		return x.IsThesis
	}
	return false
}

func (x *GetListResponseData) GetIsMbkm() bool {
	if x != nil {
		return x.IsMbkm
	}
	return false
}

func (x *GetListResponseData) GetTotalLessonPlan() uint32 {
	if x != nil {
		return x.TotalLessonPlan
	}
	return 0
}

type GetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta       *Meta                  `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Pagination *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	Data       []*GetListResponseData `protobuf:"bytes,3,rep,name=data,proto3" json:"data"`
}

func (x *GetListResponse) Reset() {
	*x = GetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponse) ProtoMessage() {}

func (x *GetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponse.ProtoReflect.Descriptor instead.
func (*GetListResponse) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{5}
}

func (x *GetListResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListResponse) GetData() []*GetListResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *GetDetailRequest) Reset() {
	*x = GetDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailRequest) ProtoMessage() {}

func (x *GetDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailRequest.ProtoReflect.Descriptor instead.
func (*GetDetailRequest) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{6}
}

func (x *GetDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDetailResponseDataPrerequisiteSubject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Code              string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code"`
	Name              string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	PrerequisiteType  string  `protobuf:"bytes,4,opt,name=prerequisite_type,json=prerequisiteType,proto3" json:"prerequisite_type"`
	MinimumGradePoint float64 `protobuf:"fixed64,5,opt,name=minimum_grade_point,json=minimumGradePoint,proto3" json:"minimum_grade_point"`
}

func (x *GetDetailResponseDataPrerequisiteSubject) Reset() {
	*x = GetDetailResponseDataPrerequisiteSubject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailResponseDataPrerequisiteSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailResponseDataPrerequisiteSubject) ProtoMessage() {}

func (x *GetDetailResponseDataPrerequisiteSubject) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailResponseDataPrerequisiteSubject.ProtoReflect.Descriptor instead.
func (*GetDetailResponseDataPrerequisiteSubject) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{7}
}

func (x *GetDetailResponseDataPrerequisiteSubject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDetailResponseDataPrerequisiteSubject) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetDetailResponseDataPrerequisiteSubject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDetailResponseDataPrerequisiteSubject) GetPrerequisiteType() string {
	if x != nil {
		return x.PrerequisiteType
	}
	return ""
}

func (x *GetDetailResponseDataPrerequisiteSubject) GetMinimumGradePoint() float64 {
	if x != nil {
		return x.MinimumGradePoint
	}
	return 0
}

type GetDetailResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           string                                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	StudyProgramId               string                                      `protobuf:"bytes,2,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	StudyProgramName             string                                      `protobuf:"bytes,3,opt,name=study_program_name,json=studyProgramName,proto3" json:"study_program_name"`
	CurriculumId                 string                                      `protobuf:"bytes,4,opt,name=curriculum_id,json=curriculumId,proto3" json:"curriculum_id"`
	CurriculumName               string                                      `protobuf:"bytes,5,opt,name=curriculum_name,json=curriculumName,proto3" json:"curriculum_name"`
	Code                         string                                      `protobuf:"bytes,6,opt,name=code,proto3" json:"code"`
	Name                         string                                      `protobuf:"bytes,7,opt,name=name,proto3" json:"name"`
	ShortName                    string                                      `protobuf:"bytes,8,opt,name=short_name,json=shortName,proto3" json:"short_name"`
	EnglishName                  string                                      `protobuf:"bytes,9,opt,name=english_name,json=englishName,proto3" json:"english_name"`
	EnglishShortName             string                                      `protobuf:"bytes,10,opt,name=english_short_name,json=englishShortName,proto3" json:"english_short_name"`
	IsMandatory                  bool                                        `protobuf:"varint,11,opt,name=is_mandatory,json=isMandatory,proto3" json:"is_mandatory"`
	Trait                        string                                      `protobuf:"bytes,12,opt,name=trait,proto3" json:"trait"`
	Type                         string                                      `protobuf:"bytes,13,opt,name=type,proto3" json:"type"`
	SubjectCategoryId            string                                      `protobuf:"bytes,14,opt,name=subject_category_id,json=subjectCategoryId,proto3" json:"subject_category_id"`
	SubjectCategoryName          string                                      `protobuf:"bytes,15,opt,name=subject_category_name,json=subjectCategoryName,proto3" json:"subject_category_name"`
	CurriculumType               string                                      `protobuf:"bytes,16,opt,name=curriculum_type,json=curriculumType,proto3" json:"curriculum_type"`
	TheoryCredit                 uint32                                      `protobuf:"varint,17,opt,name=theory_credit,json=theoryCredit,proto3" json:"theory_credit"`
	PracticumCredit              uint32                                      `protobuf:"varint,18,opt,name=practicum_credit,json=practicumCredit,proto3" json:"practicum_credit"`
	FieldPracticumCredit         uint32                                      `protobuf:"varint,19,opt,name=field_practicum_credit,json=fieldPracticumCredit,proto3" json:"field_practicum_credit"`
	SemesterPackage              uint32                                      `protobuf:"varint,20,opt,name=semester_package,json=semesterPackage,proto3" json:"semester_package"`
	RepeatCourseLimit            uint32                                      `protobuf:"varint,21,opt,name=repeat_course_limit,json=repeatCourseLimit,proto3" json:"repeat_course_limit"`
	IsActive                     bool                                        `protobuf:"varint,22,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	HasLectureUnit               bool                                        `protobuf:"varint,23,opt,name=has_lecture_unit,json=hasLectureUnit,proto3" json:"has_lecture_unit"`
	HasTeachingMaterial          bool                                        `protobuf:"varint,24,opt,name=has_teaching_material,json=hasTeachingMaterial,proto3" json:"has_teaching_material"`
	HasLectureSummary            bool                                        `protobuf:"varint,25,opt,name=has_lecture_summary,json=hasLectureSummary,proto3" json:"has_lecture_summary"`
	SupportingLecturerId         string                                      `protobuf:"bytes,26,opt,name=supporting_lecturer_id,json=supportingLecturerId,proto3" json:"supporting_lecturer_id"`
	SupportingLecturerName       string                                      `protobuf:"bytes,27,opt,name=supporting_lecturer_name,json=supportingLecturerName,proto3" json:"supporting_lecturer_name"`
	StartDate                    string                                      `protobuf:"bytes,28,opt,name=start_date,json=startDate,proto3" json:"start_date"`
	EndDate                      string                                      `protobuf:"bytes,29,opt,name=end_date,json=endDate,proto3" json:"end_date"`
	MinimumPassingGradePoint     float64                                     `protobuf:"fixed64,30,opt,name=minimum_passing_grade_point,json=minimumPassingGradePoint,proto3" json:"minimum_passing_grade_point"`
	MinimumMandatoryCreditTaken  uint32                                      `protobuf:"varint,31,opt,name=minimum_mandatory_credit_taken,json=minimumMandatoryCreditTaken,proto3" json:"minimum_mandatory_credit_taken"`
	MinimumOptionalCreditTaken   uint32                                      `protobuf:"varint,32,opt,name=minimum_optional_credit_taken,json=minimumOptionalCreditTaken,proto3" json:"minimum_optional_credit_taken"`
	MinimumTotalCreditTaken      uint32                                      `protobuf:"varint,33,opt,name=minimum_total_credit_taken,json=minimumTotalCreditTaken,proto3" json:"minimum_total_credit_taken"`
	MinimumMandatoryCreditPassed uint32                                      `protobuf:"varint,34,opt,name=minimum_mandatory_credit_passed,json=minimumMandatoryCreditPassed,proto3" json:"minimum_mandatory_credit_passed"`
	MinimumOptionalCreditPassed  uint32                                      `protobuf:"varint,35,opt,name=minimum_optional_credit_passed,json=minimumOptionalCreditPassed,proto3" json:"minimum_optional_credit_passed"`
	MinimumTotalCreditPassed     uint32                                      `protobuf:"varint,36,opt,name=minimum_total_credit_passed,json=minimumTotalCreditPassed,proto3" json:"minimum_total_credit_passed"`
	MinimumGpa                   float64                                     `protobuf:"fixed64,37,opt,name=minimum_gpa,json=minimumGpa,proto3" json:"minimum_gpa"`
	Abstraction                  string                                      `protobuf:"bytes,38,opt,name=abstraction,proto3" json:"abstraction"`
	SyllabusPath                 string                                      `protobuf:"bytes,39,opt,name=syllabus_path,json=syllabusPath,proto3" json:"syllabus_path"`
	SyllabusPathType             string                                      `protobuf:"bytes,40,opt,name=syllabus_path_type,json=syllabusPathType,proto3" json:"syllabus_path_type"`
	SyllabusUrl                  string                                      `protobuf:"bytes,41,opt,name=syllabus_url,json=syllabusUrl,proto3" json:"syllabus_url"`
	PrerequisiteSubjects         []*GetDetailResponseDataPrerequisiteSubject `protobuf:"bytes,42,rep,name=prerequisite_subjects,json=prerequisiteSubjects,proto3" json:"prerequisite_subjects"`
	IsThesis                     bool                                        `protobuf:"varint,43,opt,name=is_thesis,json=isThesis,proto3" json:"is_thesis"`
	IsMbkm                       bool                                        `protobuf:"varint,44,opt,name=is_mbkm,json=isMbkm,proto3" json:"is_mbkm"`
}

func (x *GetDetailResponseData) Reset() {
	*x = GetDetailResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailResponseData) ProtoMessage() {}

func (x *GetDetailResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailResponseData.ProtoReflect.Descriptor instead.
func (*GetDetailResponseData) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{8}
}

func (x *GetDetailResponseData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDetailResponseData) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *GetDetailResponseData) GetStudyProgramName() string {
	if x != nil {
		return x.StudyProgramName
	}
	return ""
}

func (x *GetDetailResponseData) GetCurriculumId() string {
	if x != nil {
		return x.CurriculumId
	}
	return ""
}

func (x *GetDetailResponseData) GetCurriculumName() string {
	if x != nil {
		return x.CurriculumName
	}
	return ""
}

func (x *GetDetailResponseData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetDetailResponseData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDetailResponseData) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *GetDetailResponseData) GetEnglishName() string {
	if x != nil {
		return x.EnglishName
	}
	return ""
}

func (x *GetDetailResponseData) GetEnglishShortName() string {
	if x != nil {
		return x.EnglishShortName
	}
	return ""
}

func (x *GetDetailResponseData) GetIsMandatory() bool {
	if x != nil {
		return x.IsMandatory
	}
	return false
}

func (x *GetDetailResponseData) GetTrait() string {
	if x != nil {
		return x.Trait
	}
	return ""
}

func (x *GetDetailResponseData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetDetailResponseData) GetSubjectCategoryId() string {
	if x != nil {
		return x.SubjectCategoryId
	}
	return ""
}

func (x *GetDetailResponseData) GetSubjectCategoryName() string {
	if x != nil {
		return x.SubjectCategoryName
	}
	return ""
}

func (x *GetDetailResponseData) GetCurriculumType() string {
	if x != nil {
		return x.CurriculumType
	}
	return ""
}

func (x *GetDetailResponseData) GetTheoryCredit() uint32 {
	if x != nil {
		return x.TheoryCredit
	}
	return 0
}

func (x *GetDetailResponseData) GetPracticumCredit() uint32 {
	if x != nil {
		return x.PracticumCredit
	}
	return 0
}

func (x *GetDetailResponseData) GetFieldPracticumCredit() uint32 {
	if x != nil {
		return x.FieldPracticumCredit
	}
	return 0
}

func (x *GetDetailResponseData) GetSemesterPackage() uint32 {
	if x != nil {
		return x.SemesterPackage
	}
	return 0
}

func (x *GetDetailResponseData) GetRepeatCourseLimit() uint32 {
	if x != nil {
		return x.RepeatCourseLimit
	}
	return 0
}

func (x *GetDetailResponseData) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *GetDetailResponseData) GetHasLectureUnit() bool {
	if x != nil {
		return x.HasLectureUnit
	}
	return false
}

func (x *GetDetailResponseData) GetHasTeachingMaterial() bool {
	if x != nil {
		return x.HasTeachingMaterial
	}
	return false
}

func (x *GetDetailResponseData) GetHasLectureSummary() bool {
	if x != nil {
		return x.HasLectureSummary
	}
	return false
}

func (x *GetDetailResponseData) GetSupportingLecturerId() string {
	if x != nil {
		return x.SupportingLecturerId
	}
	return ""
}

func (x *GetDetailResponseData) GetSupportingLecturerName() string {
	if x != nil {
		return x.SupportingLecturerName
	}
	return ""
}

func (x *GetDetailResponseData) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetDetailResponseData) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *GetDetailResponseData) GetMinimumPassingGradePoint() float64 {
	if x != nil {
		return x.MinimumPassingGradePoint
	}
	return 0
}

func (x *GetDetailResponseData) GetMinimumMandatoryCreditTaken() uint32 {
	if x != nil {
		return x.MinimumMandatoryCreditTaken
	}
	return 0
}

func (x *GetDetailResponseData) GetMinimumOptionalCreditTaken() uint32 {
	if x != nil {
		return x.MinimumOptionalCreditTaken
	}
	return 0
}

func (x *GetDetailResponseData) GetMinimumTotalCreditTaken() uint32 {
	if x != nil {
		return x.MinimumTotalCreditTaken
	}
	return 0
}

func (x *GetDetailResponseData) GetMinimumMandatoryCreditPassed() uint32 {
	if x != nil {
		return x.MinimumMandatoryCreditPassed
	}
	return 0
}

func (x *GetDetailResponseData) GetMinimumOptionalCreditPassed() uint32 {
	if x != nil {
		return x.MinimumOptionalCreditPassed
	}
	return 0
}

func (x *GetDetailResponseData) GetMinimumTotalCreditPassed() uint32 {
	if x != nil {
		return x.MinimumTotalCreditPassed
	}
	return 0
}

func (x *GetDetailResponseData) GetMinimumGpa() float64 {
	if x != nil {
		return x.MinimumGpa
	}
	return 0
}

func (x *GetDetailResponseData) GetAbstraction() string {
	if x != nil {
		return x.Abstraction
	}
	return ""
}

func (x *GetDetailResponseData) GetSyllabusPath() string {
	if x != nil {
		return x.SyllabusPath
	}
	return ""
}

func (x *GetDetailResponseData) GetSyllabusPathType() string {
	if x != nil {
		return x.SyllabusPathType
	}
	return ""
}

func (x *GetDetailResponseData) GetSyllabusUrl() string {
	if x != nil {
		return x.SyllabusUrl
	}
	return ""
}

func (x *GetDetailResponseData) GetPrerequisiteSubjects() []*GetDetailResponseDataPrerequisiteSubject {
	if x != nil {
		return x.PrerequisiteSubjects
	}
	return nil
}

func (x *GetDetailResponseData) GetIsThesis() bool {
	if x != nil {
		return x.IsThesis
	}
	return false
}

func (x *GetDetailResponseData) GetIsMbkm() bool {
	if x != nil {
		return x.IsMbkm
	}
	return false
}

type GetDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                  `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *GetDetailResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *GetDetailResponse) Reset() {
	*x = GetDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailResponse) ProtoMessage() {}

func (x *GetDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailResponse.ProtoReflect.Descriptor instead.
func (*GetDetailResponse) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{9}
}

func (x *GetDetailResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetDetailResponse) GetData() *GetDetailResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurriculumId                 string  `protobuf:"bytes,1,opt,name=curriculum_id,json=curriculumId,proto3" json:"curriculum_id"`
	Code                         string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code"`
	Name                         string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	ShortName                    string  `protobuf:"bytes,4,opt,name=short_name,json=shortName,proto3" json:"short_name"`
	EnglishName                  string  `protobuf:"bytes,5,opt,name=english_name,json=englishName,proto3" json:"english_name"`
	EnglishShortName             string  `protobuf:"bytes,6,opt,name=english_short_name,json=englishShortName,proto3" json:"english_short_name"`
	IsMandatory                  bool    `protobuf:"varint,7,opt,name=is_mandatory,json=isMandatory,proto3" json:"is_mandatory"`
	Trait                        string  `protobuf:"bytes,8,opt,name=trait,proto3" json:"trait"`
	Type                         string  `protobuf:"bytes,9,opt,name=type,proto3" json:"type"`
	SubjectCategoryId            string  `protobuf:"bytes,10,opt,name=subject_category_id,json=subjectCategoryId,proto3" json:"subject_category_id"`
	CurriculumType               string  `protobuf:"bytes,11,opt,name=curriculum_type,json=curriculumType,proto3" json:"curriculum_type"`
	TheoryCredit                 uint32  `protobuf:"varint,12,opt,name=theory_credit,json=theoryCredit,proto3" json:"theory_credit"`
	PracticumCredit              uint32  `protobuf:"varint,13,opt,name=practicum_credit,json=practicumCredit,proto3" json:"practicum_credit"`
	FieldPracticumCredit         uint32  `protobuf:"varint,14,opt,name=field_practicum_credit,json=fieldPracticumCredit,proto3" json:"field_practicum_credit"`
	SemesterPackage              uint32  `protobuf:"varint,15,opt,name=semester_package,json=semesterPackage,proto3" json:"semester_package"`
	RepeatCourseLimit            uint32  `protobuf:"varint,16,opt,name=repeat_course_limit,json=repeatCourseLimit,proto3" json:"repeat_course_limit"`
	IsActive                     bool    `protobuf:"varint,17,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	HasLectureUnit               bool    `protobuf:"varint,18,opt,name=has_lecture_unit,json=hasLectureUnit,proto3" json:"has_lecture_unit"`
	HasTeachingMaterial          bool    `protobuf:"varint,19,opt,name=has_teaching_material,json=hasTeachingMaterial,proto3" json:"has_teaching_material"`
	HasLectureSummary            bool    `protobuf:"varint,20,opt,name=has_lecture_summary,json=hasLectureSummary,proto3" json:"has_lecture_summary"`
	SupportingLecturerId         string  `protobuf:"bytes,21,opt,name=supporting_lecturer_id,json=supportingLecturerId,proto3" json:"supporting_lecturer_id"`
	StartDate                    string  `protobuf:"bytes,22,opt,name=start_date,json=startDate,proto3" json:"start_date"`
	EndDate                      string  `protobuf:"bytes,23,opt,name=end_date,json=endDate,proto3" json:"end_date"`
	MinimumPassingGradePoint     float64 `protobuf:"fixed64,24,opt,name=minimum_passing_grade_point,json=minimumPassingGradePoint,proto3" json:"minimum_passing_grade_point"`
	MinimumMandatoryCreditTaken  uint32  `protobuf:"varint,25,opt,name=minimum_mandatory_credit_taken,json=minimumMandatoryCreditTaken,proto3" json:"minimum_mandatory_credit_taken"`
	MinimumOptionalCreditTaken   uint32  `protobuf:"varint,26,opt,name=minimum_optional_credit_taken,json=minimumOptionalCreditTaken,proto3" json:"minimum_optional_credit_taken"`
	MinimumTotalCreditTaken      uint32  `protobuf:"varint,27,opt,name=minimum_total_credit_taken,json=minimumTotalCreditTaken,proto3" json:"minimum_total_credit_taken"`
	MinimumMandatoryCreditPassed uint32  `protobuf:"varint,28,opt,name=minimum_mandatory_credit_passed,json=minimumMandatoryCreditPassed,proto3" json:"minimum_mandatory_credit_passed"`
	MinimumOptionalCreditPassed  uint32  `protobuf:"varint,29,opt,name=minimum_optional_credit_passed,json=minimumOptionalCreditPassed,proto3" json:"minimum_optional_credit_passed"`
	MinimumTotalCreditPassed     uint32  `protobuf:"varint,30,opt,name=minimum_total_credit_passed,json=minimumTotalCreditPassed,proto3" json:"minimum_total_credit_passed"`
	MinimumGpa                   float64 `protobuf:"fixed64,31,opt,name=minimum_gpa,json=minimumGpa,proto3" json:"minimum_gpa"`
	Abstraction                  string  `protobuf:"bytes,32,opt,name=abstraction,proto3" json:"abstraction"`
	SyllabusPath                 string  `protobuf:"bytes,33,opt,name=syllabus_path,json=syllabusPath,proto3" json:"syllabus_path"`
	SyllabusPathType             string  `protobuf:"bytes,34,opt,name=syllabus_path_type,json=syllabusPathType,proto3" json:"syllabus_path_type"`
	IsThesis                     bool    `protobuf:"varint,35,opt,name=is_thesis,json=isThesis,proto3" json:"is_thesis"`
	IsMbkm                       bool    `protobuf:"varint,36,opt,name=is_mbkm,json=isMbkm,proto3" json:"is_mbkm"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{10}
}

func (x *CreateRequest) GetCurriculumId() string {
	if x != nil {
		return x.CurriculumId
	}
	return ""
}

func (x *CreateRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRequest) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *CreateRequest) GetEnglishName() string {
	if x != nil {
		return x.EnglishName
	}
	return ""
}

func (x *CreateRequest) GetEnglishShortName() string {
	if x != nil {
		return x.EnglishShortName
	}
	return ""
}

func (x *CreateRequest) GetIsMandatory() bool {
	if x != nil {
		return x.IsMandatory
	}
	return false
}

func (x *CreateRequest) GetTrait() string {
	if x != nil {
		return x.Trait
	}
	return ""
}

func (x *CreateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateRequest) GetSubjectCategoryId() string {
	if x != nil {
		return x.SubjectCategoryId
	}
	return ""
}

func (x *CreateRequest) GetCurriculumType() string {
	if x != nil {
		return x.CurriculumType
	}
	return ""
}

func (x *CreateRequest) GetTheoryCredit() uint32 {
	if x != nil {
		return x.TheoryCredit
	}
	return 0
}

func (x *CreateRequest) GetPracticumCredit() uint32 {
	if x != nil {
		return x.PracticumCredit
	}
	return 0
}

func (x *CreateRequest) GetFieldPracticumCredit() uint32 {
	if x != nil {
		return x.FieldPracticumCredit
	}
	return 0
}

func (x *CreateRequest) GetSemesterPackage() uint32 {
	if x != nil {
		return x.SemesterPackage
	}
	return 0
}

func (x *CreateRequest) GetRepeatCourseLimit() uint32 {
	if x != nil {
		return x.RepeatCourseLimit
	}
	return 0
}

func (x *CreateRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *CreateRequest) GetHasLectureUnit() bool {
	if x != nil {
		return x.HasLectureUnit
	}
	return false
}

func (x *CreateRequest) GetHasTeachingMaterial() bool {
	if x != nil {
		return x.HasTeachingMaterial
	}
	return false
}

func (x *CreateRequest) GetHasLectureSummary() bool {
	if x != nil {
		return x.HasLectureSummary
	}
	return false
}

func (x *CreateRequest) GetSupportingLecturerId() string {
	if x != nil {
		return x.SupportingLecturerId
	}
	return ""
}

func (x *CreateRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CreateRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *CreateRequest) GetMinimumPassingGradePoint() float64 {
	if x != nil {
		return x.MinimumPassingGradePoint
	}
	return 0
}

func (x *CreateRequest) GetMinimumMandatoryCreditTaken() uint32 {
	if x != nil {
		return x.MinimumMandatoryCreditTaken
	}
	return 0
}

func (x *CreateRequest) GetMinimumOptionalCreditTaken() uint32 {
	if x != nil {
		return x.MinimumOptionalCreditTaken
	}
	return 0
}

func (x *CreateRequest) GetMinimumTotalCreditTaken() uint32 {
	if x != nil {
		return x.MinimumTotalCreditTaken
	}
	return 0
}

func (x *CreateRequest) GetMinimumMandatoryCreditPassed() uint32 {
	if x != nil {
		return x.MinimumMandatoryCreditPassed
	}
	return 0
}

func (x *CreateRequest) GetMinimumOptionalCreditPassed() uint32 {
	if x != nil {
		return x.MinimumOptionalCreditPassed
	}
	return 0
}

func (x *CreateRequest) GetMinimumTotalCreditPassed() uint32 {
	if x != nil {
		return x.MinimumTotalCreditPassed
	}
	return 0
}

func (x *CreateRequest) GetMinimumGpa() float64 {
	if x != nil {
		return x.MinimumGpa
	}
	return 0
}

func (x *CreateRequest) GetAbstraction() string {
	if x != nil {
		return x.Abstraction
	}
	return ""
}

func (x *CreateRequest) GetSyllabusPath() string {
	if x != nil {
		return x.SyllabusPath
	}
	return ""
}

func (x *CreateRequest) GetSyllabusPathType() string {
	if x != nil {
		return x.SyllabusPathType
	}
	return ""
}

func (x *CreateRequest) GetIsThesis() bool {
	if x != nil {
		return x.IsThesis
	}
	return false
}

func (x *CreateRequest) GetIsMbkm() bool {
	if x != nil {
		return x.IsMbkm
	}
	return false
}

type CreateResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateResponseData) Reset() {
	*x = CreateResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponseData) ProtoMessage() {}

func (x *CreateResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponseData.ProtoReflect.Descriptor instead.
func (*CreateResponseData) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{11}
}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *CreateResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{12}
}

func (x *CreateResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *CreateResponse) GetData() *CreateResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	CurriculumId                 string  `protobuf:"bytes,2,opt,name=curriculum_id,json=curriculumId,proto3" json:"curriculum_id"`
	Code                         string  `protobuf:"bytes,3,opt,name=code,proto3" json:"code"`
	Name                         string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`
	ShortName                    string  `protobuf:"bytes,5,opt,name=short_name,json=shortName,proto3" json:"short_name"`
	EnglishName                  string  `protobuf:"bytes,6,opt,name=english_name,json=englishName,proto3" json:"english_name"`
	EnglishShortName             string  `protobuf:"bytes,7,opt,name=english_short_name,json=englishShortName,proto3" json:"english_short_name"`
	IsMandatory                  bool    `protobuf:"varint,8,opt,name=is_mandatory,json=isMandatory,proto3" json:"is_mandatory"`
	Trait                        string  `protobuf:"bytes,9,opt,name=trait,proto3" json:"trait"`
	Type                         string  `protobuf:"bytes,10,opt,name=type,proto3" json:"type"`
	SubjectCategoryId            string  `protobuf:"bytes,11,opt,name=subject_category_id,json=subjectCategoryId,proto3" json:"subject_category_id"`
	CurriculumType               string  `protobuf:"bytes,12,opt,name=curriculum_type,json=curriculumType,proto3" json:"curriculum_type"`
	TheoryCredit                 uint32  `protobuf:"varint,13,opt,name=theory_credit,json=theoryCredit,proto3" json:"theory_credit"`
	PracticumCredit              uint32  `protobuf:"varint,14,opt,name=practicum_credit,json=practicumCredit,proto3" json:"practicum_credit"`
	FieldPracticumCredit         uint32  `protobuf:"varint,15,opt,name=field_practicum_credit,json=fieldPracticumCredit,proto3" json:"field_practicum_credit"`
	SemesterPackage              uint32  `protobuf:"varint,16,opt,name=semester_package,json=semesterPackage,proto3" json:"semester_package"`
	RepeatCourseLimit            uint32  `protobuf:"varint,17,opt,name=repeat_course_limit,json=repeatCourseLimit,proto3" json:"repeat_course_limit"`
	IsActive                     bool    `protobuf:"varint,18,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	HasLectureUnit               bool    `protobuf:"varint,19,opt,name=has_lecture_unit,json=hasLectureUnit,proto3" json:"has_lecture_unit"`
	HasTeachingMaterial          bool    `protobuf:"varint,20,opt,name=has_teaching_material,json=hasTeachingMaterial,proto3" json:"has_teaching_material"`
	HasLectureSummary            bool    `protobuf:"varint,21,opt,name=has_lecture_summary,json=hasLectureSummary,proto3" json:"has_lecture_summary"`
	SupportingLecturerId         string  `protobuf:"bytes,22,opt,name=supporting_lecturer_id,json=supportingLecturerId,proto3" json:"supporting_lecturer_id"`
	StartDate                    string  `protobuf:"bytes,23,opt,name=start_date,json=startDate,proto3" json:"start_date"`
	EndDate                      string  `protobuf:"bytes,24,opt,name=end_date,json=endDate,proto3" json:"end_date"`
	MinimumPassingGradePoint     float64 `protobuf:"fixed64,25,opt,name=minimum_passing_grade_point,json=minimumPassingGradePoint,proto3" json:"minimum_passing_grade_point"`
	MinimumMandatoryCreditTaken  uint32  `protobuf:"varint,26,opt,name=minimum_mandatory_credit_taken,json=minimumMandatoryCreditTaken,proto3" json:"minimum_mandatory_credit_taken"`
	MinimumOptionalCreditTaken   uint32  `protobuf:"varint,27,opt,name=minimum_optional_credit_taken,json=minimumOptionalCreditTaken,proto3" json:"minimum_optional_credit_taken"`
	MinimumTotalCreditTaken      uint32  `protobuf:"varint,28,opt,name=minimum_total_credit_taken,json=minimumTotalCreditTaken,proto3" json:"minimum_total_credit_taken"`
	MinimumMandatoryCreditPassed uint32  `protobuf:"varint,29,opt,name=minimum_mandatory_credit_passed,json=minimumMandatoryCreditPassed,proto3" json:"minimum_mandatory_credit_passed"`
	MinimumOptionalCreditPassed  uint32  `protobuf:"varint,30,opt,name=minimum_optional_credit_passed,json=minimumOptionalCreditPassed,proto3" json:"minimum_optional_credit_passed"`
	MinimumTotalCreditPassed     uint32  `protobuf:"varint,31,opt,name=minimum_total_credit_passed,json=minimumTotalCreditPassed,proto3" json:"minimum_total_credit_passed"`
	MinimumGpa                   float64 `protobuf:"fixed64,32,opt,name=minimum_gpa,json=minimumGpa,proto3" json:"minimum_gpa"`
	Abstraction                  string  `protobuf:"bytes,33,opt,name=abstraction,proto3" json:"abstraction"`
	SyllabusPath                 string  `protobuf:"bytes,34,opt,name=syllabus_path,json=syllabusPath,proto3" json:"syllabus_path"`
	SyllabusPathType             string  `protobuf:"bytes,35,opt,name=syllabus_path_type,json=syllabusPathType,proto3" json:"syllabus_path_type"`
	IsThesis                     bool    `protobuf:"varint,36,opt,name=is_thesis,json=isThesis,proto3" json:"is_thesis"`
	IsMbkm                       bool    `protobuf:"varint,37,opt,name=is_mbkm,json=isMbkm,proto3" json:"is_mbkm"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRequest) GetCurriculumId() string {
	if x != nil {
		return x.CurriculumId
	}
	return ""
}

func (x *UpdateRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRequest) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *UpdateRequest) GetEnglishName() string {
	if x != nil {
		return x.EnglishName
	}
	return ""
}

func (x *UpdateRequest) GetEnglishShortName() string {
	if x != nil {
		return x.EnglishShortName
	}
	return ""
}

func (x *UpdateRequest) GetIsMandatory() bool {
	if x != nil {
		return x.IsMandatory
	}
	return false
}

func (x *UpdateRequest) GetTrait() string {
	if x != nil {
		return x.Trait
	}
	return ""
}

func (x *UpdateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateRequest) GetSubjectCategoryId() string {
	if x != nil {
		return x.SubjectCategoryId
	}
	return ""
}

func (x *UpdateRequest) GetCurriculumType() string {
	if x != nil {
		return x.CurriculumType
	}
	return ""
}

func (x *UpdateRequest) GetTheoryCredit() uint32 {
	if x != nil {
		return x.TheoryCredit
	}
	return 0
}

func (x *UpdateRequest) GetPracticumCredit() uint32 {
	if x != nil {
		return x.PracticumCredit
	}
	return 0
}

func (x *UpdateRequest) GetFieldPracticumCredit() uint32 {
	if x != nil {
		return x.FieldPracticumCredit
	}
	return 0
}

func (x *UpdateRequest) GetSemesterPackage() uint32 {
	if x != nil {
		return x.SemesterPackage
	}
	return 0
}

func (x *UpdateRequest) GetRepeatCourseLimit() uint32 {
	if x != nil {
		return x.RepeatCourseLimit
	}
	return 0
}

func (x *UpdateRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *UpdateRequest) GetHasLectureUnit() bool {
	if x != nil {
		return x.HasLectureUnit
	}
	return false
}

func (x *UpdateRequest) GetHasTeachingMaterial() bool {
	if x != nil {
		return x.HasTeachingMaterial
	}
	return false
}

func (x *UpdateRequest) GetHasLectureSummary() bool {
	if x != nil {
		return x.HasLectureSummary
	}
	return false
}

func (x *UpdateRequest) GetSupportingLecturerId() string {
	if x != nil {
		return x.SupportingLecturerId
	}
	return ""
}

func (x *UpdateRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *UpdateRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *UpdateRequest) GetMinimumPassingGradePoint() float64 {
	if x != nil {
		return x.MinimumPassingGradePoint
	}
	return 0
}

func (x *UpdateRequest) GetMinimumMandatoryCreditTaken() uint32 {
	if x != nil {
		return x.MinimumMandatoryCreditTaken
	}
	return 0
}

func (x *UpdateRequest) GetMinimumOptionalCreditTaken() uint32 {
	if x != nil {
		return x.MinimumOptionalCreditTaken
	}
	return 0
}

func (x *UpdateRequest) GetMinimumTotalCreditTaken() uint32 {
	if x != nil {
		return x.MinimumTotalCreditTaken
	}
	return 0
}

func (x *UpdateRequest) GetMinimumMandatoryCreditPassed() uint32 {
	if x != nil {
		return x.MinimumMandatoryCreditPassed
	}
	return 0
}

func (x *UpdateRequest) GetMinimumOptionalCreditPassed() uint32 {
	if x != nil {
		return x.MinimumOptionalCreditPassed
	}
	return 0
}

func (x *UpdateRequest) GetMinimumTotalCreditPassed() uint32 {
	if x != nil {
		return x.MinimumTotalCreditPassed
	}
	return 0
}

func (x *UpdateRequest) GetMinimumGpa() float64 {
	if x != nil {
		return x.MinimumGpa
	}
	return 0
}

func (x *UpdateRequest) GetAbstraction() string {
	if x != nil {
		return x.Abstraction
	}
	return ""
}

func (x *UpdateRequest) GetSyllabusPath() string {
	if x != nil {
		return x.SyllabusPath
	}
	return ""
}

func (x *UpdateRequest) GetSyllabusPathType() string {
	if x != nil {
		return x.SyllabusPathType
	}
	return ""
}

func (x *UpdateRequest) GetIsThesis() bool {
	if x != nil {
		return x.IsThesis
	}
	return false
}

func (x *UpdateRequest) GetIsMbkm() bool {
	if x != nil {
		return x.IsMbkm
	}
	return false
}

type UpdateResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateResponseData) Reset() {
	*x = UpdateResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponseData) ProtoMessage() {}

func (x *UpdateResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponseData.ProtoReflect.Descriptor instead.
func (*UpdateResponseData) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{14}
}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *UpdateResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UpdateResponse) GetData() *UpdateResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResponseData) Reset() {
	*x = DeleteResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponseData) ProtoMessage() {}

func (x *DeleteResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponseData.ProtoReflect.Descriptor instead.
func (*DeleteResponseData) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{17}
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *DeleteResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DeleteResponse) GetData() *DeleteResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type SetPrerequisiteSubjectRequestPrerequisite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	PrerequisiteType  string  `protobuf:"bytes,2,opt,name=prerequisite_type,json=prerequisiteType,proto3" json:"prerequisite_type"`
	MinimumGradePoint float64 `protobuf:"fixed64,3,opt,name=minimum_grade_point,json=minimumGradePoint,proto3" json:"minimum_grade_point"`
}

func (x *SetPrerequisiteSubjectRequestPrerequisite) Reset() {
	*x = SetPrerequisiteSubjectRequestPrerequisite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPrerequisiteSubjectRequestPrerequisite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPrerequisiteSubjectRequestPrerequisite) ProtoMessage() {}

func (x *SetPrerequisiteSubjectRequestPrerequisite) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPrerequisiteSubjectRequestPrerequisite.ProtoReflect.Descriptor instead.
func (*SetPrerequisiteSubjectRequestPrerequisite) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{19}
}

func (x *SetPrerequisiteSubjectRequestPrerequisite) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetPrerequisiteSubjectRequestPrerequisite) GetPrerequisiteType() string {
	if x != nil {
		return x.PrerequisiteType
	}
	return ""
}

func (x *SetPrerequisiteSubjectRequestPrerequisite) GetMinimumGradePoint() float64 {
	if x != nil {
		return x.MinimumGradePoint
	}
	return 0
}

type SetPrerequisiteSubjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Prerequisites []*SetPrerequisiteSubjectRequestPrerequisite `protobuf:"bytes,2,rep,name=prerequisites,proto3" json:"prerequisites"`
}

func (x *SetPrerequisiteSubjectRequest) Reset() {
	*x = SetPrerequisiteSubjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPrerequisiteSubjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPrerequisiteSubjectRequest) ProtoMessage() {}

func (x *SetPrerequisiteSubjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPrerequisiteSubjectRequest.ProtoReflect.Descriptor instead.
func (*SetPrerequisiteSubjectRequest) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{20}
}

func (x *SetPrerequisiteSubjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetPrerequisiteSubjectRequest) GetPrerequisites() []*SetPrerequisiteSubjectRequestPrerequisite {
	if x != nil {
		return x.Prerequisites
	}
	return nil
}

type SetPrerequisiteSubjectResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPrerequisiteSubjectResponseData) Reset() {
	*x = SetPrerequisiteSubjectResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPrerequisiteSubjectResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPrerequisiteSubjectResponseData) ProtoMessage() {}

func (x *SetPrerequisiteSubjectResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPrerequisiteSubjectResponseData.ProtoReflect.Descriptor instead.
func (*SetPrerequisiteSubjectResponseData) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{21}
}

type SetPrerequisiteSubjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *SetPrerequisiteSubjectResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *SetPrerequisiteSubjectResponse) Reset() {
	*x = SetPrerequisiteSubjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPrerequisiteSubjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPrerequisiteSubjectResponse) ProtoMessage() {}

func (x *SetPrerequisiteSubjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPrerequisiteSubjectResponse.ProtoReflect.Descriptor instead.
func (*SetPrerequisiteSubjectResponse) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{22}
}

func (x *SetPrerequisiteSubjectResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SetPrerequisiteSubjectResponse) GetData() *SetPrerequisiteSubjectResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type SetEquivalentSubjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId           string `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id"`
	EquivalentSubjectId string `protobuf:"bytes,2,opt,name=equivalent_subject_id,json=equivalentSubjectId,proto3" json:"equivalent_subject_id"`
	IsViceVersa         bool   `protobuf:"varint,3,opt,name=is_vice_versa,json=isViceVersa,proto3" json:"is_vice_versa"`
}

func (x *SetEquivalentSubjectRequest) Reset() {
	*x = SetEquivalentSubjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEquivalentSubjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEquivalentSubjectRequest) ProtoMessage() {}

func (x *SetEquivalentSubjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEquivalentSubjectRequest.ProtoReflect.Descriptor instead.
func (*SetEquivalentSubjectRequest) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{23}
}

func (x *SetEquivalentSubjectRequest) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *SetEquivalentSubjectRequest) GetEquivalentSubjectId() string {
	if x != nil {
		return x.EquivalentSubjectId
	}
	return ""
}

func (x *SetEquivalentSubjectRequest) GetIsViceVersa() bool {
	if x != nil {
		return x.IsViceVersa
	}
	return false
}

type SetEquivalentSubjectResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetEquivalentSubjectResponseData) Reset() {
	*x = SetEquivalentSubjectResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEquivalentSubjectResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEquivalentSubjectResponseData) ProtoMessage() {}

func (x *SetEquivalentSubjectResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEquivalentSubjectResponseData.ProtoReflect.Descriptor instead.
func (*SetEquivalentSubjectResponseData) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{24}
}

type SetEquivalentSubjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                             `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *SetEquivalentSubjectResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *SetEquivalentSubjectResponse) Reset() {
	*x = SetEquivalentSubjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEquivalentSubjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEquivalentSubjectResponse) ProtoMessage() {}

func (x *SetEquivalentSubjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEquivalentSubjectResponse.ProtoReflect.Descriptor instead.
func (*SetEquivalentSubjectResponse) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{25}
}

func (x *SetEquivalentSubjectResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SetEquivalentSubjectResponse) GetData() *SetEquivalentSubjectResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteEquivalentSubjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId           string `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id"`
	EquivalentSubjectId string `protobuf:"bytes,2,opt,name=equivalent_subject_id,json=equivalentSubjectId,proto3" json:"equivalent_subject_id"`
}

func (x *DeleteEquivalentSubjectRequest) Reset() {
	*x = DeleteEquivalentSubjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEquivalentSubjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEquivalentSubjectRequest) ProtoMessage() {}

func (x *DeleteEquivalentSubjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEquivalentSubjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteEquivalentSubjectRequest) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteEquivalentSubjectRequest) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *DeleteEquivalentSubjectRequest) GetEquivalentSubjectId() string {
	if x != nil {
		return x.EquivalentSubjectId
	}
	return ""
}

type DeleteEquivalentSubjectResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteEquivalentSubjectResponseData) Reset() {
	*x = DeleteEquivalentSubjectResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEquivalentSubjectResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEquivalentSubjectResponseData) ProtoMessage() {}

func (x *DeleteEquivalentSubjectResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEquivalentSubjectResponseData.ProtoReflect.Descriptor instead.
func (*DeleteEquivalentSubjectResponseData) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{27}
}

type DeleteEquivalentSubjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                                `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *DeleteEquivalentSubjectResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *DeleteEquivalentSubjectResponse) Reset() {
	*x = DeleteEquivalentSubjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_subject_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEquivalentSubjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEquivalentSubjectResponse) ProtoMessage() {}

func (x *DeleteEquivalentSubjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_subject_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEquivalentSubjectResponse.ProtoReflect.Descriptor instead.
func (*DeleteEquivalentSubjectResponse) Descriptor() ([]byte, []int) {
	return file_admin_subject_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteEquivalentSubjectResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DeleteEquivalentSubjectResponse) GetData() *DeleteEquivalentSubjectResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_admin_subject_proto protoreflect.FileDescriptor

var file_admin_subject_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x4c, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x72, 0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x72, 0x65, 0x76, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e,
	0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xaa, 0x03, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75,
	0x6d, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x1b, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x65, 0x6d, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x54, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6d, 0x62, 0x6b, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x62, 0x6b, 0x6d, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x0a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63,
	0x75, 0x6c, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68,
	0x65, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x63, 0x75, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x12, 0x36, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1d, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3d,
	0x0a, 0x1b, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x1d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75,
	0x6c, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x69, 0x63,
	0x75, 0x6c, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x41, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6d, 0x62, 0x6b, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x62, 0x6b, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x28, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xa1, 0x0f, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c,
	0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68,
	0x61, 0x73, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x73, 0x54, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73,
	0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x4c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x50, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x1f, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x43,
	0x0a, 0x1e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x67, 0x70,
	0x61, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x47, 0x70, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x79,
	0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x79,
	0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79, 0x6c, 0x6c,
	0x61, 0x62, 0x75, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x6c, 0x0a, 0x15, 0x70,
	0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x14, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6d, 0x62, 0x6b,
	0x6d, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x62, 0x6b, 0x6d, 0x22,
	0x76, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x89, 0x0c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x67,
	0x6c, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x67, 0x6c,
	0x69, 0x73, 0x68, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x16,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65,
	0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61,
	0x73, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x73, 0x54, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1b, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x1d,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12,
	0x3b, 0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x1f,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x67, 0x70, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x47, 0x70, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79,
	0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x79, 0x6c,
	0x6c, 0x61, 0x62, 0x75, 0x73, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6d, 0x62, 0x6b, 0x6d, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4d,
	0x62, 0x6b, 0x6d, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x99, 0x0c, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x67,
	0x6c, 0x69, 0x73, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73,
	0x68, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x63, 0x75, 0x6c, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63,
	0x75, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x63, 0x75, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x4c, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x5f,
	0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x73, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13,
	0x68, 0x61, 0x73, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x4c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x16,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x1b,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x61, 0x6e, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65,
	0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x61,
	0x6b, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65,
	0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x12, 0x45, 0x0a, 0x1f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1b, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x67, 0x70, 0x61, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x47, 0x70, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6d, 0x62, 0x6b, 0x6d, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4d, 0x62, 0x6b, 0x6d, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x1f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x98, 0x01, 0x0a, 0x29, 0x53, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x90, 0x01, 0x0a, 0x1e,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x94,
	0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x56, 0x69, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x61, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x01, 0x0a, 0x1c, 0x53, 0x65,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x73, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x25, 0x0a,
	0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x92, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x46, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xf6, 0x05, 0x0a, 0x13, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x16, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x2d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x18, 0x5a, 0x16, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_subject_proto_rawDescOnce sync.Once
	file_admin_subject_proto_rawDescData = file_admin_subject_proto_rawDesc
)

func file_admin_subject_proto_rawDescGZIP() []byte {
	file_admin_subject_proto_rawDescOnce.Do(func() {
		file_admin_subject_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_subject_proto_rawDescData)
	})
	return file_admin_subject_proto_rawDescData
}

var file_admin_subject_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_admin_subject_proto_goTypes = []interface{}{
	(*Meta)(nil),                                      // 0: admin_subject.Meta
	(*Pagination)(nil),                                // 1: admin_subject.Pagination
	(*GetListRequest)(nil),                            // 2: admin_subject.GetListRequest
	(*GetListResponseDataClass)(nil),                  // 3: admin_subject.GetListResponseDataClass
	(*GetListResponseData)(nil),                       // 4: admin_subject.GetListResponseData
	(*GetListResponse)(nil),                           // 5: admin_subject.GetListResponse
	(*GetDetailRequest)(nil),                          // 6: admin_subject.GetDetailRequest
	(*GetDetailResponseDataPrerequisiteSubject)(nil),  // 7: admin_subject.GetDetailResponseDataPrerequisiteSubject
	(*GetDetailResponseData)(nil),                     // 8: admin_subject.GetDetailResponseData
	(*GetDetailResponse)(nil),                         // 9: admin_subject.GetDetailResponse
	(*CreateRequest)(nil),                             // 10: admin_subject.CreateRequest
	(*CreateResponseData)(nil),                        // 11: admin_subject.CreateResponseData
	(*CreateResponse)(nil),                            // 12: admin_subject.CreateResponse
	(*UpdateRequest)(nil),                             // 13: admin_subject.UpdateRequest
	(*UpdateResponseData)(nil),                        // 14: admin_subject.UpdateResponseData
	(*UpdateResponse)(nil),                            // 15: admin_subject.UpdateResponse
	(*DeleteRequest)(nil),                             // 16: admin_subject.DeleteRequest
	(*DeleteResponseData)(nil),                        // 17: admin_subject.DeleteResponseData
	(*DeleteResponse)(nil),                            // 18: admin_subject.DeleteResponse
	(*SetPrerequisiteSubjectRequestPrerequisite)(nil), // 19: admin_subject.SetPrerequisiteSubjectRequestPrerequisite
	(*SetPrerequisiteSubjectRequest)(nil),             // 20: admin_subject.SetPrerequisiteSubjectRequest
	(*SetPrerequisiteSubjectResponseData)(nil),        // 21: admin_subject.SetPrerequisiteSubjectResponseData
	(*SetPrerequisiteSubjectResponse)(nil),            // 22: admin_subject.SetPrerequisiteSubjectResponse
	(*SetEquivalentSubjectRequest)(nil),               // 23: admin_subject.SetEquivalentSubjectRequest
	(*SetEquivalentSubjectResponseData)(nil),          // 24: admin_subject.SetEquivalentSubjectResponseData
	(*SetEquivalentSubjectResponse)(nil),              // 25: admin_subject.SetEquivalentSubjectResponse
	(*DeleteEquivalentSubjectRequest)(nil),            // 26: admin_subject.DeleteEquivalentSubjectRequest
	(*DeleteEquivalentSubjectResponseData)(nil),       // 27: admin_subject.DeleteEquivalentSubjectResponseData
	(*DeleteEquivalentSubjectResponse)(nil),           // 28: admin_subject.DeleteEquivalentSubjectResponse
}
var file_admin_subject_proto_depIdxs = []int32{
	3,  // 0: admin_subject.GetListResponseData.classes:type_name -> admin_subject.GetListResponseDataClass
	0,  // 1: admin_subject.GetListResponse.meta:type_name -> admin_subject.Meta
	1,  // 2: admin_subject.GetListResponse.pagination:type_name -> admin_subject.Pagination
	4,  // 3: admin_subject.GetListResponse.data:type_name -> admin_subject.GetListResponseData
	7,  // 4: admin_subject.GetDetailResponseData.prerequisite_subjects:type_name -> admin_subject.GetDetailResponseDataPrerequisiteSubject
	0,  // 5: admin_subject.GetDetailResponse.meta:type_name -> admin_subject.Meta
	8,  // 6: admin_subject.GetDetailResponse.data:type_name -> admin_subject.GetDetailResponseData
	0,  // 7: admin_subject.CreateResponse.meta:type_name -> admin_subject.Meta
	11, // 8: admin_subject.CreateResponse.data:type_name -> admin_subject.CreateResponseData
	0,  // 9: admin_subject.UpdateResponse.meta:type_name -> admin_subject.Meta
	14, // 10: admin_subject.UpdateResponse.data:type_name -> admin_subject.UpdateResponseData
	0,  // 11: admin_subject.DeleteResponse.meta:type_name -> admin_subject.Meta
	17, // 12: admin_subject.DeleteResponse.data:type_name -> admin_subject.DeleteResponseData
	19, // 13: admin_subject.SetPrerequisiteSubjectRequest.prerequisites:type_name -> admin_subject.SetPrerequisiteSubjectRequestPrerequisite
	0,  // 14: admin_subject.SetPrerequisiteSubjectResponse.meta:type_name -> admin_subject.Meta
	21, // 15: admin_subject.SetPrerequisiteSubjectResponse.data:type_name -> admin_subject.SetPrerequisiteSubjectResponseData
	0,  // 16: admin_subject.SetEquivalentSubjectResponse.meta:type_name -> admin_subject.Meta
	24, // 17: admin_subject.SetEquivalentSubjectResponse.data:type_name -> admin_subject.SetEquivalentSubjectResponseData
	0,  // 18: admin_subject.DeleteEquivalentSubjectResponse.meta:type_name -> admin_subject.Meta
	27, // 19: admin_subject.DeleteEquivalentSubjectResponse.data:type_name -> admin_subject.DeleteEquivalentSubjectResponseData
	2,  // 20: admin_subject.AdminSubjectHandler.GetList:input_type -> admin_subject.GetListRequest
	6,  // 21: admin_subject.AdminSubjectHandler.GetDetail:input_type -> admin_subject.GetDetailRequest
	10, // 22: admin_subject.AdminSubjectHandler.Create:input_type -> admin_subject.CreateRequest
	13, // 23: admin_subject.AdminSubjectHandler.Update:input_type -> admin_subject.UpdateRequest
	16, // 24: admin_subject.AdminSubjectHandler.Delete:input_type -> admin_subject.DeleteRequest
	20, // 25: admin_subject.AdminSubjectHandler.SetPrerequisiteSubject:input_type -> admin_subject.SetPrerequisiteSubjectRequest
	23, // 26: admin_subject.AdminSubjectHandler.SetEquivalentSubject:input_type -> admin_subject.SetEquivalentSubjectRequest
	26, // 27: admin_subject.AdminSubjectHandler.DeleteEquivalentSubject:input_type -> admin_subject.DeleteEquivalentSubjectRequest
	5,  // 28: admin_subject.AdminSubjectHandler.GetList:output_type -> admin_subject.GetListResponse
	9,  // 29: admin_subject.AdminSubjectHandler.GetDetail:output_type -> admin_subject.GetDetailResponse
	12, // 30: admin_subject.AdminSubjectHandler.Create:output_type -> admin_subject.CreateResponse
	15, // 31: admin_subject.AdminSubjectHandler.Update:output_type -> admin_subject.UpdateResponse
	18, // 32: admin_subject.AdminSubjectHandler.Delete:output_type -> admin_subject.DeleteResponse
	22, // 33: admin_subject.AdminSubjectHandler.SetPrerequisiteSubject:output_type -> admin_subject.SetPrerequisiteSubjectResponse
	25, // 34: admin_subject.AdminSubjectHandler.SetEquivalentSubject:output_type -> admin_subject.SetEquivalentSubjectResponse
	28, // 35: admin_subject.AdminSubjectHandler.DeleteEquivalentSubject:output_type -> admin_subject.DeleteEquivalentSubjectResponse
	28, // [28:36] is the sub-list for method output_type
	20, // [20:28] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_admin_subject_proto_init() }
func file_admin_subject_proto_init() {
	if File_admin_subject_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_admin_subject_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponseDataClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailResponseDataPrerequisiteSubject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPrerequisiteSubjectRequestPrerequisite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPrerequisiteSubjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPrerequisiteSubjectResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPrerequisiteSubjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEquivalentSubjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEquivalentSubjectResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEquivalentSubjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEquivalentSubjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEquivalentSubjectResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_subject_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEquivalentSubjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_subject_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_subject_proto_goTypes,
		DependencyIndexes: file_admin_subject_proto_depIdxs,
		MessageInfos:      file_admin_subject_proto_msgTypes,
	}.Build()
	File_admin_subject_proto = out.File
	file_admin_subject_proto_rawDesc = nil
	file_admin_subject_proto_goTypes = nil
	file_admin_subject_proto_depIdxs = nil
}
