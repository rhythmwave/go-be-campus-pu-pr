// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: admin/curriculum.proto

package curriculum

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminCurriculumHandlerClient is the client API for AdminCurriculumHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminCurriculumHandlerClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error)
	GetActiveByStudyProgramId(ctx context.Context, in *GetActiveByStudyProgramIdRequest, opts ...grpc.CallOption) (*GetActiveByStudyProgramIdResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type adminCurriculumHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminCurriculumHandlerClient(cc grpc.ClientConnInterface) AdminCurriculumHandlerClient {
	return &adminCurriculumHandlerClient{cc}
}

func (c *adminCurriculumHandlerClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/admin_curriculum.AdminCurriculumHandler/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCurriculumHandlerClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error) {
	out := new(GetDetailResponse)
	err := c.cc.Invoke(ctx, "/admin_curriculum.AdminCurriculumHandler/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCurriculumHandlerClient) GetActiveByStudyProgramId(ctx context.Context, in *GetActiveByStudyProgramIdRequest, opts ...grpc.CallOption) (*GetActiveByStudyProgramIdResponse, error) {
	out := new(GetActiveByStudyProgramIdResponse)
	err := c.cc.Invoke(ctx, "/admin_curriculum.AdminCurriculumHandler/GetActiveByStudyProgramId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCurriculumHandlerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/admin_curriculum.AdminCurriculumHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCurriculumHandlerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/admin_curriculum.AdminCurriculumHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCurriculumHandlerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/admin_curriculum.AdminCurriculumHandler/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminCurriculumHandlerServer is the server API for AdminCurriculumHandler service.
// All implementations must embed UnimplementedAdminCurriculumHandlerServer
// for forward compatibility
type AdminCurriculumHandlerServer interface {
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error)
	GetActiveByStudyProgramId(context.Context, *GetActiveByStudyProgramIdRequest) (*GetActiveByStudyProgramIdResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedAdminCurriculumHandlerServer()
}

// UnimplementedAdminCurriculumHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedAdminCurriculumHandlerServer struct {
}

func (UnimplementedAdminCurriculumHandlerServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedAdminCurriculumHandlerServer) GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedAdminCurriculumHandlerServer) GetActiveByStudyProgramId(context.Context, *GetActiveByStudyProgramIdRequest) (*GetActiveByStudyProgramIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveByStudyProgramId not implemented")
}
func (UnimplementedAdminCurriculumHandlerServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAdminCurriculumHandlerServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAdminCurriculumHandlerServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdminCurriculumHandlerServer) mustEmbedUnimplementedAdminCurriculumHandlerServer() {
}

// UnsafeAdminCurriculumHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminCurriculumHandlerServer will
// result in compilation errors.
type UnsafeAdminCurriculumHandlerServer interface {
	mustEmbedUnimplementedAdminCurriculumHandlerServer()
}

func RegisterAdminCurriculumHandlerServer(s grpc.ServiceRegistrar, srv AdminCurriculumHandlerServer) {
	s.RegisterService(&AdminCurriculumHandler_ServiceDesc, srv)
}

func _AdminCurriculumHandler_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCurriculumHandlerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_curriculum.AdminCurriculumHandler/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCurriculumHandlerServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCurriculumHandler_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCurriculumHandlerServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_curriculum.AdminCurriculumHandler/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCurriculumHandlerServer).GetDetail(ctx, req.(*GetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCurriculumHandler_GetActiveByStudyProgramId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveByStudyProgramIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCurriculumHandlerServer).GetActiveByStudyProgramId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_curriculum.AdminCurriculumHandler/GetActiveByStudyProgramId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCurriculumHandlerServer).GetActiveByStudyProgramId(ctx, req.(*GetActiveByStudyProgramIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCurriculumHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCurriculumHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_curriculum.AdminCurriculumHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCurriculumHandlerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCurriculumHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCurriculumHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_curriculum.AdminCurriculumHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCurriculumHandlerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCurriculumHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCurriculumHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_curriculum.AdminCurriculumHandler/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCurriculumHandlerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminCurriculumHandler_ServiceDesc is the grpc.ServiceDesc for AdminCurriculumHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminCurriculumHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_curriculum.AdminCurriculumHandler",
	HandlerType: (*AdminCurriculumHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _AdminCurriculumHandler_GetList_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _AdminCurriculumHandler_GetDetail_Handler,
		},
		{
			MethodName: "GetActiveByStudyProgramId",
			Handler:    _AdminCurriculumHandler_GetActiveByStudyProgramId_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AdminCurriculumHandler_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AdminCurriculumHandler_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdminCurriculumHandler_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/curriculum.proto",
}
