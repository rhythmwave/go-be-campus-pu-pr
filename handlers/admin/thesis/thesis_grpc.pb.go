// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: admin/thesis.proto

package thesis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminThesisHandlerClient is the client API for AdminThesisHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminThesisHandlerClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetListThesisDefenseRequest(ctx context.Context, in *GetListThesisDefenseRequestRequest, opts ...grpc.CallOption) (*GetListThesisDefenseRequestResponse, error)
	RegisterThesisDefense(ctx context.Context, in *RegisterThesisDefenseRequest, opts ...grpc.CallOption) (*RegisterThesisDefenseResponse, error)
	CreateThesisDefense(ctx context.Context, in *CreateThesisDefenseRequest, opts ...grpc.CallOption) (*CreateThesisDefenseResponse, error)
	UpdateThesisDefense(ctx context.Context, in *UpdateThesisDefenseRequest, opts ...grpc.CallOption) (*UpdateThesisDefenseResponse, error)
	GetThesisSupervisorLog(ctx context.Context, in *GetThesisSupervisorLogRequest, opts ...grpc.CallOption) (*GetThesisSupervisorLogResponse, error)
}

type adminThesisHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminThesisHandlerClient(cc grpc.ClientConnInterface) AdminThesisHandlerClient {
	return &adminThesisHandlerClient{cc}
}

func (c *adminThesisHandlerClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/admin_thesis.AdminThesisHandler/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminThesisHandlerClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error) {
	out := new(GetDetailResponse)
	err := c.cc.Invoke(ctx, "/admin_thesis.AdminThesisHandler/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminThesisHandlerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/admin_thesis.AdminThesisHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminThesisHandlerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/admin_thesis.AdminThesisHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminThesisHandlerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/admin_thesis.AdminThesisHandler/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminThesisHandlerClient) GetListThesisDefenseRequest(ctx context.Context, in *GetListThesisDefenseRequestRequest, opts ...grpc.CallOption) (*GetListThesisDefenseRequestResponse, error) {
	out := new(GetListThesisDefenseRequestResponse)
	err := c.cc.Invoke(ctx, "/admin_thesis.AdminThesisHandler/GetListThesisDefenseRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminThesisHandlerClient) RegisterThesisDefense(ctx context.Context, in *RegisterThesisDefenseRequest, opts ...grpc.CallOption) (*RegisterThesisDefenseResponse, error) {
	out := new(RegisterThesisDefenseResponse)
	err := c.cc.Invoke(ctx, "/admin_thesis.AdminThesisHandler/RegisterThesisDefense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminThesisHandlerClient) CreateThesisDefense(ctx context.Context, in *CreateThesisDefenseRequest, opts ...grpc.CallOption) (*CreateThesisDefenseResponse, error) {
	out := new(CreateThesisDefenseResponse)
	err := c.cc.Invoke(ctx, "/admin_thesis.AdminThesisHandler/CreateThesisDefense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminThesisHandlerClient) UpdateThesisDefense(ctx context.Context, in *UpdateThesisDefenseRequest, opts ...grpc.CallOption) (*UpdateThesisDefenseResponse, error) {
	out := new(UpdateThesisDefenseResponse)
	err := c.cc.Invoke(ctx, "/admin_thesis.AdminThesisHandler/UpdateThesisDefense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminThesisHandlerClient) GetThesisSupervisorLog(ctx context.Context, in *GetThesisSupervisorLogRequest, opts ...grpc.CallOption) (*GetThesisSupervisorLogResponse, error) {
	out := new(GetThesisSupervisorLogResponse)
	err := c.cc.Invoke(ctx, "/admin_thesis.AdminThesisHandler/GetThesisSupervisorLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminThesisHandlerServer is the server API for AdminThesisHandler service.
// All implementations must embed UnimplementedAdminThesisHandlerServer
// for forward compatibility
type AdminThesisHandlerServer interface {
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	GetListThesisDefenseRequest(context.Context, *GetListThesisDefenseRequestRequest) (*GetListThesisDefenseRequestResponse, error)
	RegisterThesisDefense(context.Context, *RegisterThesisDefenseRequest) (*RegisterThesisDefenseResponse, error)
	CreateThesisDefense(context.Context, *CreateThesisDefenseRequest) (*CreateThesisDefenseResponse, error)
	UpdateThesisDefense(context.Context, *UpdateThesisDefenseRequest) (*UpdateThesisDefenseResponse, error)
	GetThesisSupervisorLog(context.Context, *GetThesisSupervisorLogRequest) (*GetThesisSupervisorLogResponse, error)
	mustEmbedUnimplementedAdminThesisHandlerServer()
}

// UnimplementedAdminThesisHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedAdminThesisHandlerServer struct {
}

func (UnimplementedAdminThesisHandlerServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedAdminThesisHandlerServer) GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedAdminThesisHandlerServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAdminThesisHandlerServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAdminThesisHandlerServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdminThesisHandlerServer) GetListThesisDefenseRequest(context.Context, *GetListThesisDefenseRequestRequest) (*GetListThesisDefenseRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListThesisDefenseRequest not implemented")
}
func (UnimplementedAdminThesisHandlerServer) RegisterThesisDefense(context.Context, *RegisterThesisDefenseRequest) (*RegisterThesisDefenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterThesisDefense not implemented")
}
func (UnimplementedAdminThesisHandlerServer) CreateThesisDefense(context.Context, *CreateThesisDefenseRequest) (*CreateThesisDefenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThesisDefense not implemented")
}
func (UnimplementedAdminThesisHandlerServer) UpdateThesisDefense(context.Context, *UpdateThesisDefenseRequest) (*UpdateThesisDefenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateThesisDefense not implemented")
}
func (UnimplementedAdminThesisHandlerServer) GetThesisSupervisorLog(context.Context, *GetThesisSupervisorLogRequest) (*GetThesisSupervisorLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThesisSupervisorLog not implemented")
}
func (UnimplementedAdminThesisHandlerServer) mustEmbedUnimplementedAdminThesisHandlerServer() {}

// UnsafeAdminThesisHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminThesisHandlerServer will
// result in compilation errors.
type UnsafeAdminThesisHandlerServer interface {
	mustEmbedUnimplementedAdminThesisHandlerServer()
}

func RegisterAdminThesisHandlerServer(s grpc.ServiceRegistrar, srv AdminThesisHandlerServer) {
	s.RegisterService(&AdminThesisHandler_ServiceDesc, srv)
}

func _AdminThesisHandler_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminThesisHandlerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_thesis.AdminThesisHandler/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminThesisHandlerServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminThesisHandler_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminThesisHandlerServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_thesis.AdminThesisHandler/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminThesisHandlerServer).GetDetail(ctx, req.(*GetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminThesisHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminThesisHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_thesis.AdminThesisHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminThesisHandlerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminThesisHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminThesisHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_thesis.AdminThesisHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminThesisHandlerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminThesisHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminThesisHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_thesis.AdminThesisHandler/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminThesisHandlerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminThesisHandler_GetListThesisDefenseRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListThesisDefenseRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminThesisHandlerServer).GetListThesisDefenseRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_thesis.AdminThesisHandler/GetListThesisDefenseRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminThesisHandlerServer).GetListThesisDefenseRequest(ctx, req.(*GetListThesisDefenseRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminThesisHandler_RegisterThesisDefense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterThesisDefenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminThesisHandlerServer).RegisterThesisDefense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_thesis.AdminThesisHandler/RegisterThesisDefense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminThesisHandlerServer).RegisterThesisDefense(ctx, req.(*RegisterThesisDefenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminThesisHandler_CreateThesisDefense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThesisDefenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminThesisHandlerServer).CreateThesisDefense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_thesis.AdminThesisHandler/CreateThesisDefense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminThesisHandlerServer).CreateThesisDefense(ctx, req.(*CreateThesisDefenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminThesisHandler_UpdateThesisDefense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThesisDefenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminThesisHandlerServer).UpdateThesisDefense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_thesis.AdminThesisHandler/UpdateThesisDefense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminThesisHandlerServer).UpdateThesisDefense(ctx, req.(*UpdateThesisDefenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminThesisHandler_GetThesisSupervisorLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThesisSupervisorLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminThesisHandlerServer).GetThesisSupervisorLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_thesis.AdminThesisHandler/GetThesisSupervisorLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminThesisHandlerServer).GetThesisSupervisorLog(ctx, req.(*GetThesisSupervisorLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminThesisHandler_ServiceDesc is the grpc.ServiceDesc for AdminThesisHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminThesisHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_thesis.AdminThesisHandler",
	HandlerType: (*AdminThesisHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _AdminThesisHandler_GetList_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _AdminThesisHandler_GetDetail_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AdminThesisHandler_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AdminThesisHandler_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdminThesisHandler_Delete_Handler,
		},
		{
			MethodName: "GetListThesisDefenseRequest",
			Handler:    _AdminThesisHandler_GetListThesisDefenseRequest_Handler,
		},
		{
			MethodName: "RegisterThesisDefense",
			Handler:    _AdminThesisHandler_RegisterThesisDefense_Handler,
		},
		{
			MethodName: "CreateThesisDefense",
			Handler:    _AdminThesisHandler_CreateThesisDefense_Handler,
		},
		{
			MethodName: "UpdateThesisDefense",
			Handler:    _AdminThesisHandler_UpdateThesisDefense_Handler,
		},
		{
			MethodName: "GetThesisSupervisorLog",
			Handler:    _AdminThesisHandler_GetThesisSupervisorLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/thesis.proto",
}
