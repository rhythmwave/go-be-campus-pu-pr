// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: admin/thesis.proto

package thesis

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Status  uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	Code    string `protobuf:"bytes,3,opt,name=code,proto3" json:"code"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{0}
}

func (x *Meta) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Meta) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Meta) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit        uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Prev         uint32 `protobuf:"varint,3,opt,name=prev,proto3" json:"prev"`
	Next         uint32 `protobuf:"varint,4,opt,name=next,proto3" json:"next"`
	TotalPages   uint32 `protobuf:"varint,5,opt,name=total_pages,json=totalPages,proto3" json:"total_pages"`
	TotalRecords uint32 `protobuf:"varint,6,opt,name=total_records,json=totalRecords,proto3" json:"total_records"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{1}
}

func (x *Pagination) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Pagination) GetPrev() uint32 {
	if x != nil {
		return x.Prev
	}
	return 0
}

func (x *Pagination) GetNext() uint32 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *Pagination) GetTotalPages() uint32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *Pagination) GetTotalRecords() uint32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page                 uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Search               string `protobuf:"bytes,3,opt,name=search,proto3" json:"search"`
	StudyProgramId       string `protobuf:"bytes,4,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	NimNumber            int64  `protobuf:"varint,5,opt,name=nim_number,json=nimNumber,proto3" json:"nim_number"`
	StartSemesterId      string `protobuf:"bytes,6,opt,name=start_semester_id,json=startSemesterId,proto3" json:"start_semester_id"`
	Status               string `protobuf:"bytes,7,opt,name=status,proto3" json:"status"`
	SupervisorLecturerId string `protobuf:"bytes,8,opt,name=supervisor_lecturer_id,json=supervisorLecturerId,proto3" json:"supervisor_lecturer_id"`
}

func (x *GetListRequest) Reset() {
	*x = GetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRequest) ProtoMessage() {}

func (x *GetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRequest.ProtoReflect.Descriptor instead.
func (*GetListRequest) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{2}
}

func (x *GetListRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetListRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetListRequest) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *GetListRequest) GetNimNumber() int64 {
	if x != nil {
		return x.NimNumber
	}
	return 0
}

func (x *GetListRequest) GetStartSemesterId() string {
	if x != nil {
		return x.StartSemesterId
	}
	return ""
}

func (x *GetListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetListRequest) GetSupervisorLecturerId() string {
	if x != nil {
		return x.SupervisorLecturerId
	}
	return ""
}

type GetListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Topic                     string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic"`
	Title                     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	Status                    string `protobuf:"bytes,4,opt,name=status,proto3" json:"status"`
	StudentId                 string `protobuf:"bytes,5,opt,name=student_id,json=studentId,proto3" json:"student_id"`
	StudentName               string `protobuf:"bytes,6,opt,name=student_name,json=studentName,proto3" json:"student_name"`
	StudentNimNumber          int64  `protobuf:"varint,7,opt,name=student_nim_number,json=studentNimNumber,proto3" json:"student_nim_number"`
	StudentStatus             string `protobuf:"bytes,8,opt,name=student_status,json=studentStatus,proto3" json:"student_status"`
	StudyProgramId            string `protobuf:"bytes,9,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	StudyProgramName          string `protobuf:"bytes,10,opt,name=study_program_name,json=studyProgramName,proto3" json:"study_program_name"`
	DiktiStudyProgramCode     string `protobuf:"bytes,11,opt,name=dikti_study_program_code,json=diktiStudyProgramCode,proto3" json:"dikti_study_program_code"`
	DiktiStudyProgramType     string `protobuf:"bytes,12,opt,name=dikti_study_program_type,json=diktiStudyProgramType,proto3" json:"dikti_study_program_type"`
	StudyLevelShortName       string `protobuf:"bytes,13,opt,name=study_level_short_name,json=studyLevelShortName,proto3" json:"study_level_short_name"`
	StudentHasThesisStudyPlan bool   `protobuf:"varint,14,opt,name=student_has_thesis_study_plan,json=studentHasThesisStudyPlan,proto3" json:"student_has_thesis_study_plan"`
	StartSemesterId           string `protobuf:"bytes,15,opt,name=start_semester_id,json=startSemesterId,proto3" json:"start_semester_id"`
	StartSemesterType         string `protobuf:"bytes,16,opt,name=start_semester_type,json=startSemesterType,proto3" json:"start_semester_type"`
	StartSemesterSchoolYear   string `protobuf:"bytes,17,opt,name=start_semester_school_year,json=startSemesterSchoolYear,proto3" json:"start_semester_school_year"`
}

func (x *GetListResponseData) Reset() {
	*x = GetListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponseData) ProtoMessage() {}

func (x *GetListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponseData.ProtoReflect.Descriptor instead.
func (*GetListResponseData) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{3}
}

func (x *GetListResponseData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetListResponseData) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *GetListResponseData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetListResponseData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetListResponseData) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *GetListResponseData) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *GetListResponseData) GetStudentNimNumber() int64 {
	if x != nil {
		return x.StudentNimNumber
	}
	return 0
}

func (x *GetListResponseData) GetStudentStatus() string {
	if x != nil {
		return x.StudentStatus
	}
	return ""
}

func (x *GetListResponseData) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *GetListResponseData) GetStudyProgramName() string {
	if x != nil {
		return x.StudyProgramName
	}
	return ""
}

func (x *GetListResponseData) GetDiktiStudyProgramCode() string {
	if x != nil {
		return x.DiktiStudyProgramCode
	}
	return ""
}

func (x *GetListResponseData) GetDiktiStudyProgramType() string {
	if x != nil {
		return x.DiktiStudyProgramType
	}
	return ""
}

func (x *GetListResponseData) GetStudyLevelShortName() string {
	if x != nil {
		return x.StudyLevelShortName
	}
	return ""
}

func (x *GetListResponseData) GetStudentHasThesisStudyPlan() bool {
	if x != nil {
		return x.StudentHasThesisStudyPlan
	}
	return false
}

func (x *GetListResponseData) GetStartSemesterId() string {
	if x != nil {
		return x.StartSemesterId
	}
	return ""
}

func (x *GetListResponseData) GetStartSemesterType() string {
	if x != nil {
		return x.StartSemesterType
	}
	return ""
}

func (x *GetListResponseData) GetStartSemesterSchoolYear() string {
	if x != nil {
		return x.StartSemesterSchoolYear
	}
	return ""
}

type GetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta       *Meta                  `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Pagination *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	Data       []*GetListResponseData `protobuf:"bytes,3,rep,name=data,proto3" json:"data"`
}

func (x *GetListResponse) Reset() {
	*x = GetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponse) ProtoMessage() {}

func (x *GetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponse.ProtoReflect.Descriptor instead.
func (*GetListResponse) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{4}
}

func (x *GetListResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListResponse) GetData() []*GetListResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *GetDetailRequest) Reset() {
	*x = GetDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailRequest) ProtoMessage() {}

func (x *GetDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailRequest.ProtoReflect.Descriptor instead.
func (*GetDetailRequest) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{5}
}

func (x *GetDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDetailResponseDataFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	FileUrl         string `protobuf:"bytes,2,opt,name=file_url,json=fileUrl,proto3" json:"file_url"`
	FilePath        string `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path"`
	FilePathType    string `protobuf:"bytes,4,opt,name=file_path_type,json=filePathType,proto3" json:"file_path_type"`
	FileDescription string `protobuf:"bytes,5,opt,name=file_description,json=fileDescription,proto3" json:"file_description"`
}

func (x *GetDetailResponseDataFile) Reset() {
	*x = GetDetailResponseDataFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailResponseDataFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailResponseDataFile) ProtoMessage() {}

func (x *GetDetailResponseDataFile) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailResponseDataFile.ProtoReflect.Descriptor instead.
func (*GetDetailResponseDataFile) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{6}
}

func (x *GetDetailResponseDataFile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDetailResponseDataFile) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *GetDetailResponseDataFile) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *GetDetailResponseDataFile) GetFilePathType() string {
	if x != nil {
		return x.FilePathType
	}
	return ""
}

func (x *GetDetailResponseDataFile) GetFileDescription() string {
	if x != nil {
		return x.FileDescription
	}
	return ""
}

type GetDetailResponseDataThesisSupervisor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	LecturerId               string `protobuf:"bytes,2,opt,name=lecturer_id,json=lecturerId,proto3" json:"lecturer_id"`
	LecturerName             string `protobuf:"bytes,3,opt,name=lecturer_name,json=lecturerName,proto3" json:"lecturer_name"`
	LecturerFrontTitle       string `protobuf:"bytes,4,opt,name=lecturer_front_title,json=lecturerFrontTitle,proto3" json:"lecturer_front_title"`
	LecturerBackDegree       string `protobuf:"bytes,5,opt,name=lecturer_back_degree,json=lecturerBackDegree,proto3" json:"lecturer_back_degree"`
	ThesisSupervisorRoleId   string `protobuf:"bytes,6,opt,name=thesis_supervisor_role_id,json=thesisSupervisorRoleId,proto3" json:"thesis_supervisor_role_id"`
	ThesisSupervisorRoleName string `protobuf:"bytes,7,opt,name=thesis_supervisor_role_name,json=thesisSupervisorRoleName,proto3" json:"thesis_supervisor_role_name"`
	ThesisSupervisorRoleSort uint32 `protobuf:"varint,8,opt,name=thesis_supervisor_role_sort,json=thesisSupervisorRoleSort,proto3" json:"thesis_supervisor_role_sort"`
}

func (x *GetDetailResponseDataThesisSupervisor) Reset() {
	*x = GetDetailResponseDataThesisSupervisor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailResponseDataThesisSupervisor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailResponseDataThesisSupervisor) ProtoMessage() {}

func (x *GetDetailResponseDataThesisSupervisor) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailResponseDataThesisSupervisor.ProtoReflect.Descriptor instead.
func (*GetDetailResponseDataThesisSupervisor) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{7}
}

func (x *GetDetailResponseDataThesisSupervisor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDetailResponseDataThesisSupervisor) GetLecturerId() string {
	if x != nil {
		return x.LecturerId
	}
	return ""
}

func (x *GetDetailResponseDataThesisSupervisor) GetLecturerName() string {
	if x != nil {
		return x.LecturerName
	}
	return ""
}

func (x *GetDetailResponseDataThesisSupervisor) GetLecturerFrontTitle() string {
	if x != nil {
		return x.LecturerFrontTitle
	}
	return ""
}

func (x *GetDetailResponseDataThesisSupervisor) GetLecturerBackDegree() string {
	if x != nil {
		return x.LecturerBackDegree
	}
	return ""
}

func (x *GetDetailResponseDataThesisSupervisor) GetThesisSupervisorRoleId() string {
	if x != nil {
		return x.ThesisSupervisorRoleId
	}
	return ""
}

func (x *GetDetailResponseDataThesisSupervisor) GetThesisSupervisorRoleName() string {
	if x != nil {
		return x.ThesisSupervisorRoleName
	}
	return ""
}

func (x *GetDetailResponseDataThesisSupervisor) GetThesisSupervisorRoleSort() uint32 {
	if x != nil {
		return x.ThesisSupervisorRoleSort
	}
	return 0
}

type GetDetailResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	StudentId                 string                                   `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id"`
	StudentName               string                                   `protobuf:"bytes,3,opt,name=student_name,json=studentName,proto3" json:"student_name"`
	StudentNimNumber          int64                                    `protobuf:"varint,4,opt,name=student_nim_number,json=studentNimNumber,proto3" json:"student_nim_number"`
	StartSemesterId           string                                   `protobuf:"bytes,5,opt,name=start_semester_id,json=startSemesterId,proto3" json:"start_semester_id"`
	StartSemesterType         string                                   `protobuf:"bytes,6,opt,name=start_semester_type,json=startSemesterType,proto3" json:"start_semester_type"`
	StartSemesterSchoolYear   string                                   `protobuf:"bytes,7,opt,name=start_semester_school_year,json=startSemesterSchoolYear,proto3" json:"start_semester_school_year"`
	FinishSemesterId          string                                   `protobuf:"bytes,8,opt,name=finish_semester_id,json=finishSemesterId,proto3" json:"finish_semester_id"`
	FinishSemesterType        string                                   `protobuf:"bytes,9,opt,name=finish_semester_type,json=finishSemesterType,proto3" json:"finish_semester_type"`
	FinishSemesterSchoolYear  string                                   `protobuf:"bytes,10,opt,name=finish_semester_school_year,json=finishSemesterSchoolYear,proto3" json:"finish_semester_school_year"`
	Topic                     string                                   `protobuf:"bytes,11,opt,name=topic,proto3" json:"topic"`
	Title                     string                                   `protobuf:"bytes,12,opt,name=title,proto3" json:"title"`
	EnglishTitle              string                                   `protobuf:"bytes,13,opt,name=english_title,json=englishTitle,proto3" json:"english_title"`
	StartDate                 string                                   `protobuf:"bytes,14,opt,name=start_date,json=startDate,proto3" json:"start_date"`
	FinishDate                string                                   `protobuf:"bytes,15,opt,name=finish_date,json=finishDate,proto3" json:"finish_date"`
	Remarks                   string                                   `protobuf:"bytes,16,opt,name=remarks,proto3" json:"remarks"`
	IsJointThesis             bool                                     `protobuf:"varint,17,opt,name=is_joint_thesis,json=isJointThesis,proto3" json:"is_joint_thesis"`
	Status                    string                                   `protobuf:"bytes,18,opt,name=status,proto3" json:"status"`
	ProposalSeminarDate       string                                   `protobuf:"bytes,19,opt,name=proposal_seminar_date,json=proposalSeminarDate,proto3" json:"proposal_seminar_date"`
	ProposalCertificateNumber string                                   `protobuf:"bytes,20,opt,name=proposal_certificate_number,json=proposalCertificateNumber,proto3" json:"proposal_certificate_number"`
	ProposalCertificateDate   string                                   `protobuf:"bytes,21,opt,name=proposal_certificate_date,json=proposalCertificateDate,proto3" json:"proposal_certificate_date"`
	ThesisDefenseCount        uint32                                   `protobuf:"varint,22,opt,name=thesis_defense_count,json=thesisDefenseCount,proto3" json:"thesis_defense_count"`
	GradePoint                float64                                  `protobuf:"fixed64,23,opt,name=grade_point,json=gradePoint,proto3" json:"grade_point"`
	GradeCode                 string                                   `protobuf:"bytes,24,opt,name=grade_code,json=gradeCode,proto3" json:"grade_code"`
	Files                     []*GetDetailResponseDataFile             `protobuf:"bytes,25,rep,name=files,proto3" json:"files"`
	ThesisSupervisors         []*GetDetailResponseDataThesisSupervisor `protobuf:"bytes,26,rep,name=thesis_supervisors,json=thesisSupervisors,proto3" json:"thesis_supervisors"`
	StudyProgramId            string                                   `protobuf:"bytes,27,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
}

func (x *GetDetailResponseData) Reset() {
	*x = GetDetailResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailResponseData) ProtoMessage() {}

func (x *GetDetailResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailResponseData.ProtoReflect.Descriptor instead.
func (*GetDetailResponseData) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{8}
}

func (x *GetDetailResponseData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDetailResponseData) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *GetDetailResponseData) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *GetDetailResponseData) GetStudentNimNumber() int64 {
	if x != nil {
		return x.StudentNimNumber
	}
	return 0
}

func (x *GetDetailResponseData) GetStartSemesterId() string {
	if x != nil {
		return x.StartSemesterId
	}
	return ""
}

func (x *GetDetailResponseData) GetStartSemesterType() string {
	if x != nil {
		return x.StartSemesterType
	}
	return ""
}

func (x *GetDetailResponseData) GetStartSemesterSchoolYear() string {
	if x != nil {
		return x.StartSemesterSchoolYear
	}
	return ""
}

func (x *GetDetailResponseData) GetFinishSemesterId() string {
	if x != nil {
		return x.FinishSemesterId
	}
	return ""
}

func (x *GetDetailResponseData) GetFinishSemesterType() string {
	if x != nil {
		return x.FinishSemesterType
	}
	return ""
}

func (x *GetDetailResponseData) GetFinishSemesterSchoolYear() string {
	if x != nil {
		return x.FinishSemesterSchoolYear
	}
	return ""
}

func (x *GetDetailResponseData) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *GetDetailResponseData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetDetailResponseData) GetEnglishTitle() string {
	if x != nil {
		return x.EnglishTitle
	}
	return ""
}

func (x *GetDetailResponseData) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetDetailResponseData) GetFinishDate() string {
	if x != nil {
		return x.FinishDate
	}
	return ""
}

func (x *GetDetailResponseData) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *GetDetailResponseData) GetIsJointThesis() bool {
	if x != nil {
		return x.IsJointThesis
	}
	return false
}

func (x *GetDetailResponseData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetDetailResponseData) GetProposalSeminarDate() string {
	if x != nil {
		return x.ProposalSeminarDate
	}
	return ""
}

func (x *GetDetailResponseData) GetProposalCertificateNumber() string {
	if x != nil {
		return x.ProposalCertificateNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetProposalCertificateDate() string {
	if x != nil {
		return x.ProposalCertificateDate
	}
	return ""
}

func (x *GetDetailResponseData) GetThesisDefenseCount() uint32 {
	if x != nil {
		return x.ThesisDefenseCount
	}
	return 0
}

func (x *GetDetailResponseData) GetGradePoint() float64 {
	if x != nil {
		return x.GradePoint
	}
	return 0
}

func (x *GetDetailResponseData) GetGradeCode() string {
	if x != nil {
		return x.GradeCode
	}
	return ""
}

func (x *GetDetailResponseData) GetFiles() []*GetDetailResponseDataFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *GetDetailResponseData) GetThesisSupervisors() []*GetDetailResponseDataThesisSupervisor {
	if x != nil {
		return x.ThesisSupervisors
	}
	return nil
}

func (x *GetDetailResponseData) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

type GetDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                  `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *GetDetailResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *GetDetailResponse) Reset() {
	*x = GetDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailResponse) ProtoMessage() {}

func (x *GetDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailResponse.ProtoReflect.Descriptor instead.
func (*GetDetailResponse) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{9}
}

func (x *GetDetailResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetDetailResponse) GetData() *GetDetailResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateRequestThesisSupervisor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LecturerId             string `protobuf:"bytes,1,opt,name=lecturer_id,json=lecturerId,proto3" json:"lecturer_id"`
	ThesisSupervisorRoleId string `protobuf:"bytes,2,opt,name=thesis_supervisor_role_id,json=thesisSupervisorRoleId,proto3" json:"thesis_supervisor_role_id"`
}

func (x *CreateRequestThesisSupervisor) Reset() {
	*x = CreateRequestThesisSupervisor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequestThesisSupervisor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequestThesisSupervisor) ProtoMessage() {}

func (x *CreateRequestThesisSupervisor) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequestThesisSupervisor.ProtoReflect.Descriptor instead.
func (*CreateRequestThesisSupervisor) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{10}
}

func (x *CreateRequestThesisSupervisor) GetLecturerId() string {
	if x != nil {
		return x.LecturerId
	}
	return ""
}

func (x *CreateRequestThesisSupervisor) GetThesisSupervisorRoleId() string {
	if x != nil {
		return x.ThesisSupervisorRoleId
	}
	return ""
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId                 string                           `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id"`
	Topic                     string                           `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic"`
	Status                    string                           `protobuf:"bytes,3,opt,name=status,proto3" json:"status"`
	Title                     string                           `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	EnglishTitle              string                           `protobuf:"bytes,5,opt,name=english_title,json=englishTitle,proto3" json:"english_title"`
	StartSemesterId           string                           `protobuf:"bytes,6,opt,name=start_semester_id,json=startSemesterId,proto3" json:"start_semester_id"`
	StartDate                 string                           `protobuf:"bytes,7,opt,name=start_date,json=startDate,proto3" json:"start_date"`
	Remarks                   string                           `protobuf:"bytes,8,opt,name=remarks,proto3" json:"remarks"`
	IsJointThesis             bool                             `protobuf:"varint,9,opt,name=is_joint_thesis,json=isJointThesis,proto3" json:"is_joint_thesis"`
	FilePath                  string                           `protobuf:"bytes,10,opt,name=file_path,json=filePath,proto3" json:"file_path"`
	FilePathType              string                           `protobuf:"bytes,11,opt,name=file_path_type,json=filePathType,proto3" json:"file_path_type"`
	FileDescription           string                           `protobuf:"bytes,12,opt,name=file_description,json=fileDescription,proto3" json:"file_description"`
	ProposalSeminarDate       string                           `protobuf:"bytes,13,opt,name=proposal_seminar_date,json=proposalSeminarDate,proto3" json:"proposal_seminar_date"`
	ProposalCertificateNumber string                           `protobuf:"bytes,14,opt,name=proposal_certificate_number,json=proposalCertificateNumber,proto3" json:"proposal_certificate_number"`
	ProposalCertificateDate   string                           `protobuf:"bytes,15,opt,name=proposal_certificate_date,json=proposalCertificateDate,proto3" json:"proposal_certificate_date"`
	ThesisSupervisors         []*CreateRequestThesisSupervisor `protobuf:"bytes,16,rep,name=thesis_supervisors,json=thesisSupervisors,proto3" json:"thesis_supervisors"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{11}
}

func (x *CreateRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *CreateRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *CreateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateRequest) GetEnglishTitle() string {
	if x != nil {
		return x.EnglishTitle
	}
	return ""
}

func (x *CreateRequest) GetStartSemesterId() string {
	if x != nil {
		return x.StartSemesterId
	}
	return ""
}

func (x *CreateRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CreateRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *CreateRequest) GetIsJointThesis() bool {
	if x != nil {
		return x.IsJointThesis
	}
	return false
}

func (x *CreateRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *CreateRequest) GetFilePathType() string {
	if x != nil {
		return x.FilePathType
	}
	return ""
}

func (x *CreateRequest) GetFileDescription() string {
	if x != nil {
		return x.FileDescription
	}
	return ""
}

func (x *CreateRequest) GetProposalSeminarDate() string {
	if x != nil {
		return x.ProposalSeminarDate
	}
	return ""
}

func (x *CreateRequest) GetProposalCertificateNumber() string {
	if x != nil {
		return x.ProposalCertificateNumber
	}
	return ""
}

func (x *CreateRequest) GetProposalCertificateDate() string {
	if x != nil {
		return x.ProposalCertificateDate
	}
	return ""
}

func (x *CreateRequest) GetThesisSupervisors() []*CreateRequestThesisSupervisor {
	if x != nil {
		return x.ThesisSupervisors
	}
	return nil
}

type CreateResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateResponseData) Reset() {
	*x = CreateResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponseData) ProtoMessage() {}

func (x *CreateResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponseData.ProtoReflect.Descriptor instead.
func (*CreateResponseData) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{12}
}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *CreateResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{13}
}

func (x *CreateResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *CreateResponse) GetData() *CreateResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateRequestFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath        string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path"`
	FilePathType    string `protobuf:"bytes,2,opt,name=file_path_type,json=filePathType,proto3" json:"file_path_type"`
	FileDescription string `protobuf:"bytes,3,opt,name=file_description,json=fileDescription,proto3" json:"file_description"`
}

func (x *UpdateRequestFile) Reset() {
	*x = UpdateRequestFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequestFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequestFile) ProtoMessage() {}

func (x *UpdateRequestFile) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequestFile.ProtoReflect.Descriptor instead.
func (*UpdateRequestFile) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateRequestFile) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *UpdateRequestFile) GetFilePathType() string {
	if x != nil {
		return x.FilePathType
	}
	return ""
}

func (x *UpdateRequestFile) GetFileDescription() string {
	if x != nil {
		return x.FileDescription
	}
	return ""
}

type UpdateRequestThesisSupervisor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LecturerId             string `protobuf:"bytes,1,opt,name=lecturer_id,json=lecturerId,proto3" json:"lecturer_id"`
	ThesisSupervisorRoleId string `protobuf:"bytes,2,opt,name=thesis_supervisor_role_id,json=thesisSupervisorRoleId,proto3" json:"thesis_supervisor_role_id"`
}

func (x *UpdateRequestThesisSupervisor) Reset() {
	*x = UpdateRequestThesisSupervisor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequestThesisSupervisor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequestThesisSupervisor) ProtoMessage() {}

func (x *UpdateRequestThesisSupervisor) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequestThesisSupervisor.ProtoReflect.Descriptor instead.
func (*UpdateRequestThesisSupervisor) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateRequestThesisSupervisor) GetLecturerId() string {
	if x != nil {
		return x.LecturerId
	}
	return ""
}

func (x *UpdateRequestThesisSupervisor) GetThesisSupervisorRoleId() string {
	if x != nil {
		return x.ThesisSupervisorRoleId
	}
	return ""
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	StudentId                 string                           `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id"`
	StartSemesterId           string                           `protobuf:"bytes,3,opt,name=start_semester_id,json=startSemesterId,proto3" json:"start_semester_id"`
	FinishSemesterId          string                           `protobuf:"bytes,4,opt,name=finish_semester_id,json=finishSemesterId,proto3" json:"finish_semester_id"`
	Topic                     string                           `protobuf:"bytes,5,opt,name=topic,proto3" json:"topic"`
	Title                     string                           `protobuf:"bytes,6,opt,name=title,proto3" json:"title"`
	EnglishTitle              string                           `protobuf:"bytes,7,opt,name=english_title,json=englishTitle,proto3" json:"english_title"`
	StartDate                 string                           `protobuf:"bytes,8,opt,name=start_date,json=startDate,proto3" json:"start_date"`
	FinishDate                string                           `protobuf:"bytes,9,opt,name=finish_date,json=finishDate,proto3" json:"finish_date"`
	Remarks                   string                           `protobuf:"bytes,10,opt,name=remarks,proto3" json:"remarks"`
	IsJointThesis             bool                             `protobuf:"varint,11,opt,name=is_joint_thesis,json=isJointThesis,proto3" json:"is_joint_thesis"`
	Status                    string                           `protobuf:"bytes,12,opt,name=status,proto3" json:"status"`
	ProposalSeminarDate       string                           `protobuf:"bytes,13,opt,name=proposal_seminar_date,json=proposalSeminarDate,proto3" json:"proposal_seminar_date"`
	ProposalCertificateNumber string                           `protobuf:"bytes,14,opt,name=proposal_certificate_number,json=proposalCertificateNumber,proto3" json:"proposal_certificate_number"`
	ProposalCertificateDate   string                           `protobuf:"bytes,15,opt,name=proposal_certificate_date,json=proposalCertificateDate,proto3" json:"proposal_certificate_date"`
	Files                     []*UpdateRequestFile             `protobuf:"bytes,16,rep,name=files,proto3" json:"files"`
	ThesisSupervisors         []*UpdateRequestThesisSupervisor `protobuf:"bytes,17,rep,name=thesis_supervisors,json=thesisSupervisors,proto3" json:"thesis_supervisors"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *UpdateRequest) GetStartSemesterId() string {
	if x != nil {
		return x.StartSemesterId
	}
	return ""
}

func (x *UpdateRequest) GetFinishSemesterId() string {
	if x != nil {
		return x.FinishSemesterId
	}
	return ""
}

func (x *UpdateRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *UpdateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateRequest) GetEnglishTitle() string {
	if x != nil {
		return x.EnglishTitle
	}
	return ""
}

func (x *UpdateRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *UpdateRequest) GetFinishDate() string {
	if x != nil {
		return x.FinishDate
	}
	return ""
}

func (x *UpdateRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *UpdateRequest) GetIsJointThesis() bool {
	if x != nil {
		return x.IsJointThesis
	}
	return false
}

func (x *UpdateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateRequest) GetProposalSeminarDate() string {
	if x != nil {
		return x.ProposalSeminarDate
	}
	return ""
}

func (x *UpdateRequest) GetProposalCertificateNumber() string {
	if x != nil {
		return x.ProposalCertificateNumber
	}
	return ""
}

func (x *UpdateRequest) GetProposalCertificateDate() string {
	if x != nil {
		return x.ProposalCertificateDate
	}
	return ""
}

func (x *UpdateRequest) GetFiles() []*UpdateRequestFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *UpdateRequest) GetThesisSupervisors() []*UpdateRequestThesisSupervisor {
	if x != nil {
		return x.ThesisSupervisors
	}
	return nil
}

type UpdateResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateResponseData) Reset() {
	*x = UpdateResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponseData) ProtoMessage() {}

func (x *UpdateResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponseData.ProtoReflect.Descriptor instead.
func (*UpdateResponseData) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{17}
}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *UpdateResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UpdateResponse) GetData() *UpdateResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResponseData) Reset() {
	*x = DeleteResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponseData) ProtoMessage() {}

func (x *DeleteResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponseData.ProtoReflect.Descriptor instead.
func (*DeleteResponseData) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{20}
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *DeleteResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DeleteResponse) GetData() *DeleteResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type RegisterThesisDefenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id"`
}

func (x *RegisterThesisDefenseRequest) Reset() {
	*x = RegisterThesisDefenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterThesisDefenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterThesisDefenseRequest) ProtoMessage() {}

func (x *RegisterThesisDefenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterThesisDefenseRequest.ProtoReflect.Descriptor instead.
func (*RegisterThesisDefenseRequest) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{22}
}

func (x *RegisterThesisDefenseRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

type RegisterThesisDefenseResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterThesisDefenseResponseData) Reset() {
	*x = RegisterThesisDefenseResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterThesisDefenseResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterThesisDefenseResponseData) ProtoMessage() {}

func (x *RegisterThesisDefenseResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterThesisDefenseResponseData.ProtoReflect.Descriptor instead.
func (*RegisterThesisDefenseResponseData) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{23}
}

type RegisterThesisDefenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                              `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *RegisterThesisDefenseResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *RegisterThesisDefenseResponse) Reset() {
	*x = RegisterThesisDefenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterThesisDefenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterThesisDefenseResponse) ProtoMessage() {}

func (x *RegisterThesisDefenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterThesisDefenseResponse.ProtoReflect.Descriptor instead.
func (*RegisterThesisDefenseResponse) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{24}
}

func (x *RegisterThesisDefenseResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RegisterThesisDefenseResponse) GetData() *RegisterThesisDefenseResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetListThesisDefenseRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page            uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit           uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Search          string `protobuf:"bytes,3,opt,name=search,proto3" json:"search"`
	StudyProgramId  string `protobuf:"bytes,4,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	NimNumber       int64  `protobuf:"varint,5,opt,name=nim_number,json=nimNumber,proto3" json:"nim_number"`
	StartSemesterId string `protobuf:"bytes,6,opt,name=start_semester_id,json=startSemesterId,proto3" json:"start_semester_id"`
}

func (x *GetListThesisDefenseRequestRequest) Reset() {
	*x = GetListThesisDefenseRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListThesisDefenseRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListThesisDefenseRequestRequest) ProtoMessage() {}

func (x *GetListThesisDefenseRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListThesisDefenseRequestRequest.ProtoReflect.Descriptor instead.
func (*GetListThesisDefenseRequestRequest) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{25}
}

func (x *GetListThesisDefenseRequestRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetListThesisDefenseRequestRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetListThesisDefenseRequestRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetListThesisDefenseRequestRequest) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *GetListThesisDefenseRequestRequest) GetNimNumber() int64 {
	if x != nil {
		return x.NimNumber
	}
	return 0
}

func (x *GetListThesisDefenseRequestRequest) GetStartSemesterId() string {
	if x != nil {
		return x.StartSemesterId
	}
	return ""
}

type GetListThesisDefenseRequestResponseDataExaminer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	LecturerId             string `protobuf:"bytes,2,opt,name=lecturer_id,json=lecturerId,proto3" json:"lecturer_id"`
	LecturerName           string `protobuf:"bytes,3,opt,name=lecturer_name,json=lecturerName,proto3" json:"lecturer_name"`
	LecturerFrontTitle     string `protobuf:"bytes,4,opt,name=lecturer_front_title,json=lecturerFrontTitle,proto3" json:"lecturer_front_title"`
	LecturerBackDegree     string `protobuf:"bytes,5,opt,name=lecturer_back_degree,json=lecturerBackDegree,proto3" json:"lecturer_back_degree"`
	ThesisExaminerRoleId   string `protobuf:"bytes,6,opt,name=thesis_examiner_role_id,json=thesisExaminerRoleId,proto3" json:"thesis_examiner_role_id"`
	ThesisExaminerRoleName string `protobuf:"bytes,7,opt,name=thesis_examiner_role_name,json=thesisExaminerRoleName,proto3" json:"thesis_examiner_role_name"`
}

func (x *GetListThesisDefenseRequestResponseDataExaminer) Reset() {
	*x = GetListThesisDefenseRequestResponseDataExaminer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListThesisDefenseRequestResponseDataExaminer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListThesisDefenseRequestResponseDataExaminer) ProtoMessage() {}

func (x *GetListThesisDefenseRequestResponseDataExaminer) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListThesisDefenseRequestResponseDataExaminer.ProtoReflect.Descriptor instead.
func (*GetListThesisDefenseRequestResponseDataExaminer) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{26}
}

func (x *GetListThesisDefenseRequestResponseDataExaminer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseDataExaminer) GetLecturerId() string {
	if x != nil {
		return x.LecturerId
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseDataExaminer) GetLecturerName() string {
	if x != nil {
		return x.LecturerName
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseDataExaminer) GetLecturerFrontTitle() string {
	if x != nil {
		return x.LecturerFrontTitle
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseDataExaminer) GetLecturerBackDegree() string {
	if x != nil {
		return x.LecturerBackDegree
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseDataExaminer) GetThesisExaminerRoleId() string {
	if x != nil {
		return x.ThesisExaminerRoleId
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseDataExaminer) GetThesisExaminerRoleName() string {
	if x != nil {
		return x.ThesisExaminerRoleName
	}
	return ""
}

type GetListThesisDefenseRequestResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           string                                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	StudentId                    string                                             `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id"`
	StudentName                  string                                             `protobuf:"bytes,3,opt,name=student_name,json=studentName,proto3" json:"student_name"`
	StudentNimNumber             int64                                              `protobuf:"varint,4,opt,name=student_nim_number,json=studentNimNumber,proto3" json:"student_nim_number"`
	StudentStatus                string                                             `protobuf:"bytes,5,opt,name=student_status,json=studentStatus,proto3" json:"student_status"`
	StudyProgramId               string                                             `protobuf:"bytes,6,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	StudyProgramName             string                                             `protobuf:"bytes,7,opt,name=study_program_name,json=studyProgramName,proto3" json:"study_program_name"`
	DiktiStudyProgramCode        string                                             `protobuf:"bytes,8,opt,name=dikti_study_program_code,json=diktiStudyProgramCode,proto3" json:"dikti_study_program_code"`
	DiktiStudyProgramType        string                                             `protobuf:"bytes,9,opt,name=dikti_study_program_type,json=diktiStudyProgramType,proto3" json:"dikti_study_program_type"`
	StudyLevelShortName          string                                             `protobuf:"bytes,10,opt,name=study_level_short_name,json=studyLevelShortName,proto3" json:"study_level_short_name"`
	ThesisId                     string                                             `protobuf:"bytes,11,opt,name=thesis_id,json=thesisId,proto3" json:"thesis_id"`
	ThesisTitle                  string                                             `protobuf:"bytes,12,opt,name=thesis_title,json=thesisTitle,proto3" json:"thesis_title"`
	ThesisStatus                 string                                             `protobuf:"bytes,13,opt,name=thesis_status,json=thesisStatus,proto3" json:"thesis_status"`
	ThesisDefenseCount           uint32                                             `protobuf:"varint,14,opt,name=thesis_defense_count,json=thesisDefenseCount,proto3" json:"thesis_defense_count"`
	ThesisDefenseId              string                                             `protobuf:"bytes,15,opt,name=thesis_defense_id,json=thesisDefenseId,proto3" json:"thesis_defense_id"`
	ThesisDefensePlanDate        string                                             `protobuf:"bytes,16,opt,name=thesis_defense_plan_date,json=thesisDefensePlanDate,proto3" json:"thesis_defense_plan_date"`
	ThesisDefensePlanStartTime   uint32                                             `protobuf:"varint,17,opt,name=thesis_defense_plan_start_time,json=thesisDefensePlanStartTime,proto3" json:"thesis_defense_plan_start_time"`
	ThesisDefensePlanEndTime     uint32                                             `protobuf:"varint,18,opt,name=thesis_defense_plan_end_time,json=thesisDefensePlanEndTime,proto3" json:"thesis_defense_plan_end_time"`
	ThesisDefenseActualDate      string                                             `protobuf:"bytes,19,opt,name=thesis_defense_actual_date,json=thesisDefenseActualDate,proto3" json:"thesis_defense_actual_date"`
	ThesisDefenseActualStartTime uint32                                             `protobuf:"varint,20,opt,name=thesis_defense_actual_start_time,json=thesisDefenseActualStartTime,proto3" json:"thesis_defense_actual_start_time"`
	ThesisDefenseActualEndTime   uint32                                             `protobuf:"varint,21,opt,name=thesis_defense_actual_end_time,json=thesisDefenseActualEndTime,proto3" json:"thesis_defense_actual_end_time"`
	ThesisDefenseIsPassed        bool                                               `protobuf:"varint,22,opt,name=thesis_defense_is_passed,json=thesisDefenseIsPassed,proto3" json:"thesis_defense_is_passed"`
	CreatedAt                    string                                             `protobuf:"bytes,23,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	Examiners                    []*GetListThesisDefenseRequestResponseDataExaminer `protobuf:"bytes,24,rep,name=examiners,proto3" json:"examiners"`
	ThesisDefenseRoomId          string                                             `protobuf:"bytes,25,opt,name=thesis_defense_room_id,json=thesisDefenseRoomId,proto3" json:"thesis_defense_room_id"`
	ThesisDefenseRoomName        string                                             `protobuf:"bytes,26,opt,name=thesis_defense_room_name,json=thesisDefenseRoomName,proto3" json:"thesis_defense_room_name"`
	StudyLevelId                 string                                             `protobuf:"bytes,27,opt,name=study_level_id,json=studyLevelId,proto3" json:"study_level_id"`
	ThesisDefenseRevision        string                                             `protobuf:"bytes,28,opt,name=thesis_defense_revision,json=thesisDefenseRevision,proto3" json:"thesis_defense_revision"`
	ThesisGradeCode              string                                             `protobuf:"bytes,29,opt,name=thesis_grade_code,json=thesisGradeCode,proto3" json:"thesis_grade_code"`
}

func (x *GetListThesisDefenseRequestResponseData) Reset() {
	*x = GetListThesisDefenseRequestResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListThesisDefenseRequestResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListThesisDefenseRequestResponseData) ProtoMessage() {}

func (x *GetListThesisDefenseRequestResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListThesisDefenseRequestResponseData.ProtoReflect.Descriptor instead.
func (*GetListThesisDefenseRequestResponseData) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{27}
}

func (x *GetListThesisDefenseRequestResponseData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetStudentNimNumber() int64 {
	if x != nil {
		return x.StudentNimNumber
	}
	return 0
}

func (x *GetListThesisDefenseRequestResponseData) GetStudentStatus() string {
	if x != nil {
		return x.StudentStatus
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetStudyProgramName() string {
	if x != nil {
		return x.StudyProgramName
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetDiktiStudyProgramCode() string {
	if x != nil {
		return x.DiktiStudyProgramCode
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetDiktiStudyProgramType() string {
	if x != nil {
		return x.DiktiStudyProgramType
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetStudyLevelShortName() string {
	if x != nil {
		return x.StudyLevelShortName
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetThesisId() string {
	if x != nil {
		return x.ThesisId
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetThesisTitle() string {
	if x != nil {
		return x.ThesisTitle
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetThesisStatus() string {
	if x != nil {
		return x.ThesisStatus
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetThesisDefenseCount() uint32 {
	if x != nil {
		return x.ThesisDefenseCount
	}
	return 0
}

func (x *GetListThesisDefenseRequestResponseData) GetThesisDefenseId() string {
	if x != nil {
		return x.ThesisDefenseId
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetThesisDefensePlanDate() string {
	if x != nil {
		return x.ThesisDefensePlanDate
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetThesisDefensePlanStartTime() uint32 {
	if x != nil {
		return x.ThesisDefensePlanStartTime
	}
	return 0
}

func (x *GetListThesisDefenseRequestResponseData) GetThesisDefensePlanEndTime() uint32 {
	if x != nil {
		return x.ThesisDefensePlanEndTime
	}
	return 0
}

func (x *GetListThesisDefenseRequestResponseData) GetThesisDefenseActualDate() string {
	if x != nil {
		return x.ThesisDefenseActualDate
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetThesisDefenseActualStartTime() uint32 {
	if x != nil {
		return x.ThesisDefenseActualStartTime
	}
	return 0
}

func (x *GetListThesisDefenseRequestResponseData) GetThesisDefenseActualEndTime() uint32 {
	if x != nil {
		return x.ThesisDefenseActualEndTime
	}
	return 0
}

func (x *GetListThesisDefenseRequestResponseData) GetThesisDefenseIsPassed() bool {
	if x != nil {
		return x.ThesisDefenseIsPassed
	}
	return false
}

func (x *GetListThesisDefenseRequestResponseData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetExaminers() []*GetListThesisDefenseRequestResponseDataExaminer {
	if x != nil {
		return x.Examiners
	}
	return nil
}

func (x *GetListThesisDefenseRequestResponseData) GetThesisDefenseRoomId() string {
	if x != nil {
		return x.ThesisDefenseRoomId
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetThesisDefenseRoomName() string {
	if x != nil {
		return x.ThesisDefenseRoomName
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetStudyLevelId() string {
	if x != nil {
		return x.StudyLevelId
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetThesisDefenseRevision() string {
	if x != nil {
		return x.ThesisDefenseRevision
	}
	return ""
}

func (x *GetListThesisDefenseRequestResponseData) GetThesisGradeCode() string {
	if x != nil {
		return x.ThesisGradeCode
	}
	return ""
}

type GetListThesisDefenseRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta       *Meta                                      `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Pagination *Pagination                                `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	Data       []*GetListThesisDefenseRequestResponseData `protobuf:"bytes,3,rep,name=data,proto3" json:"data"`
}

func (x *GetListThesisDefenseRequestResponse) Reset() {
	*x = GetListThesisDefenseRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListThesisDefenseRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListThesisDefenseRequestResponse) ProtoMessage() {}

func (x *GetListThesisDefenseRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListThesisDefenseRequestResponse.ProtoReflect.Descriptor instead.
func (*GetListThesisDefenseRequestResponse) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{28}
}

func (x *GetListThesisDefenseRequestResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetListThesisDefenseRequestResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListThesisDefenseRequestResponse) GetData() []*GetListThesisDefenseRequestResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateThesisDefenseRequestExaminer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LecturerId           string `protobuf:"bytes,1,opt,name=lecturer_id,json=lecturerId,proto3" json:"lecturer_id"`
	ThesisExaminerRoleId string `protobuf:"bytes,2,opt,name=thesis_examiner_role_id,json=thesisExaminerRoleId,proto3" json:"thesis_examiner_role_id"`
}

func (x *CreateThesisDefenseRequestExaminer) Reset() {
	*x = CreateThesisDefenseRequestExaminer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateThesisDefenseRequestExaminer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateThesisDefenseRequestExaminer) ProtoMessage() {}

func (x *CreateThesisDefenseRequestExaminer) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateThesisDefenseRequestExaminer.ProtoReflect.Descriptor instead.
func (*CreateThesisDefenseRequestExaminer) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{29}
}

func (x *CreateThesisDefenseRequestExaminer) GetLecturerId() string {
	if x != nil {
		return x.LecturerId
	}
	return ""
}

func (x *CreateThesisDefenseRequestExaminer) GetThesisExaminerRoleId() string {
	if x != nil {
		return x.ThesisExaminerRoleId
	}
	return ""
}

type CreateThesisDefenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThesisId      string                                `protobuf:"bytes,1,opt,name=thesis_id,json=thesisId,proto3" json:"thesis_id"`
	PlanDate      string                                `protobuf:"bytes,2,opt,name=plan_date,json=planDate,proto3" json:"plan_date"`
	PlanStartTime uint32                                `protobuf:"varint,3,opt,name=plan_start_time,json=planStartTime,proto3" json:"plan_start_time"`
	PlanEndTime   uint32                                `protobuf:"varint,4,opt,name=plan_end_time,json=planEndTime,proto3" json:"plan_end_time"`
	RoomId        string                                `protobuf:"bytes,5,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	Examiners     []*CreateThesisDefenseRequestExaminer `protobuf:"bytes,6,rep,name=examiners,proto3" json:"examiners"`
}

func (x *CreateThesisDefenseRequest) Reset() {
	*x = CreateThesisDefenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateThesisDefenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateThesisDefenseRequest) ProtoMessage() {}

func (x *CreateThesisDefenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateThesisDefenseRequest.ProtoReflect.Descriptor instead.
func (*CreateThesisDefenseRequest) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{30}
}

func (x *CreateThesisDefenseRequest) GetThesisId() string {
	if x != nil {
		return x.ThesisId
	}
	return ""
}

func (x *CreateThesisDefenseRequest) GetPlanDate() string {
	if x != nil {
		return x.PlanDate
	}
	return ""
}

func (x *CreateThesisDefenseRequest) GetPlanStartTime() uint32 {
	if x != nil {
		return x.PlanStartTime
	}
	return 0
}

func (x *CreateThesisDefenseRequest) GetPlanEndTime() uint32 {
	if x != nil {
		return x.PlanEndTime
	}
	return 0
}

func (x *CreateThesisDefenseRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *CreateThesisDefenseRequest) GetExaminers() []*CreateThesisDefenseRequestExaminer {
	if x != nil {
		return x.Examiners
	}
	return nil
}

type CreateThesisDefenseResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateThesisDefenseResponseData) Reset() {
	*x = CreateThesisDefenseResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateThesisDefenseResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateThesisDefenseResponseData) ProtoMessage() {}

func (x *CreateThesisDefenseResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateThesisDefenseResponseData.ProtoReflect.Descriptor instead.
func (*CreateThesisDefenseResponseData) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{31}
}

type CreateThesisDefenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                            `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *CreateThesisDefenseResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *CreateThesisDefenseResponse) Reset() {
	*x = CreateThesisDefenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateThesisDefenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateThesisDefenseResponse) ProtoMessage() {}

func (x *CreateThesisDefenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateThesisDefenseResponse.ProtoReflect.Descriptor instead.
func (*CreateThesisDefenseResponse) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{32}
}

func (x *CreateThesisDefenseResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *CreateThesisDefenseResponse) GetData() *CreateThesisDefenseResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateThesisDefenseRequestExaminer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LecturerId           string `protobuf:"bytes,1,opt,name=lecturer_id,json=lecturerId,proto3" json:"lecturer_id"`
	ThesisExaminerRoleId string `protobuf:"bytes,2,opt,name=thesis_examiner_role_id,json=thesisExaminerRoleId,proto3" json:"thesis_examiner_role_id"`
}

func (x *UpdateThesisDefenseRequestExaminer) Reset() {
	*x = UpdateThesisDefenseRequestExaminer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateThesisDefenseRequestExaminer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateThesisDefenseRequestExaminer) ProtoMessage() {}

func (x *UpdateThesisDefenseRequestExaminer) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateThesisDefenseRequestExaminer.ProtoReflect.Descriptor instead.
func (*UpdateThesisDefenseRequestExaminer) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateThesisDefenseRequestExaminer) GetLecturerId() string {
	if x != nil {
		return x.LecturerId
	}
	return ""
}

func (x *UpdateThesisDefenseRequestExaminer) GetThesisExaminerRoleId() string {
	if x != nil {
		return x.ThesisExaminerRoleId
	}
	return ""
}

type UpdateThesisDefenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                                `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	PlanDate        string                                `protobuf:"bytes,2,opt,name=plan_date,json=planDate,proto3" json:"plan_date"`
	PlanStartTime   uint32                                `protobuf:"varint,3,opt,name=plan_start_time,json=planStartTime,proto3" json:"plan_start_time"`
	PlanEndTime     uint32                                `protobuf:"varint,4,opt,name=plan_end_time,json=planEndTime,proto3" json:"plan_end_time"`
	RoomId          string                                `protobuf:"bytes,5,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	ActualDate      string                                `protobuf:"bytes,6,opt,name=actual_date,json=actualDate,proto3" json:"actual_date"`
	ActualStartTime uint32                                `protobuf:"varint,7,opt,name=actual_start_time,json=actualStartTime,proto3" json:"actual_start_time"`
	ActualEndTime   uint32                                `protobuf:"varint,8,opt,name=actual_end_time,json=actualEndTime,proto3" json:"actual_end_time"`
	IsPassed        bool                                  `protobuf:"varint,9,opt,name=is_passed,json=isPassed,proto3" json:"is_passed"`
	Revision        string                                `protobuf:"bytes,10,opt,name=revision,proto3" json:"revision"`
	GradeCode       string                                `protobuf:"bytes,11,opt,name=grade_code,json=gradeCode,proto3" json:"grade_code"`
	Examiners       []*UpdateThesisDefenseRequestExaminer `protobuf:"bytes,12,rep,name=examiners,proto3" json:"examiners"`
}

func (x *UpdateThesisDefenseRequest) Reset() {
	*x = UpdateThesisDefenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateThesisDefenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateThesisDefenseRequest) ProtoMessage() {}

func (x *UpdateThesisDefenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateThesisDefenseRequest.ProtoReflect.Descriptor instead.
func (*UpdateThesisDefenseRequest) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateThesisDefenseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateThesisDefenseRequest) GetPlanDate() string {
	if x != nil {
		return x.PlanDate
	}
	return ""
}

func (x *UpdateThesisDefenseRequest) GetPlanStartTime() uint32 {
	if x != nil {
		return x.PlanStartTime
	}
	return 0
}

func (x *UpdateThesisDefenseRequest) GetPlanEndTime() uint32 {
	if x != nil {
		return x.PlanEndTime
	}
	return 0
}

func (x *UpdateThesisDefenseRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *UpdateThesisDefenseRequest) GetActualDate() string {
	if x != nil {
		return x.ActualDate
	}
	return ""
}

func (x *UpdateThesisDefenseRequest) GetActualStartTime() uint32 {
	if x != nil {
		return x.ActualStartTime
	}
	return 0
}

func (x *UpdateThesisDefenseRequest) GetActualEndTime() uint32 {
	if x != nil {
		return x.ActualEndTime
	}
	return 0
}

func (x *UpdateThesisDefenseRequest) GetIsPassed() bool {
	if x != nil {
		return x.IsPassed
	}
	return false
}

func (x *UpdateThesisDefenseRequest) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *UpdateThesisDefenseRequest) GetGradeCode() string {
	if x != nil {
		return x.GradeCode
	}
	return ""
}

func (x *UpdateThesisDefenseRequest) GetExaminers() []*UpdateThesisDefenseRequestExaminer {
	if x != nil {
		return x.Examiners
	}
	return nil
}

type UpdateThesisDefenseResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateThesisDefenseResponseData) Reset() {
	*x = UpdateThesisDefenseResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateThesisDefenseResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateThesisDefenseResponseData) ProtoMessage() {}

func (x *UpdateThesisDefenseResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateThesisDefenseResponseData.ProtoReflect.Descriptor instead.
func (*UpdateThesisDefenseResponseData) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{35}
}

type UpdateThesisDefenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                            `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *UpdateThesisDefenseResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *UpdateThesisDefenseResponse) Reset() {
	*x = UpdateThesisDefenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateThesisDefenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateThesisDefenseResponse) ProtoMessage() {}

func (x *UpdateThesisDefenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateThesisDefenseResponse.ProtoReflect.Descriptor instead.
func (*UpdateThesisDefenseResponse) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateThesisDefenseResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UpdateThesisDefenseResponse) GetData() *UpdateThesisDefenseResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetThesisSupervisorLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page               uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit              uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Search             string `protobuf:"bytes,3,opt,name=search,proto3" json:"search"`
	IdNationalLecturer string `protobuf:"bytes,4,opt,name=id_national_lecturer,json=idNationalLecturer,proto3" json:"id_national_lecturer"`
	SemesterId         string `protobuf:"bytes,5,opt,name=semester_id,json=semesterId,proto3" json:"semester_id"`
}

func (x *GetThesisSupervisorLogRequest) Reset() {
	*x = GetThesisSupervisorLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThesisSupervisorLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThesisSupervisorLogRequest) ProtoMessage() {}

func (x *GetThesisSupervisorLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThesisSupervisorLogRequest.ProtoReflect.Descriptor instead.
func (*GetThesisSupervisorLogRequest) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{37}
}

func (x *GetThesisSupervisorLogRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetThesisSupervisorLogRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetThesisSupervisorLogRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetThesisSupervisorLogRequest) GetIdNationalLecturer() string {
	if x != nil {
		return x.IdNationalLecturer
	}
	return ""
}

func (x *GetThesisSupervisorLogRequest) GetSemesterId() string {
	if x != nil {
		return x.SemesterId
	}
	return ""
}

type GetThesisSupervisorLogResponseDataThesisSupervisorRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Total uint32 `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
}

func (x *GetThesisSupervisorLogResponseDataThesisSupervisorRole) Reset() {
	*x = GetThesisSupervisorLogResponseDataThesisSupervisorRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThesisSupervisorLogResponseDataThesisSupervisorRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThesisSupervisorLogResponseDataThesisSupervisorRole) ProtoMessage() {}

func (x *GetThesisSupervisorLogResponseDataThesisSupervisorRole) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThesisSupervisorLogResponseDataThesisSupervisorRole.ProtoReflect.Descriptor instead.
func (*GetThesisSupervisorLogResponseDataThesisSupervisorRole) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{38}
}

func (x *GetThesisSupervisorLogResponseDataThesisSupervisorRole) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetThesisSupervisorLogResponseDataThesisSupervisorRole) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetThesisSupervisorLogResponseDataThesisSupervisorRole) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetThesisSupervisorLogResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                                                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	IdNationalLecturer     string                                                    `protobuf:"bytes,2,opt,name=id_national_lecturer,json=idNationalLecturer,proto3" json:"id_national_lecturer"`
	Name                   string                                                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	TotalSupervisedThesis  uint32                                                    `protobuf:"varint,4,opt,name=total_supervised_thesis,json=totalSupervisedThesis,proto3" json:"total_supervised_thesis"`
	ActiveSupervisedThesis uint32                                                    `protobuf:"varint,5,opt,name=active_supervised_thesis,json=activeSupervisedThesis,proto3" json:"active_supervised_thesis"`
	ThesisSupervisorRoles  []*GetThesisSupervisorLogResponseDataThesisSupervisorRole `protobuf:"bytes,6,rep,name=thesis_supervisor_roles,json=thesisSupervisorRoles,proto3" json:"thesis_supervisor_roles"`
}

func (x *GetThesisSupervisorLogResponseData) Reset() {
	*x = GetThesisSupervisorLogResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThesisSupervisorLogResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThesisSupervisorLogResponseData) ProtoMessage() {}

func (x *GetThesisSupervisorLogResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThesisSupervisorLogResponseData.ProtoReflect.Descriptor instead.
func (*GetThesisSupervisorLogResponseData) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{39}
}

func (x *GetThesisSupervisorLogResponseData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetThesisSupervisorLogResponseData) GetIdNationalLecturer() string {
	if x != nil {
		return x.IdNationalLecturer
	}
	return ""
}

func (x *GetThesisSupervisorLogResponseData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetThesisSupervisorLogResponseData) GetTotalSupervisedThesis() uint32 {
	if x != nil {
		return x.TotalSupervisedThesis
	}
	return 0
}

func (x *GetThesisSupervisorLogResponseData) GetActiveSupervisedThesis() uint32 {
	if x != nil {
		return x.ActiveSupervisedThesis
	}
	return 0
}

func (x *GetThesisSupervisorLogResponseData) GetThesisSupervisorRoles() []*GetThesisSupervisorLogResponseDataThesisSupervisorRole {
	if x != nil {
		return x.ThesisSupervisorRoles
	}
	return nil
}

type GetThesisSupervisorLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta       *Meta                                 `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Pagination *Pagination                           `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	Data       []*GetThesisSupervisorLogResponseData `protobuf:"bytes,3,rep,name=data,proto3" json:"data"`
}

func (x *GetThesisSupervisorLogResponse) Reset() {
	*x = GetThesisSupervisorLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_thesis_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThesisSupervisorLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThesisSupervisorLogResponse) ProtoMessage() {}

func (x *GetThesisSupervisorLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_thesis_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThesisSupervisorLogResponse.ProtoReflect.Descriptor instead.
func (*GetThesisSupervisorLogResponse) Descriptor() ([]byte, []int) {
	return file_admin_thesis_proto_rawDescGZIP(), []int{40}
}

func (x *GetThesisSupervisorLogResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetThesisSupervisorLogResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetThesisSupervisorLogResponse) GetData() []*GetThesisSupervisorLogResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_admin_thesis_proto protoreflect.FileDescriptor

var file_admin_thesis_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x73, 0x22, 0x4c, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xa4, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x65,
	0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x72, 0x65, 0x76, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x65, 0x78,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x69, 0x6d, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x69, 0x6d, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xda, 0x05, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x69, 0x6d, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x4e, 0x69, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69,
	0x6b, 0x74, 0x69, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x69,
	0x6b, 0x74, 0x69, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x6b, 0x74, 0x69, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x69, 0x6b, 0x74, 0x69, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x16,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x6d,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3b, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x22, 0xaa, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb4, 0x01,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x03, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x6f, 0x72,
	0x74, 0x22, 0xa9, 0x09, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x69, 0x6d, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x4e, 0x69, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6d,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x73,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x6d,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x73,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6d, 0x69, 0x6e,
	0x61, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x3d, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x62, 0x0a, 0x12, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x52, 0x11, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x74, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0x9e, 0x05, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e,
	0x67, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6d, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x65,
	0x6d, 0x69, 0x6e, 0x61, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x12, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x11,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x73, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x1d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x65, 0x73,
	0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x19, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xc6, 0x05, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6d, 0x69, 0x6e,
	0x61, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35,
	0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x12, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x11,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x73, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6e,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74,
	0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3d,
	0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x23, 0x0a,
	0x21, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xdb, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x69, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x69, 0x6d, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x6d,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xdd, 0x02, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x65, 0x73, 0x69,
	0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x61, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x67,
	0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x35, 0x0a,
	0x17, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x65,
	0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x45,
	0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xc5, 0x0b, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x65, 0x73, 0x69,
	0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x69, 0x6d, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x4e, 0x69, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69,
	0x6b, 0x74, 0x69, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x69,
	0x6b, 0x74, 0x69, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x6b, 0x74, 0x69, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x69, 0x6b, 0x74, 0x69, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x16,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65,
	0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a,
	0x1e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46,
	0x0a, 0x20, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x73, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x73, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x5b, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x65, 0x73,
	0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x61, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x33, 0x0a, 0x16, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65,
	0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a, 0x22,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x65, 0x78,
	0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x45, 0x78, 0x61, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6c,
	0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x65,
	0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0xcb, 0x03, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x73, 0x69,
	0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x73,
	0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x41, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xb4, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x69, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6d,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x36, 0x47, 0x65, 0x74, 0x54, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xea, 0x02, 0x0a, 0x22,
	0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x69, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x65, 0x64, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x65, 0x64, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x7c, 0x0a, 0x17, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x15, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0xd1, 0x07, 0x0a, 0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x72, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x68, 0x65, 0x73,
	0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x73, 0x69,
	0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6c, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x73,
	0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x2b, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x17, 0x5a, 0x15, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_thesis_proto_rawDescOnce sync.Once
	file_admin_thesis_proto_rawDescData = file_admin_thesis_proto_rawDesc
)

func file_admin_thesis_proto_rawDescGZIP() []byte {
	file_admin_thesis_proto_rawDescOnce.Do(func() {
		file_admin_thesis_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_thesis_proto_rawDescData)
	})
	return file_admin_thesis_proto_rawDescData
}

var file_admin_thesis_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_admin_thesis_proto_goTypes = []interface{}{
	(*Meta)(nil),                                                   // 0: admin_thesis.Meta
	(*Pagination)(nil),                                             // 1: admin_thesis.Pagination
	(*GetListRequest)(nil),                                         // 2: admin_thesis.GetListRequest
	(*GetListResponseData)(nil),                                    // 3: admin_thesis.GetListResponseData
	(*GetListResponse)(nil),                                        // 4: admin_thesis.GetListResponse
	(*GetDetailRequest)(nil),                                       // 5: admin_thesis.GetDetailRequest
	(*GetDetailResponseDataFile)(nil),                              // 6: admin_thesis.GetDetailResponseDataFile
	(*GetDetailResponseDataThesisSupervisor)(nil),                  // 7: admin_thesis.GetDetailResponseDataThesisSupervisor
	(*GetDetailResponseData)(nil),                                  // 8: admin_thesis.GetDetailResponseData
	(*GetDetailResponse)(nil),                                      // 9: admin_thesis.GetDetailResponse
	(*CreateRequestThesisSupervisor)(nil),                          // 10: admin_thesis.CreateRequestThesisSupervisor
	(*CreateRequest)(nil),                                          // 11: admin_thesis.CreateRequest
	(*CreateResponseData)(nil),                                     // 12: admin_thesis.CreateResponseData
	(*CreateResponse)(nil),                                         // 13: admin_thesis.CreateResponse
	(*UpdateRequestFile)(nil),                                      // 14: admin_thesis.UpdateRequestFile
	(*UpdateRequestThesisSupervisor)(nil),                          // 15: admin_thesis.UpdateRequestThesisSupervisor
	(*UpdateRequest)(nil),                                          // 16: admin_thesis.UpdateRequest
	(*UpdateResponseData)(nil),                                     // 17: admin_thesis.UpdateResponseData
	(*UpdateResponse)(nil),                                         // 18: admin_thesis.UpdateResponse
	(*DeleteRequest)(nil),                                          // 19: admin_thesis.DeleteRequest
	(*DeleteResponseData)(nil),                                     // 20: admin_thesis.DeleteResponseData
	(*DeleteResponse)(nil),                                         // 21: admin_thesis.DeleteResponse
	(*RegisterThesisDefenseRequest)(nil),                           // 22: admin_thesis.RegisterThesisDefenseRequest
	(*RegisterThesisDefenseResponseData)(nil),                      // 23: admin_thesis.RegisterThesisDefenseResponseData
	(*RegisterThesisDefenseResponse)(nil),                          // 24: admin_thesis.RegisterThesisDefenseResponse
	(*GetListThesisDefenseRequestRequest)(nil),                     // 25: admin_thesis.GetListThesisDefenseRequestRequest
	(*GetListThesisDefenseRequestResponseDataExaminer)(nil),        // 26: admin_thesis.GetListThesisDefenseRequestResponseDataExaminer
	(*GetListThesisDefenseRequestResponseData)(nil),                // 27: admin_thesis.GetListThesisDefenseRequestResponseData
	(*GetListThesisDefenseRequestResponse)(nil),                    // 28: admin_thesis.GetListThesisDefenseRequestResponse
	(*CreateThesisDefenseRequestExaminer)(nil),                     // 29: admin_thesis.CreateThesisDefenseRequestExaminer
	(*CreateThesisDefenseRequest)(nil),                             // 30: admin_thesis.CreateThesisDefenseRequest
	(*CreateThesisDefenseResponseData)(nil),                        // 31: admin_thesis.CreateThesisDefenseResponseData
	(*CreateThesisDefenseResponse)(nil),                            // 32: admin_thesis.CreateThesisDefenseResponse
	(*UpdateThesisDefenseRequestExaminer)(nil),                     // 33: admin_thesis.UpdateThesisDefenseRequestExaminer
	(*UpdateThesisDefenseRequest)(nil),                             // 34: admin_thesis.UpdateThesisDefenseRequest
	(*UpdateThesisDefenseResponseData)(nil),                        // 35: admin_thesis.UpdateThesisDefenseResponseData
	(*UpdateThesisDefenseResponse)(nil),                            // 36: admin_thesis.UpdateThesisDefenseResponse
	(*GetThesisSupervisorLogRequest)(nil),                          // 37: admin_thesis.GetThesisSupervisorLogRequest
	(*GetThesisSupervisorLogResponseDataThesisSupervisorRole)(nil), // 38: admin_thesis.GetThesisSupervisorLogResponseDataThesisSupervisorRole
	(*GetThesisSupervisorLogResponseData)(nil),                     // 39: admin_thesis.GetThesisSupervisorLogResponseData
	(*GetThesisSupervisorLogResponse)(nil),                         // 40: admin_thesis.GetThesisSupervisorLogResponse
}
var file_admin_thesis_proto_depIdxs = []int32{
	0,  // 0: admin_thesis.GetListResponse.meta:type_name -> admin_thesis.Meta
	1,  // 1: admin_thesis.GetListResponse.pagination:type_name -> admin_thesis.Pagination
	3,  // 2: admin_thesis.GetListResponse.data:type_name -> admin_thesis.GetListResponseData
	6,  // 3: admin_thesis.GetDetailResponseData.files:type_name -> admin_thesis.GetDetailResponseDataFile
	7,  // 4: admin_thesis.GetDetailResponseData.thesis_supervisors:type_name -> admin_thesis.GetDetailResponseDataThesisSupervisor
	0,  // 5: admin_thesis.GetDetailResponse.meta:type_name -> admin_thesis.Meta
	8,  // 6: admin_thesis.GetDetailResponse.data:type_name -> admin_thesis.GetDetailResponseData
	10, // 7: admin_thesis.CreateRequest.thesis_supervisors:type_name -> admin_thesis.CreateRequestThesisSupervisor
	0,  // 8: admin_thesis.CreateResponse.meta:type_name -> admin_thesis.Meta
	12, // 9: admin_thesis.CreateResponse.data:type_name -> admin_thesis.CreateResponseData
	14, // 10: admin_thesis.UpdateRequest.files:type_name -> admin_thesis.UpdateRequestFile
	15, // 11: admin_thesis.UpdateRequest.thesis_supervisors:type_name -> admin_thesis.UpdateRequestThesisSupervisor
	0,  // 12: admin_thesis.UpdateResponse.meta:type_name -> admin_thesis.Meta
	17, // 13: admin_thesis.UpdateResponse.data:type_name -> admin_thesis.UpdateResponseData
	0,  // 14: admin_thesis.DeleteResponse.meta:type_name -> admin_thesis.Meta
	20, // 15: admin_thesis.DeleteResponse.data:type_name -> admin_thesis.DeleteResponseData
	0,  // 16: admin_thesis.RegisterThesisDefenseResponse.meta:type_name -> admin_thesis.Meta
	23, // 17: admin_thesis.RegisterThesisDefenseResponse.data:type_name -> admin_thesis.RegisterThesisDefenseResponseData
	26, // 18: admin_thesis.GetListThesisDefenseRequestResponseData.examiners:type_name -> admin_thesis.GetListThesisDefenseRequestResponseDataExaminer
	0,  // 19: admin_thesis.GetListThesisDefenseRequestResponse.meta:type_name -> admin_thesis.Meta
	1,  // 20: admin_thesis.GetListThesisDefenseRequestResponse.pagination:type_name -> admin_thesis.Pagination
	27, // 21: admin_thesis.GetListThesisDefenseRequestResponse.data:type_name -> admin_thesis.GetListThesisDefenseRequestResponseData
	29, // 22: admin_thesis.CreateThesisDefenseRequest.examiners:type_name -> admin_thesis.CreateThesisDefenseRequestExaminer
	0,  // 23: admin_thesis.CreateThesisDefenseResponse.meta:type_name -> admin_thesis.Meta
	31, // 24: admin_thesis.CreateThesisDefenseResponse.data:type_name -> admin_thesis.CreateThesisDefenseResponseData
	33, // 25: admin_thesis.UpdateThesisDefenseRequest.examiners:type_name -> admin_thesis.UpdateThesisDefenseRequestExaminer
	0,  // 26: admin_thesis.UpdateThesisDefenseResponse.meta:type_name -> admin_thesis.Meta
	35, // 27: admin_thesis.UpdateThesisDefenseResponse.data:type_name -> admin_thesis.UpdateThesisDefenseResponseData
	38, // 28: admin_thesis.GetThesisSupervisorLogResponseData.thesis_supervisor_roles:type_name -> admin_thesis.GetThesisSupervisorLogResponseDataThesisSupervisorRole
	0,  // 29: admin_thesis.GetThesisSupervisorLogResponse.meta:type_name -> admin_thesis.Meta
	1,  // 30: admin_thesis.GetThesisSupervisorLogResponse.pagination:type_name -> admin_thesis.Pagination
	39, // 31: admin_thesis.GetThesisSupervisorLogResponse.data:type_name -> admin_thesis.GetThesisSupervisorLogResponseData
	2,  // 32: admin_thesis.AdminThesisHandler.GetList:input_type -> admin_thesis.GetListRequest
	5,  // 33: admin_thesis.AdminThesisHandler.GetDetail:input_type -> admin_thesis.GetDetailRequest
	11, // 34: admin_thesis.AdminThesisHandler.Create:input_type -> admin_thesis.CreateRequest
	16, // 35: admin_thesis.AdminThesisHandler.Update:input_type -> admin_thesis.UpdateRequest
	19, // 36: admin_thesis.AdminThesisHandler.Delete:input_type -> admin_thesis.DeleteRequest
	25, // 37: admin_thesis.AdminThesisHandler.GetListThesisDefenseRequest:input_type -> admin_thesis.GetListThesisDefenseRequestRequest
	22, // 38: admin_thesis.AdminThesisHandler.RegisterThesisDefense:input_type -> admin_thesis.RegisterThesisDefenseRequest
	30, // 39: admin_thesis.AdminThesisHandler.CreateThesisDefense:input_type -> admin_thesis.CreateThesisDefenseRequest
	34, // 40: admin_thesis.AdminThesisHandler.UpdateThesisDefense:input_type -> admin_thesis.UpdateThesisDefenseRequest
	37, // 41: admin_thesis.AdminThesisHandler.GetThesisSupervisorLog:input_type -> admin_thesis.GetThesisSupervisorLogRequest
	4,  // 42: admin_thesis.AdminThesisHandler.GetList:output_type -> admin_thesis.GetListResponse
	9,  // 43: admin_thesis.AdminThesisHandler.GetDetail:output_type -> admin_thesis.GetDetailResponse
	13, // 44: admin_thesis.AdminThesisHandler.Create:output_type -> admin_thesis.CreateResponse
	18, // 45: admin_thesis.AdminThesisHandler.Update:output_type -> admin_thesis.UpdateResponse
	21, // 46: admin_thesis.AdminThesisHandler.Delete:output_type -> admin_thesis.DeleteResponse
	28, // 47: admin_thesis.AdminThesisHandler.GetListThesisDefenseRequest:output_type -> admin_thesis.GetListThesisDefenseRequestResponse
	24, // 48: admin_thesis.AdminThesisHandler.RegisterThesisDefense:output_type -> admin_thesis.RegisterThesisDefenseResponse
	32, // 49: admin_thesis.AdminThesisHandler.CreateThesisDefense:output_type -> admin_thesis.CreateThesisDefenseResponse
	36, // 50: admin_thesis.AdminThesisHandler.UpdateThesisDefense:output_type -> admin_thesis.UpdateThesisDefenseResponse
	40, // 51: admin_thesis.AdminThesisHandler.GetThesisSupervisorLog:output_type -> admin_thesis.GetThesisSupervisorLogResponse
	42, // [42:52] is the sub-list for method output_type
	32, // [32:42] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_admin_thesis_proto_init() }
func file_admin_thesis_proto_init() {
	if File_admin_thesis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_admin_thesis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailResponseDataFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailResponseDataThesisSupervisor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequestThesisSupervisor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequestFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequestThesisSupervisor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterThesisDefenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterThesisDefenseResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterThesisDefenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListThesisDefenseRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListThesisDefenseRequestResponseDataExaminer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListThesisDefenseRequestResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListThesisDefenseRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateThesisDefenseRequestExaminer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateThesisDefenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateThesisDefenseResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateThesisDefenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateThesisDefenseRequestExaminer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateThesisDefenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateThesisDefenseResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateThesisDefenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThesisSupervisorLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThesisSupervisorLogResponseDataThesisSupervisorRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThesisSupervisorLogResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_thesis_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThesisSupervisorLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_thesis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_thesis_proto_goTypes,
		DependencyIndexes: file_admin_thesis_proto_depIdxs,
		MessageInfos:      file_admin_thesis_proto_msgTypes,
	}.Build()
	File_admin_thesis_proto = out.File
	file_admin_thesis_proto_rawDesc = nil
	file_admin_thesis_proto_goTypes = nil
	file_admin_thesis_proto_depIdxs = nil
}
