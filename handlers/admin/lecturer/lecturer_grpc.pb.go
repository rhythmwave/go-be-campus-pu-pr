// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: admin/lecturer.proto

package lecturer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminLecturerHandlerClient is the client API for AdminLecturerHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminLecturerHandlerClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*GetScheduleResponse, error)
	GetAssignedClass(ctx context.Context, in *GetAssignedClassRequest, opts ...grpc.CallOption) (*GetAssignedClassResponse, error)
}

type adminLecturerHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminLecturerHandlerClient(cc grpc.ClientConnInterface) AdminLecturerHandlerClient {
	return &adminLecturerHandlerClient{cc}
}

func (c *adminLecturerHandlerClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/admin_lecturer.AdminLecturerHandler/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminLecturerHandlerClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error) {
	out := new(GetDetailResponse)
	err := c.cc.Invoke(ctx, "/admin_lecturer.AdminLecturerHandler/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminLecturerHandlerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/admin_lecturer.AdminLecturerHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminLecturerHandlerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/admin_lecturer.AdminLecturerHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminLecturerHandlerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/admin_lecturer.AdminLecturerHandler/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminLecturerHandlerClient) GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*GetScheduleResponse, error) {
	out := new(GetScheduleResponse)
	err := c.cc.Invoke(ctx, "/admin_lecturer.AdminLecturerHandler/GetSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminLecturerHandlerClient) GetAssignedClass(ctx context.Context, in *GetAssignedClassRequest, opts ...grpc.CallOption) (*GetAssignedClassResponse, error) {
	out := new(GetAssignedClassResponse)
	err := c.cc.Invoke(ctx, "/admin_lecturer.AdminLecturerHandler/GetAssignedClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminLecturerHandlerServer is the server API for AdminLecturerHandler service.
// All implementations must embed UnimplementedAdminLecturerHandlerServer
// for forward compatibility
type AdminLecturerHandlerServer interface {
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	GetSchedule(context.Context, *GetScheduleRequest) (*GetScheduleResponse, error)
	GetAssignedClass(context.Context, *GetAssignedClassRequest) (*GetAssignedClassResponse, error)
	mustEmbedUnimplementedAdminLecturerHandlerServer()
}

// UnimplementedAdminLecturerHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedAdminLecturerHandlerServer struct {
}

func (UnimplementedAdminLecturerHandlerServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedAdminLecturerHandlerServer) GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedAdminLecturerHandlerServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAdminLecturerHandlerServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAdminLecturerHandlerServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdminLecturerHandlerServer) GetSchedule(context.Context, *GetScheduleRequest) (*GetScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedule not implemented")
}
func (UnimplementedAdminLecturerHandlerServer) GetAssignedClass(context.Context, *GetAssignedClassRequest) (*GetAssignedClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedClass not implemented")
}
func (UnimplementedAdminLecturerHandlerServer) mustEmbedUnimplementedAdminLecturerHandlerServer() {}

// UnsafeAdminLecturerHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminLecturerHandlerServer will
// result in compilation errors.
type UnsafeAdminLecturerHandlerServer interface {
	mustEmbedUnimplementedAdminLecturerHandlerServer()
}

func RegisterAdminLecturerHandlerServer(s grpc.ServiceRegistrar, srv AdminLecturerHandlerServer) {
	s.RegisterService(&AdminLecturerHandler_ServiceDesc, srv)
}

func _AdminLecturerHandler_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLecturerHandlerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_lecturer.AdminLecturerHandler/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLecturerHandlerServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminLecturerHandler_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLecturerHandlerServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_lecturer.AdminLecturerHandler/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLecturerHandlerServer).GetDetail(ctx, req.(*GetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminLecturerHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLecturerHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_lecturer.AdminLecturerHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLecturerHandlerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminLecturerHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLecturerHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_lecturer.AdminLecturerHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLecturerHandlerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminLecturerHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLecturerHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_lecturer.AdminLecturerHandler/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLecturerHandlerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminLecturerHandler_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLecturerHandlerServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_lecturer.AdminLecturerHandler/GetSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLecturerHandlerServer).GetSchedule(ctx, req.(*GetScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminLecturerHandler_GetAssignedClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignedClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLecturerHandlerServer).GetAssignedClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_lecturer.AdminLecturerHandler/GetAssignedClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLecturerHandlerServer).GetAssignedClass(ctx, req.(*GetAssignedClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminLecturerHandler_ServiceDesc is the grpc.ServiceDesc for AdminLecturerHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminLecturerHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_lecturer.AdminLecturerHandler",
	HandlerType: (*AdminLecturerHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _AdminLecturerHandler_GetList_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _AdminLecturerHandler_GetDetail_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AdminLecturerHandler_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AdminLecturerHandler_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdminLecturerHandler_Delete_Handler,
		},
		{
			MethodName: "GetSchedule",
			Handler:    _AdminLecturerHandler_GetSchedule_Handler,
		},
		{
			MethodName: "GetAssignedClass",
			Handler:    _AdminLecturerHandler_GetAssignedClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/lecturer.proto",
}
