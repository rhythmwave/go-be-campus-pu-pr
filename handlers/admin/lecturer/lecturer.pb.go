// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: admin/lecturer.proto

package lecturer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Status  uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	Code    string `protobuf:"bytes,3,opt,name=code,proto3" json:"code"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{0}
}

func (x *Meta) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Meta) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Meta) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit        uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Prev         uint32 `protobuf:"varint,3,opt,name=prev,proto3" json:"prev"`
	Next         uint32 `protobuf:"varint,4,opt,name=next,proto3" json:"next"`
	TotalPages   uint32 `protobuf:"varint,5,opt,name=total_pages,json=totalPages,proto3" json:"total_pages"`
	TotalRecords uint32 `protobuf:"varint,6,opt,name=total_records,json=totalRecords,proto3" json:"total_records"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{1}
}

func (x *Pagination) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Pagination) GetPrev() uint32 {
	if x != nil {
		return x.Prev
	}
	return 0
}

func (x *Pagination) GetNext() uint32 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *Pagination) GetTotalPages() uint32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *Pagination) GetTotalRecords() uint32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page                       uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                      uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Search                     string `protobuf:"bytes,3,opt,name=search,proto3" json:"search"`
	StudyProgramId             string `protobuf:"bytes,4,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	IdNationalLecturer         string `protobuf:"bytes,5,opt,name=id_national_lecturer,json=idNationalLecturer,proto3" json:"id_national_lecturer"`
	EmploymentStatus           string `protobuf:"bytes,6,opt,name=employment_status,json=employmentStatus,proto3" json:"employment_status"`
	AcademicGuidanceSemesterId string `protobuf:"bytes,7,opt,name=academic_guidance_semester_id,json=academicGuidanceSemesterId,proto3" json:"academic_guidance_semester_id"`
	Status                     string `protobuf:"bytes,8,opt,name=status,proto3" json:"status"`
	HasAuthentication          string `protobuf:"bytes,9,opt,name=has_authentication,json=hasAuthentication,proto3" json:"has_authentication"`
	ClassId                    string `protobuf:"bytes,10,opt,name=class_id,json=classId,proto3" json:"class_id"`
	ExcludeLectureDate         string `protobuf:"bytes,11,opt,name=exclude_lecture_date,json=excludeLectureDate,proto3" json:"exclude_lecture_date"`
	ExcludeStartTime           uint32 `protobuf:"varint,12,opt,name=exclude_start_time,json=excludeStartTime,proto3" json:"exclude_start_time"`
	ExcludeEndTime             uint32 `protobuf:"varint,13,opt,name=exclude_end_time,json=excludeEndTime,proto3" json:"exclude_end_time"`
	ForceIncludeLectureId      string `protobuf:"bytes,14,opt,name=force_include_lecture_id,json=forceIncludeLectureId,proto3" json:"force_include_lecture_id"`
}

func (x *GetListRequest) Reset() {
	*x = GetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRequest) ProtoMessage() {}

func (x *GetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRequest.ProtoReflect.Descriptor instead.
func (*GetListRequest) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{2}
}

func (x *GetListRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetListRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetListRequest) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *GetListRequest) GetIdNationalLecturer() string {
	if x != nil {
		return x.IdNationalLecturer
	}
	return ""
}

func (x *GetListRequest) GetEmploymentStatus() string {
	if x != nil {
		return x.EmploymentStatus
	}
	return ""
}

func (x *GetListRequest) GetAcademicGuidanceSemesterId() string {
	if x != nil {
		return x.AcademicGuidanceSemesterId
	}
	return ""
}

func (x *GetListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetListRequest) GetHasAuthentication() string {
	if x != nil {
		return x.HasAuthentication
	}
	return ""
}

func (x *GetListRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *GetListRequest) GetExcludeLectureDate() string {
	if x != nil {
		return x.ExcludeLectureDate
	}
	return ""
}

func (x *GetListRequest) GetExcludeStartTime() uint32 {
	if x != nil {
		return x.ExcludeStartTime
	}
	return 0
}

func (x *GetListRequest) GetExcludeEndTime() uint32 {
	if x != nil {
		return x.ExcludeEndTime
	}
	return 0
}

func (x *GetListRequest) GetForceIncludeLectureId() string {
	if x != nil {
		return x.ForceIncludeLectureId
	}
	return ""
}

type GetListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	PhoneNumber                     string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	MobilePhoneNumber               string `protobuf:"bytes,4,opt,name=mobile_phone_number,json=mobilePhoneNumber,proto3" json:"mobile_phone_number"`
	OfficePhoneNumber               string `protobuf:"bytes,5,opt,name=office_phone_number,json=officePhoneNumber,proto3" json:"office_phone_number"`
	IdNationalLecturer              string `protobuf:"bytes,6,opt,name=id_national_lecturer,json=idNationalLecturer,proto3" json:"id_national_lecturer"`
	FrontTitle                      string `protobuf:"bytes,7,opt,name=front_title,json=frontTitle,proto3" json:"front_title"`
	BackDegree                      string `protobuf:"bytes,8,opt,name=back_degree,json=backDegree,proto3" json:"back_degree"`
	DiktiStudyProgramCode           string `protobuf:"bytes,9,opt,name=dikti_study_program_code,json=diktiStudyProgramCode,proto3" json:"dikti_study_program_code"`
	StudyProgramName                string `protobuf:"bytes,10,opt,name=study_program_name,json=studyProgramName,proto3" json:"study_program_name"`
	EmploymentStatus                string `protobuf:"bytes,11,opt,name=employment_status,json=employmentStatus,proto3" json:"employment_status"`
	Status                          string `protobuf:"bytes,12,opt,name=status,proto3" json:"status"`
	AuthenticationId                string `protobuf:"bytes,13,opt,name=authentication_id,json=authenticationId,proto3" json:"authentication_id"`
	AuthenticationIsActive          bool   `protobuf:"varint,14,opt,name=authentication_is_active,json=authenticationIsActive,proto3" json:"authentication_is_active"`
	AuthenticationSuspensionRemarks string `protobuf:"bytes,15,opt,name=authentication_suspension_remarks,json=authenticationSuspensionRemarks,proto3" json:"authentication_suspension_remarks"`
	AcademicGuidanceTotalStudent    uint32 `protobuf:"varint,16,opt,name=academic_guidance_total_student,json=academicGuidanceTotalStudent,proto3" json:"academic_guidance_total_student"`
	AcademicGuidanceId              string `protobuf:"bytes,17,opt,name=academic_guidance_id,json=academicGuidanceId,proto3" json:"academic_guidance_id"`
	AcademicGuidanceDecisionNumber  string `protobuf:"bytes,18,opt,name=academic_guidance_decision_number,json=academicGuidanceDecisionNumber,proto3" json:"academic_guidance_decision_number"`
	AcademicGuidanceDecisionDate    string `protobuf:"bytes,19,opt,name=academic_guidance_decision_date,json=academicGuidanceDecisionDate,proto3" json:"academic_guidance_decision_date"`
}

func (x *GetListResponseData) Reset() {
	*x = GetListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponseData) ProtoMessage() {}

func (x *GetListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponseData.ProtoReflect.Descriptor instead.
func (*GetListResponseData) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{3}
}

func (x *GetListResponseData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetListResponseData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetListResponseData) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *GetListResponseData) GetMobilePhoneNumber() string {
	if x != nil {
		return x.MobilePhoneNumber
	}
	return ""
}

func (x *GetListResponseData) GetOfficePhoneNumber() string {
	if x != nil {
		return x.OfficePhoneNumber
	}
	return ""
}

func (x *GetListResponseData) GetIdNationalLecturer() string {
	if x != nil {
		return x.IdNationalLecturer
	}
	return ""
}

func (x *GetListResponseData) GetFrontTitle() string {
	if x != nil {
		return x.FrontTitle
	}
	return ""
}

func (x *GetListResponseData) GetBackDegree() string {
	if x != nil {
		return x.BackDegree
	}
	return ""
}

func (x *GetListResponseData) GetDiktiStudyProgramCode() string {
	if x != nil {
		return x.DiktiStudyProgramCode
	}
	return ""
}

func (x *GetListResponseData) GetStudyProgramName() string {
	if x != nil {
		return x.StudyProgramName
	}
	return ""
}

func (x *GetListResponseData) GetEmploymentStatus() string {
	if x != nil {
		return x.EmploymentStatus
	}
	return ""
}

func (x *GetListResponseData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetListResponseData) GetAuthenticationId() string {
	if x != nil {
		return x.AuthenticationId
	}
	return ""
}

func (x *GetListResponseData) GetAuthenticationIsActive() bool {
	if x != nil {
		return x.AuthenticationIsActive
	}
	return false
}

func (x *GetListResponseData) GetAuthenticationSuspensionRemarks() string {
	if x != nil {
		return x.AuthenticationSuspensionRemarks
	}
	return ""
}

func (x *GetListResponseData) GetAcademicGuidanceTotalStudent() uint32 {
	if x != nil {
		return x.AcademicGuidanceTotalStudent
	}
	return 0
}

func (x *GetListResponseData) GetAcademicGuidanceId() string {
	if x != nil {
		return x.AcademicGuidanceId
	}
	return ""
}

func (x *GetListResponseData) GetAcademicGuidanceDecisionNumber() string {
	if x != nil {
		return x.AcademicGuidanceDecisionNumber
	}
	return ""
}

func (x *GetListResponseData) GetAcademicGuidanceDecisionDate() string {
	if x != nil {
		return x.AcademicGuidanceDecisionDate
	}
	return ""
}

type GetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta       *Meta                  `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Pagination *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	Data       []*GetListResponseData `protobuf:"bytes,3,rep,name=data,proto3" json:"data"`
}

func (x *GetListResponse) Reset() {
	*x = GetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponse) ProtoMessage() {}

func (x *GetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponse.ProtoReflect.Descriptor instead.
func (*GetListResponse) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{4}
}

func (x *GetListResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListResponse) GetData() []*GetListResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *GetDetailRequest) Reset() {
	*x = GetDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailRequest) ProtoMessage() {}

func (x *GetDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailRequest.ProtoReflect.Descriptor instead.
func (*GetDetailRequest) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{5}
}

func (x *GetDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDetailResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	IdNationalLecturer        string `protobuf:"bytes,2,opt,name=id_national_lecturer,json=idNationalLecturer,proto3" json:"id_national_lecturer"`
	Name                      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	FrontTitle                string `protobuf:"bytes,4,opt,name=front_title,json=frontTitle,proto3" json:"front_title"`
	BackDegree                string `protobuf:"bytes,5,opt,name=back_degree,json=backDegree,proto3" json:"back_degree"`
	StudyProgramId            string `protobuf:"bytes,6,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	StudyProgramName          string `protobuf:"bytes,7,opt,name=study_program_name,json=studyProgramName,proto3" json:"study_program_name"`
	IdNumber                  string `protobuf:"bytes,8,opt,name=id_number,json=idNumber,proto3" json:"id_number"`
	BirthDate                 string `protobuf:"bytes,9,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
	BirthRegencyId            uint32 `protobuf:"varint,10,opt,name=birth_regency_id,json=birthRegencyId,proto3" json:"birth_regency_id"`
	BirthRegencyName          string `protobuf:"bytes,11,opt,name=birth_regency_name,json=birthRegencyName,proto3" json:"birth_regency_name"`
	BirthCountryId            uint32 `protobuf:"varint,12,opt,name=birth_country_id,json=birthCountryId,proto3" json:"birth_country_id"`
	BirthCountryName          string `protobuf:"bytes,13,opt,name=birth_country_name,json=birthCountryName,proto3" json:"birth_country_name"`
	IdEmployee                string `protobuf:"bytes,14,opt,name=id_employee,json=idEmployee,proto3" json:"id_employee"`
	Stambuk                   string `protobuf:"bytes,15,opt,name=stambuk,proto3" json:"stambuk"`
	Sex                       string `protobuf:"bytes,16,opt,name=sex,proto3" json:"sex"`
	BloodType                 string `protobuf:"bytes,17,opt,name=blood_type,json=bloodType,proto3" json:"blood_type"`
	Religion                  string `protobuf:"bytes,18,opt,name=religion,proto3" json:"religion"`
	MaritalStatus             string `protobuf:"bytes,19,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status"`
	Address                   string `protobuf:"bytes,20,opt,name=address,proto3" json:"address"`
	RegencyId                 uint32 `protobuf:"varint,21,opt,name=regency_id,json=regencyId,proto3" json:"regency_id"`
	RegencyName               string `protobuf:"bytes,22,opt,name=regency_name,json=regencyName,proto3" json:"regency_name"`
	CountryId                 uint32 `protobuf:"varint,23,opt,name=country_id,json=countryId,proto3" json:"country_id"`
	CountryName               string `protobuf:"bytes,24,opt,name=country_name,json=countryName,proto3" json:"country_name"`
	PostalCode                string `protobuf:"bytes,25,opt,name=postal_code,json=postalCode,proto3" json:"postal_code"`
	PhoneNumber               string `protobuf:"bytes,26,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	Fax                       string `protobuf:"bytes,27,opt,name=fax,proto3" json:"fax"`
	MobilePhoneNumber         string `protobuf:"bytes,28,opt,name=mobile_phone_number,json=mobilePhoneNumber,proto3" json:"mobile_phone_number"`
	OfficePhoneNumber         string `protobuf:"bytes,29,opt,name=office_phone_number,json=officePhoneNumber,proto3" json:"office_phone_number"`
	EmployeeType              string `protobuf:"bytes,30,opt,name=employee_type,json=employeeType,proto3" json:"employee_type"`
	EmployeeStatus            string `protobuf:"bytes,31,opt,name=employee_status,json=employeeStatus,proto3" json:"employee_status"`
	SkCpnsNumber              string `protobuf:"bytes,32,opt,name=sk_cpns_number,json=skCpnsNumber,proto3" json:"sk_cpns_number"`
	SkCpnsDate                string `protobuf:"bytes,33,opt,name=sk_cpns_date,json=skCpnsDate,proto3" json:"sk_cpns_date"`
	TmtCpnsDate               string `protobuf:"bytes,34,opt,name=tmt_cpns_date,json=tmtCpnsDate,proto3" json:"tmt_cpns_date"`
	CpnsCategory              string `protobuf:"bytes,35,opt,name=cpns_category,json=cpnsCategory,proto3" json:"cpns_category"`
	CpnsDurationMonth         uint32 `protobuf:"varint,36,opt,name=cpns_duration_month,json=cpnsDurationMonth,proto3" json:"cpns_duration_month"`
	PrePositionDate           string `protobuf:"bytes,37,opt,name=pre_position_date,json=prePositionDate,proto3" json:"pre_position_date"`
	SkPnsNumber               string `protobuf:"bytes,38,opt,name=sk_pns_number,json=skPnsNumber,proto3" json:"sk_pns_number"`
	SkPnsDate                 string `protobuf:"bytes,39,opt,name=sk_pns_date,json=skPnsDate,proto3" json:"sk_pns_date"`
	TmtPnsDate                string `protobuf:"bytes,40,opt,name=tmt_pns_date,json=tmtPnsDate,proto3" json:"tmt_pns_date"`
	PnsCategory               string `protobuf:"bytes,41,opt,name=pns_category,json=pnsCategory,proto3" json:"pns_category"`
	PnsOathDate               string `protobuf:"bytes,42,opt,name=pns_oath_date,json=pnsOathDate,proto3" json:"pns_oath_date"`
	JoinDate                  string `protobuf:"bytes,43,opt,name=join_date,json=joinDate,proto3" json:"join_date"`
	EndDate                   string `protobuf:"bytes,44,opt,name=end_date,json=endDate,proto3" json:"end_date"`
	TaspenNumber              string `protobuf:"bytes,45,opt,name=taspen_number,json=taspenNumber,proto3" json:"taspen_number"`
	FormerInstance            string `protobuf:"bytes,46,opt,name=former_instance,json=formerInstance,proto3" json:"former_instance"`
	Remarks                   string `protobuf:"bytes,47,opt,name=remarks,proto3" json:"remarks"`
	LecturerNumber            string `protobuf:"bytes,48,opt,name=lecturer_number,json=lecturerNumber,proto3" json:"lecturer_number"`
	AcademicPosition          string `protobuf:"bytes,49,opt,name=academic_position,json=academicPosition,proto3" json:"academic_position"`
	EmploymentStatus          string `protobuf:"bytes,50,opt,name=employment_status,json=employmentStatus,proto3" json:"employment_status"`
	Expertise                 string `protobuf:"bytes,51,opt,name=expertise,proto3" json:"expertise"`
	HighestDegree             string `protobuf:"bytes,52,opt,name=highest_degree,json=highestDegree,proto3" json:"highest_degree"`
	InstanceCode              string `protobuf:"bytes,53,opt,name=instance_code,json=instanceCode,proto3" json:"instance_code"`
	TeachingCertificateNumber string `protobuf:"bytes,54,opt,name=teaching_certificate_number,json=teachingCertificateNumber,proto3" json:"teaching_certificate_number"`
	TeachingPermitNumber      string `protobuf:"bytes,55,opt,name=teaching_permit_number,json=teachingPermitNumber,proto3" json:"teaching_permit_number"`
	Status                    string `protobuf:"bytes,56,opt,name=status,proto3" json:"status"`
	ResignSemester            string `protobuf:"bytes,57,opt,name=resign_semester,json=resignSemester,proto3" json:"resign_semester"`
	ExpertiseGroupId          string `protobuf:"bytes,58,opt,name=expertise_group_id,json=expertiseGroupId,proto3" json:"expertise_group_id"`
	ExpertiseGroupName        string `protobuf:"bytes,59,opt,name=expertise_group_name,json=expertiseGroupName,proto3" json:"expertise_group_name"`
}

func (x *GetDetailResponseData) Reset() {
	*x = GetDetailResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailResponseData) ProtoMessage() {}

func (x *GetDetailResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailResponseData.ProtoReflect.Descriptor instead.
func (*GetDetailResponseData) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{6}
}

func (x *GetDetailResponseData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDetailResponseData) GetIdNationalLecturer() string {
	if x != nil {
		return x.IdNationalLecturer
	}
	return ""
}

func (x *GetDetailResponseData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDetailResponseData) GetFrontTitle() string {
	if x != nil {
		return x.FrontTitle
	}
	return ""
}

func (x *GetDetailResponseData) GetBackDegree() string {
	if x != nil {
		return x.BackDegree
	}
	return ""
}

func (x *GetDetailResponseData) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *GetDetailResponseData) GetStudyProgramName() string {
	if x != nil {
		return x.StudyProgramName
	}
	return ""
}

func (x *GetDetailResponseData) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *GetDetailResponseData) GetBirthRegencyId() uint32 {
	if x != nil {
		return x.BirthRegencyId
	}
	return 0
}

func (x *GetDetailResponseData) GetBirthRegencyName() string {
	if x != nil {
		return x.BirthRegencyName
	}
	return ""
}

func (x *GetDetailResponseData) GetBirthCountryId() uint32 {
	if x != nil {
		return x.BirthCountryId
	}
	return 0
}

func (x *GetDetailResponseData) GetBirthCountryName() string {
	if x != nil {
		return x.BirthCountryName
	}
	return ""
}

func (x *GetDetailResponseData) GetIdEmployee() string {
	if x != nil {
		return x.IdEmployee
	}
	return ""
}

func (x *GetDetailResponseData) GetStambuk() string {
	if x != nil {
		return x.Stambuk
	}
	return ""
}

func (x *GetDetailResponseData) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *GetDetailResponseData) GetBloodType() string {
	if x != nil {
		return x.BloodType
	}
	return ""
}

func (x *GetDetailResponseData) GetReligion() string {
	if x != nil {
		return x.Religion
	}
	return ""
}

func (x *GetDetailResponseData) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *GetDetailResponseData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetDetailResponseData) GetRegencyId() uint32 {
	if x != nil {
		return x.RegencyId
	}
	return 0
}

func (x *GetDetailResponseData) GetRegencyName() string {
	if x != nil {
		return x.RegencyName
	}
	return ""
}

func (x *GetDetailResponseData) GetCountryId() uint32 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *GetDetailResponseData) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *GetDetailResponseData) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *GetDetailResponseData) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *GetDetailResponseData) GetMobilePhoneNumber() string {
	if x != nil {
		return x.MobilePhoneNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetOfficePhoneNumber() string {
	if x != nil {
		return x.OfficePhoneNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetEmployeeType() string {
	if x != nil {
		return x.EmployeeType
	}
	return ""
}

func (x *GetDetailResponseData) GetEmployeeStatus() string {
	if x != nil {
		return x.EmployeeStatus
	}
	return ""
}

func (x *GetDetailResponseData) GetSkCpnsNumber() string {
	if x != nil {
		return x.SkCpnsNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetSkCpnsDate() string {
	if x != nil {
		return x.SkCpnsDate
	}
	return ""
}

func (x *GetDetailResponseData) GetTmtCpnsDate() string {
	if x != nil {
		return x.TmtCpnsDate
	}
	return ""
}

func (x *GetDetailResponseData) GetCpnsCategory() string {
	if x != nil {
		return x.CpnsCategory
	}
	return ""
}

func (x *GetDetailResponseData) GetCpnsDurationMonth() uint32 {
	if x != nil {
		return x.CpnsDurationMonth
	}
	return 0
}

func (x *GetDetailResponseData) GetPrePositionDate() string {
	if x != nil {
		return x.PrePositionDate
	}
	return ""
}

func (x *GetDetailResponseData) GetSkPnsNumber() string {
	if x != nil {
		return x.SkPnsNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetSkPnsDate() string {
	if x != nil {
		return x.SkPnsDate
	}
	return ""
}

func (x *GetDetailResponseData) GetTmtPnsDate() string {
	if x != nil {
		return x.TmtPnsDate
	}
	return ""
}

func (x *GetDetailResponseData) GetPnsCategory() string {
	if x != nil {
		return x.PnsCategory
	}
	return ""
}

func (x *GetDetailResponseData) GetPnsOathDate() string {
	if x != nil {
		return x.PnsOathDate
	}
	return ""
}

func (x *GetDetailResponseData) GetJoinDate() string {
	if x != nil {
		return x.JoinDate
	}
	return ""
}

func (x *GetDetailResponseData) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *GetDetailResponseData) GetTaspenNumber() string {
	if x != nil {
		return x.TaspenNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetFormerInstance() string {
	if x != nil {
		return x.FormerInstance
	}
	return ""
}

func (x *GetDetailResponseData) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *GetDetailResponseData) GetLecturerNumber() string {
	if x != nil {
		return x.LecturerNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetAcademicPosition() string {
	if x != nil {
		return x.AcademicPosition
	}
	return ""
}

func (x *GetDetailResponseData) GetEmploymentStatus() string {
	if x != nil {
		return x.EmploymentStatus
	}
	return ""
}

func (x *GetDetailResponseData) GetExpertise() string {
	if x != nil {
		return x.Expertise
	}
	return ""
}

func (x *GetDetailResponseData) GetHighestDegree() string {
	if x != nil {
		return x.HighestDegree
	}
	return ""
}

func (x *GetDetailResponseData) GetInstanceCode() string {
	if x != nil {
		return x.InstanceCode
	}
	return ""
}

func (x *GetDetailResponseData) GetTeachingCertificateNumber() string {
	if x != nil {
		return x.TeachingCertificateNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetTeachingPermitNumber() string {
	if x != nil {
		return x.TeachingPermitNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetDetailResponseData) GetResignSemester() string {
	if x != nil {
		return x.ResignSemester
	}
	return ""
}

func (x *GetDetailResponseData) GetExpertiseGroupId() string {
	if x != nil {
		return x.ExpertiseGroupId
	}
	return ""
}

func (x *GetDetailResponseData) GetExpertiseGroupName() string {
	if x != nil {
		return x.ExpertiseGroupName
	}
	return ""
}

type GetDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                  `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *GetDetailResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *GetDetailResponse) Reset() {
	*x = GetDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailResponse) ProtoMessage() {}

func (x *GetDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailResponse.ProtoReflect.Descriptor instead.
func (*GetDetailResponse) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{7}
}

func (x *GetDetailResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetDetailResponse) GetData() *GetDetailResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdNationalLecturer        string `protobuf:"bytes,1,opt,name=id_national_lecturer,json=idNationalLecturer,proto3" json:"id_national_lecturer"`
	Name                      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	FrontTitle                string `protobuf:"bytes,3,opt,name=front_title,json=frontTitle,proto3" json:"front_title"`
	BackDegree                string `protobuf:"bytes,4,opt,name=back_degree,json=backDegree,proto3" json:"back_degree"`
	StudyProgramId            string `protobuf:"bytes,5,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	IdNumber                  string `protobuf:"bytes,6,opt,name=id_number,json=idNumber,proto3" json:"id_number"`
	BirthDate                 string `protobuf:"bytes,7,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
	BirthRegencyId            uint32 `protobuf:"varint,8,opt,name=birth_regency_id,json=birthRegencyId,proto3" json:"birth_regency_id"`
	IdEmployee                string `protobuf:"bytes,9,opt,name=id_employee,json=idEmployee,proto3" json:"id_employee"`
	Stambuk                   string `protobuf:"bytes,10,opt,name=stambuk,proto3" json:"stambuk"`
	Sex                       string `protobuf:"bytes,11,opt,name=sex,proto3" json:"sex"`
	BloodType                 string `protobuf:"bytes,12,opt,name=blood_type,json=bloodType,proto3" json:"blood_type"`
	Religion                  string `protobuf:"bytes,13,opt,name=religion,proto3" json:"religion"`
	MaritalStatus             string `protobuf:"bytes,14,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status"`
	Address                   string `protobuf:"bytes,15,opt,name=address,proto3" json:"address"`
	RegencyId                 uint32 `protobuf:"varint,16,opt,name=regency_id,json=regencyId,proto3" json:"regency_id"`
	PostalCode                string `protobuf:"bytes,17,opt,name=postal_code,json=postalCode,proto3" json:"postal_code"`
	PhoneNumber               string `protobuf:"bytes,18,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	Fax                       string `protobuf:"bytes,19,opt,name=fax,proto3" json:"fax"`
	MobilePhoneNumber         string `protobuf:"bytes,20,opt,name=mobile_phone_number,json=mobilePhoneNumber,proto3" json:"mobile_phone_number"`
	OfficePhoneNumber         string `protobuf:"bytes,21,opt,name=office_phone_number,json=officePhoneNumber,proto3" json:"office_phone_number"`
	EmployeeType              string `protobuf:"bytes,22,opt,name=employee_type,json=employeeType,proto3" json:"employee_type"`
	EmployeeStatus            string `protobuf:"bytes,23,opt,name=employee_status,json=employeeStatus,proto3" json:"employee_status"`
	SkCpnsNumber              string `protobuf:"bytes,24,opt,name=sk_cpns_number,json=skCpnsNumber,proto3" json:"sk_cpns_number"`
	SkCpnsDate                string `protobuf:"bytes,25,opt,name=sk_cpns_date,json=skCpnsDate,proto3" json:"sk_cpns_date"`
	TmtCpnsDate               string `protobuf:"bytes,26,opt,name=tmt_cpns_date,json=tmtCpnsDate,proto3" json:"tmt_cpns_date"`
	CpnsCategory              string `protobuf:"bytes,27,opt,name=cpns_category,json=cpnsCategory,proto3" json:"cpns_category"`
	CpnsDurationMonth         uint32 `protobuf:"varint,28,opt,name=cpns_duration_month,json=cpnsDurationMonth,proto3" json:"cpns_duration_month"`
	PrePositionDate           string `protobuf:"bytes,29,opt,name=pre_position_date,json=prePositionDate,proto3" json:"pre_position_date"`
	SkPnsNumber               string `protobuf:"bytes,30,opt,name=sk_pns_number,json=skPnsNumber,proto3" json:"sk_pns_number"`
	SkPnsDate                 string `protobuf:"bytes,31,opt,name=sk_pns_date,json=skPnsDate,proto3" json:"sk_pns_date"`
	TmtPnsDate                string `protobuf:"bytes,32,opt,name=tmt_pns_date,json=tmtPnsDate,proto3" json:"tmt_pns_date"`
	PnsCategory               string `protobuf:"bytes,33,opt,name=pns_category,json=pnsCategory,proto3" json:"pns_category"`
	PnsOathDate               string `protobuf:"bytes,34,opt,name=pns_oath_date,json=pnsOathDate,proto3" json:"pns_oath_date"`
	JoinDate                  string `protobuf:"bytes,35,opt,name=join_date,json=joinDate,proto3" json:"join_date"`
	EndDate                   string `protobuf:"bytes,36,opt,name=end_date,json=endDate,proto3" json:"end_date"`
	TaspenNumber              string `protobuf:"bytes,37,opt,name=taspen_number,json=taspenNumber,proto3" json:"taspen_number"`
	FormerInstance            string `protobuf:"bytes,38,opt,name=former_instance,json=formerInstance,proto3" json:"former_instance"`
	Remarks                   string `protobuf:"bytes,39,opt,name=remarks,proto3" json:"remarks"`
	LecturerNumber            string `protobuf:"bytes,40,opt,name=lecturer_number,json=lecturerNumber,proto3" json:"lecturer_number"`
	AcademicPosition          string `protobuf:"bytes,41,opt,name=academic_position,json=academicPosition,proto3" json:"academic_position"`
	EmploymentStatus          string `protobuf:"bytes,42,opt,name=employment_status,json=employmentStatus,proto3" json:"employment_status"`
	Expertise                 string `protobuf:"bytes,43,opt,name=expertise,proto3" json:"expertise"`
	HighestDegree             string `protobuf:"bytes,44,opt,name=highest_degree,json=highestDegree,proto3" json:"highest_degree"`
	InstanceCode              string `protobuf:"bytes,45,opt,name=instance_code,json=instanceCode,proto3" json:"instance_code"`
	TeachingCertificateNumber string `protobuf:"bytes,46,opt,name=teaching_certificate_number,json=teachingCertificateNumber,proto3" json:"teaching_certificate_number"`
	TeachingPermitNumber      string `protobuf:"bytes,47,opt,name=teaching_permit_number,json=teachingPermitNumber,proto3" json:"teaching_permit_number"`
	Status                    string `protobuf:"bytes,48,opt,name=status,proto3" json:"status"`
	ResignSemester            string `protobuf:"bytes,49,opt,name=resign_semester,json=resignSemester,proto3" json:"resign_semester"`
	ExpertiseGroupId          string `protobuf:"bytes,50,opt,name=expertise_group_id,json=expertiseGroupId,proto3" json:"expertise_group_id"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{8}
}

func (x *CreateRequest) GetIdNationalLecturer() string {
	if x != nil {
		return x.IdNationalLecturer
	}
	return ""
}

func (x *CreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRequest) GetFrontTitle() string {
	if x != nil {
		return x.FrontTitle
	}
	return ""
}

func (x *CreateRequest) GetBackDegree() string {
	if x != nil {
		return x.BackDegree
	}
	return ""
}

func (x *CreateRequest) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *CreateRequest) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *CreateRequest) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *CreateRequest) GetBirthRegencyId() uint32 {
	if x != nil {
		return x.BirthRegencyId
	}
	return 0
}

func (x *CreateRequest) GetIdEmployee() string {
	if x != nil {
		return x.IdEmployee
	}
	return ""
}

func (x *CreateRequest) GetStambuk() string {
	if x != nil {
		return x.Stambuk
	}
	return ""
}

func (x *CreateRequest) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *CreateRequest) GetBloodType() string {
	if x != nil {
		return x.BloodType
	}
	return ""
}

func (x *CreateRequest) GetReligion() string {
	if x != nil {
		return x.Religion
	}
	return ""
}

func (x *CreateRequest) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *CreateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateRequest) GetRegencyId() uint32 {
	if x != nil {
		return x.RegencyId
	}
	return 0
}

func (x *CreateRequest) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *CreateRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *CreateRequest) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *CreateRequest) GetMobilePhoneNumber() string {
	if x != nil {
		return x.MobilePhoneNumber
	}
	return ""
}

func (x *CreateRequest) GetOfficePhoneNumber() string {
	if x != nil {
		return x.OfficePhoneNumber
	}
	return ""
}

func (x *CreateRequest) GetEmployeeType() string {
	if x != nil {
		return x.EmployeeType
	}
	return ""
}

func (x *CreateRequest) GetEmployeeStatus() string {
	if x != nil {
		return x.EmployeeStatus
	}
	return ""
}

func (x *CreateRequest) GetSkCpnsNumber() string {
	if x != nil {
		return x.SkCpnsNumber
	}
	return ""
}

func (x *CreateRequest) GetSkCpnsDate() string {
	if x != nil {
		return x.SkCpnsDate
	}
	return ""
}

func (x *CreateRequest) GetTmtCpnsDate() string {
	if x != nil {
		return x.TmtCpnsDate
	}
	return ""
}

func (x *CreateRequest) GetCpnsCategory() string {
	if x != nil {
		return x.CpnsCategory
	}
	return ""
}

func (x *CreateRequest) GetCpnsDurationMonth() uint32 {
	if x != nil {
		return x.CpnsDurationMonth
	}
	return 0
}

func (x *CreateRequest) GetPrePositionDate() string {
	if x != nil {
		return x.PrePositionDate
	}
	return ""
}

func (x *CreateRequest) GetSkPnsNumber() string {
	if x != nil {
		return x.SkPnsNumber
	}
	return ""
}

func (x *CreateRequest) GetSkPnsDate() string {
	if x != nil {
		return x.SkPnsDate
	}
	return ""
}

func (x *CreateRequest) GetTmtPnsDate() string {
	if x != nil {
		return x.TmtPnsDate
	}
	return ""
}

func (x *CreateRequest) GetPnsCategory() string {
	if x != nil {
		return x.PnsCategory
	}
	return ""
}

func (x *CreateRequest) GetPnsOathDate() string {
	if x != nil {
		return x.PnsOathDate
	}
	return ""
}

func (x *CreateRequest) GetJoinDate() string {
	if x != nil {
		return x.JoinDate
	}
	return ""
}

func (x *CreateRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *CreateRequest) GetTaspenNumber() string {
	if x != nil {
		return x.TaspenNumber
	}
	return ""
}

func (x *CreateRequest) GetFormerInstance() string {
	if x != nil {
		return x.FormerInstance
	}
	return ""
}

func (x *CreateRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *CreateRequest) GetLecturerNumber() string {
	if x != nil {
		return x.LecturerNumber
	}
	return ""
}

func (x *CreateRequest) GetAcademicPosition() string {
	if x != nil {
		return x.AcademicPosition
	}
	return ""
}

func (x *CreateRequest) GetEmploymentStatus() string {
	if x != nil {
		return x.EmploymentStatus
	}
	return ""
}

func (x *CreateRequest) GetExpertise() string {
	if x != nil {
		return x.Expertise
	}
	return ""
}

func (x *CreateRequest) GetHighestDegree() string {
	if x != nil {
		return x.HighestDegree
	}
	return ""
}

func (x *CreateRequest) GetInstanceCode() string {
	if x != nil {
		return x.InstanceCode
	}
	return ""
}

func (x *CreateRequest) GetTeachingCertificateNumber() string {
	if x != nil {
		return x.TeachingCertificateNumber
	}
	return ""
}

func (x *CreateRequest) GetTeachingPermitNumber() string {
	if x != nil {
		return x.TeachingPermitNumber
	}
	return ""
}

func (x *CreateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreateRequest) GetResignSemester() string {
	if x != nil {
		return x.ResignSemester
	}
	return ""
}

func (x *CreateRequest) GetExpertiseGroupId() string {
	if x != nil {
		return x.ExpertiseGroupId
	}
	return ""
}

type CreateResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateResponseData) Reset() {
	*x = CreateResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponseData) ProtoMessage() {}

func (x *CreateResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponseData.ProtoReflect.Descriptor instead.
func (*CreateResponseData) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{9}
}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *CreateResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{10}
}

func (x *CreateResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *CreateResponse) GetData() *CreateResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	IdNationalLecturer        string `protobuf:"bytes,2,opt,name=id_national_lecturer,json=idNationalLecturer,proto3" json:"id_national_lecturer"`
	Name                      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	FrontTitle                string `protobuf:"bytes,4,opt,name=front_title,json=frontTitle,proto3" json:"front_title"`
	BackDegree                string `protobuf:"bytes,5,opt,name=back_degree,json=backDegree,proto3" json:"back_degree"`
	StudyProgramId            string `protobuf:"bytes,6,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	IdNumber                  string `protobuf:"bytes,7,opt,name=id_number,json=idNumber,proto3" json:"id_number"`
	BirthDate                 string `protobuf:"bytes,8,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
	BirthRegencyId            uint32 `protobuf:"varint,9,opt,name=birth_regency_id,json=birthRegencyId,proto3" json:"birth_regency_id"`
	IdEmployee                string `protobuf:"bytes,10,opt,name=id_employee,json=idEmployee,proto3" json:"id_employee"`
	Stambuk                   string `protobuf:"bytes,11,opt,name=stambuk,proto3" json:"stambuk"`
	Sex                       string `protobuf:"bytes,12,opt,name=sex,proto3" json:"sex"`
	BloodType                 string `protobuf:"bytes,13,opt,name=blood_type,json=bloodType,proto3" json:"blood_type"`
	Religion                  string `protobuf:"bytes,14,opt,name=religion,proto3" json:"religion"`
	MaritalStatus             string `protobuf:"bytes,15,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status"`
	Address                   string `protobuf:"bytes,16,opt,name=address,proto3" json:"address"`
	RegencyId                 uint32 `protobuf:"varint,17,opt,name=regency_id,json=regencyId,proto3" json:"regency_id"`
	PostalCode                string `protobuf:"bytes,18,opt,name=postal_code,json=postalCode,proto3" json:"postal_code"`
	PhoneNumber               string `protobuf:"bytes,19,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	Fax                       string `protobuf:"bytes,20,opt,name=fax,proto3" json:"fax"`
	MobilePhoneNumber         string `protobuf:"bytes,21,opt,name=mobile_phone_number,json=mobilePhoneNumber,proto3" json:"mobile_phone_number"`
	OfficePhoneNumber         string `protobuf:"bytes,22,opt,name=office_phone_number,json=officePhoneNumber,proto3" json:"office_phone_number"`
	EmployeeType              string `protobuf:"bytes,23,opt,name=employee_type,json=employeeType,proto3" json:"employee_type"`
	EmployeeStatus            string `protobuf:"bytes,24,opt,name=employee_status,json=employeeStatus,proto3" json:"employee_status"`
	SkCpnsNumber              string `protobuf:"bytes,25,opt,name=sk_cpns_number,json=skCpnsNumber,proto3" json:"sk_cpns_number"`
	SkCpnsDate                string `protobuf:"bytes,26,opt,name=sk_cpns_date,json=skCpnsDate,proto3" json:"sk_cpns_date"`
	TmtCpnsDate               string `protobuf:"bytes,27,opt,name=tmt_cpns_date,json=tmtCpnsDate,proto3" json:"tmt_cpns_date"`
	CpnsCategory              string `protobuf:"bytes,28,opt,name=cpns_category,json=cpnsCategory,proto3" json:"cpns_category"`
	CpnsDurationMonth         uint32 `protobuf:"varint,29,opt,name=cpns_duration_month,json=cpnsDurationMonth,proto3" json:"cpns_duration_month"`
	PrePositionDate           string `protobuf:"bytes,30,opt,name=pre_position_date,json=prePositionDate,proto3" json:"pre_position_date"`
	SkPnsNumber               string `protobuf:"bytes,31,opt,name=sk_pns_number,json=skPnsNumber,proto3" json:"sk_pns_number"`
	SkPnsDate                 string `protobuf:"bytes,32,opt,name=sk_pns_date,json=skPnsDate,proto3" json:"sk_pns_date"`
	TmtPnsDate                string `protobuf:"bytes,33,opt,name=tmt_pns_date,json=tmtPnsDate,proto3" json:"tmt_pns_date"`
	PnsCategory               string `protobuf:"bytes,34,opt,name=pns_category,json=pnsCategory,proto3" json:"pns_category"`
	PnsOathDate               string `protobuf:"bytes,35,opt,name=pns_oath_date,json=pnsOathDate,proto3" json:"pns_oath_date"`
	JoinDate                  string `protobuf:"bytes,36,opt,name=join_date,json=joinDate,proto3" json:"join_date"`
	EndDate                   string `protobuf:"bytes,37,opt,name=end_date,json=endDate,proto3" json:"end_date"`
	TaspenNumber              string `protobuf:"bytes,38,opt,name=taspen_number,json=taspenNumber,proto3" json:"taspen_number"`
	FormerInstance            string `protobuf:"bytes,39,opt,name=former_instance,json=formerInstance,proto3" json:"former_instance"`
	Remarks                   string `protobuf:"bytes,40,opt,name=remarks,proto3" json:"remarks"`
	LecturerNumber            string `protobuf:"bytes,41,opt,name=lecturer_number,json=lecturerNumber,proto3" json:"lecturer_number"`
	AcademicPosition          string `protobuf:"bytes,42,opt,name=academic_position,json=academicPosition,proto3" json:"academic_position"`
	EmploymentStatus          string `protobuf:"bytes,43,opt,name=employment_status,json=employmentStatus,proto3" json:"employment_status"`
	Expertise                 string `protobuf:"bytes,44,opt,name=expertise,proto3" json:"expertise"`
	HighestDegree             string `protobuf:"bytes,45,opt,name=highest_degree,json=highestDegree,proto3" json:"highest_degree"`
	InstanceCode              string `protobuf:"bytes,46,opt,name=instance_code,json=instanceCode,proto3" json:"instance_code"`
	TeachingCertificateNumber string `protobuf:"bytes,47,opt,name=teaching_certificate_number,json=teachingCertificateNumber,proto3" json:"teaching_certificate_number"`
	TeachingPermitNumber      string `protobuf:"bytes,48,opt,name=teaching_permit_number,json=teachingPermitNumber,proto3" json:"teaching_permit_number"`
	Status                    string `protobuf:"bytes,49,opt,name=status,proto3" json:"status"`
	ResignSemester            string `protobuf:"bytes,50,opt,name=resign_semester,json=resignSemester,proto3" json:"resign_semester"`
	ExpertiseGroupId          string `protobuf:"bytes,51,opt,name=expertise_group_id,json=expertiseGroupId,proto3" json:"expertise_group_id"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRequest) GetIdNationalLecturer() string {
	if x != nil {
		return x.IdNationalLecturer
	}
	return ""
}

func (x *UpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRequest) GetFrontTitle() string {
	if x != nil {
		return x.FrontTitle
	}
	return ""
}

func (x *UpdateRequest) GetBackDegree() string {
	if x != nil {
		return x.BackDegree
	}
	return ""
}

func (x *UpdateRequest) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *UpdateRequest) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *UpdateRequest) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *UpdateRequest) GetBirthRegencyId() uint32 {
	if x != nil {
		return x.BirthRegencyId
	}
	return 0
}

func (x *UpdateRequest) GetIdEmployee() string {
	if x != nil {
		return x.IdEmployee
	}
	return ""
}

func (x *UpdateRequest) GetStambuk() string {
	if x != nil {
		return x.Stambuk
	}
	return ""
}

func (x *UpdateRequest) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *UpdateRequest) GetBloodType() string {
	if x != nil {
		return x.BloodType
	}
	return ""
}

func (x *UpdateRequest) GetReligion() string {
	if x != nil {
		return x.Religion
	}
	return ""
}

func (x *UpdateRequest) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *UpdateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateRequest) GetRegencyId() uint32 {
	if x != nil {
		return x.RegencyId
	}
	return 0
}

func (x *UpdateRequest) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *UpdateRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UpdateRequest) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *UpdateRequest) GetMobilePhoneNumber() string {
	if x != nil {
		return x.MobilePhoneNumber
	}
	return ""
}

func (x *UpdateRequest) GetOfficePhoneNumber() string {
	if x != nil {
		return x.OfficePhoneNumber
	}
	return ""
}

func (x *UpdateRequest) GetEmployeeType() string {
	if x != nil {
		return x.EmployeeType
	}
	return ""
}

func (x *UpdateRequest) GetEmployeeStatus() string {
	if x != nil {
		return x.EmployeeStatus
	}
	return ""
}

func (x *UpdateRequest) GetSkCpnsNumber() string {
	if x != nil {
		return x.SkCpnsNumber
	}
	return ""
}

func (x *UpdateRequest) GetSkCpnsDate() string {
	if x != nil {
		return x.SkCpnsDate
	}
	return ""
}

func (x *UpdateRequest) GetTmtCpnsDate() string {
	if x != nil {
		return x.TmtCpnsDate
	}
	return ""
}

func (x *UpdateRequest) GetCpnsCategory() string {
	if x != nil {
		return x.CpnsCategory
	}
	return ""
}

func (x *UpdateRequest) GetCpnsDurationMonth() uint32 {
	if x != nil {
		return x.CpnsDurationMonth
	}
	return 0
}

func (x *UpdateRequest) GetPrePositionDate() string {
	if x != nil {
		return x.PrePositionDate
	}
	return ""
}

func (x *UpdateRequest) GetSkPnsNumber() string {
	if x != nil {
		return x.SkPnsNumber
	}
	return ""
}

func (x *UpdateRequest) GetSkPnsDate() string {
	if x != nil {
		return x.SkPnsDate
	}
	return ""
}

func (x *UpdateRequest) GetTmtPnsDate() string {
	if x != nil {
		return x.TmtPnsDate
	}
	return ""
}

func (x *UpdateRequest) GetPnsCategory() string {
	if x != nil {
		return x.PnsCategory
	}
	return ""
}

func (x *UpdateRequest) GetPnsOathDate() string {
	if x != nil {
		return x.PnsOathDate
	}
	return ""
}

func (x *UpdateRequest) GetJoinDate() string {
	if x != nil {
		return x.JoinDate
	}
	return ""
}

func (x *UpdateRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *UpdateRequest) GetTaspenNumber() string {
	if x != nil {
		return x.TaspenNumber
	}
	return ""
}

func (x *UpdateRequest) GetFormerInstance() string {
	if x != nil {
		return x.FormerInstance
	}
	return ""
}

func (x *UpdateRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *UpdateRequest) GetLecturerNumber() string {
	if x != nil {
		return x.LecturerNumber
	}
	return ""
}

func (x *UpdateRequest) GetAcademicPosition() string {
	if x != nil {
		return x.AcademicPosition
	}
	return ""
}

func (x *UpdateRequest) GetEmploymentStatus() string {
	if x != nil {
		return x.EmploymentStatus
	}
	return ""
}

func (x *UpdateRequest) GetExpertise() string {
	if x != nil {
		return x.Expertise
	}
	return ""
}

func (x *UpdateRequest) GetHighestDegree() string {
	if x != nil {
		return x.HighestDegree
	}
	return ""
}

func (x *UpdateRequest) GetInstanceCode() string {
	if x != nil {
		return x.InstanceCode
	}
	return ""
}

func (x *UpdateRequest) GetTeachingCertificateNumber() string {
	if x != nil {
		return x.TeachingCertificateNumber
	}
	return ""
}

func (x *UpdateRequest) GetTeachingPermitNumber() string {
	if x != nil {
		return x.TeachingPermitNumber
	}
	return ""
}

func (x *UpdateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateRequest) GetResignSemester() string {
	if x != nil {
		return x.ResignSemester
	}
	return ""
}

func (x *UpdateRequest) GetExpertiseGroupId() string {
	if x != nil {
		return x.ExpertiseGroupId
	}
	return ""
}

type UpdateResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateResponseData) Reset() {
	*x = UpdateResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponseData) ProtoMessage() {}

func (x *UpdateResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponseData.ProtoReflect.Descriptor instead.
func (*UpdateResponseData) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{12}
}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *UpdateResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UpdateResponse) GetData() *UpdateResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResponseData) Reset() {
	*x = DeleteResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponseData) ProtoMessage() {}

func (x *DeleteResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponseData.ProtoReflect.Descriptor instead.
func (*DeleteResponseData) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{15}
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *DeleteResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DeleteResponse) GetData() *DeleteResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page               uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit              uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Search             string `protobuf:"bytes,3,opt,name=search,proto3" json:"search"`
	StudyProgramId     string `protobuf:"bytes,4,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	IdNationalLecturer string `protobuf:"bytes,5,opt,name=id_national_lecturer,json=idNationalLecturer,proto3" json:"id_national_lecturer"`
	SemesterId         string `protobuf:"bytes,6,opt,name=semester_id,json=semesterId,proto3" json:"semester_id"`
}

func (x *GetScheduleRequest) Reset() {
	*x = GetScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleRequest) ProtoMessage() {}

func (x *GetScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleRequest.ProtoReflect.Descriptor instead.
func (*GetScheduleRequest) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{17}
}

func (x *GetScheduleRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetScheduleRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetScheduleRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetScheduleRequest) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *GetScheduleRequest) GetIdNationalLecturer() string {
	if x != nil {
		return x.IdNationalLecturer
	}
	return ""
}

func (x *GetScheduleRequest) GetSemesterId() string {
	if x != nil {
		return x.SemesterId
	}
	return ""
}

type GetScheduleResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	IdNationalLecturer string `protobuf:"bytes,2,opt,name=id_national_lecturer,json=idNationalLecturer,proto3" json:"id_national_lecturer"`
	Name               string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	FrontTitle         string `protobuf:"bytes,4,opt,name=front_title,json=frontTitle,proto3" json:"front_title"`
	BackDegree         string `protobuf:"bytes,5,opt,name=back_degree,json=backDegree,proto3" json:"back_degree"`
	StudyProgramName   string `protobuf:"bytes,6,opt,name=study_program_name,json=studyProgramName,proto3" json:"study_program_name"`
	SubjectName        string `protobuf:"bytes,7,opt,name=subject_name,json=subjectName,proto3" json:"subject_name"`
	ClassName          string `protobuf:"bytes,8,opt,name=class_name,json=className,proto3" json:"class_name"`
	TotalSubjectCredit uint32 `protobuf:"varint,9,opt,name=total_subject_credit,json=totalSubjectCredit,proto3" json:"total_subject_credit"`
	LecturePlanDate    string `protobuf:"bytes,10,opt,name=lecture_plan_date,json=lecturePlanDate,proto3" json:"lecture_plan_date"`
	StartTime          uint32 `protobuf:"varint,11,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime            uint32 `protobuf:"varint,12,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	RoomName           string `protobuf:"bytes,13,opt,name=room_name,json=roomName,proto3" json:"room_name"`
	TotalParticipant   uint32 `protobuf:"varint,14,opt,name=total_participant,json=totalParticipant,proto3" json:"total_participant"`
}

func (x *GetScheduleResponseData) Reset() {
	*x = GetScheduleResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduleResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleResponseData) ProtoMessage() {}

func (x *GetScheduleResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleResponseData.ProtoReflect.Descriptor instead.
func (*GetScheduleResponseData) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{18}
}

func (x *GetScheduleResponseData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetScheduleResponseData) GetIdNationalLecturer() string {
	if x != nil {
		return x.IdNationalLecturer
	}
	return ""
}

func (x *GetScheduleResponseData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetScheduleResponseData) GetFrontTitle() string {
	if x != nil {
		return x.FrontTitle
	}
	return ""
}

func (x *GetScheduleResponseData) GetBackDegree() string {
	if x != nil {
		return x.BackDegree
	}
	return ""
}

func (x *GetScheduleResponseData) GetStudyProgramName() string {
	if x != nil {
		return x.StudyProgramName
	}
	return ""
}

func (x *GetScheduleResponseData) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *GetScheduleResponseData) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *GetScheduleResponseData) GetTotalSubjectCredit() uint32 {
	if x != nil {
		return x.TotalSubjectCredit
	}
	return 0
}

func (x *GetScheduleResponseData) GetLecturePlanDate() string {
	if x != nil {
		return x.LecturePlanDate
	}
	return ""
}

func (x *GetScheduleResponseData) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetScheduleResponseData) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetScheduleResponseData) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *GetScheduleResponseData) GetTotalParticipant() uint32 {
	if x != nil {
		return x.TotalParticipant
	}
	return 0
}

type GetScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta       *Meta                      `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Pagination *Pagination                `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	Data       []*GetScheduleResponseData `protobuf:"bytes,3,rep,name=data,proto3" json:"data"`
}

func (x *GetScheduleResponse) Reset() {
	*x = GetScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleResponse) ProtoMessage() {}

func (x *GetScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleResponse.ProtoReflect.Descriptor instead.
func (*GetScheduleResponse) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{19}
}

func (x *GetScheduleResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetScheduleResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetScheduleResponse) GetData() []*GetScheduleResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAssignedClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LecturerId string `protobuf:"bytes,1,opt,name=lecturer_id,json=lecturerId,proto3" json:"lecturer_id"`
	SemesterId string `protobuf:"bytes,2,opt,name=semester_id,json=semesterId,proto3" json:"semester_id"`
}

func (x *GetAssignedClassRequest) Reset() {
	*x = GetAssignedClassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssignedClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssignedClassRequest) ProtoMessage() {}

func (x *GetAssignedClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssignedClassRequest.ProtoReflect.Descriptor instead.
func (*GetAssignedClassRequest) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{20}
}

func (x *GetAssignedClassRequest) GetLecturerId() string {
	if x != nil {
		return x.LecturerId
	}
	return ""
}

func (x *GetAssignedClassRequest) GetSemesterId() string {
	if x != nil {
		return x.SemesterId
	}
	return ""
}

type GetAssignedClassResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                 string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	SubjectCode          string  `protobuf:"bytes,3,opt,name=subject_code,json=subjectCode,proto3" json:"subject_code"`
	SubjectName          string  `protobuf:"bytes,4,opt,name=subject_name,json=subjectName,proto3" json:"subject_name"`
	TheoryCredit         uint32  `protobuf:"varint,5,opt,name=theory_credit,json=theoryCredit,proto3" json:"theory_credit"`
	PracticumCredit      uint32  `protobuf:"varint,6,opt,name=practicum_credit,json=practicumCredit,proto3" json:"practicum_credit"`
	FieldPracticumCredit uint32  `protobuf:"varint,7,opt,name=field_practicum_credit,json=fieldPracticumCredit,proto3" json:"field_practicum_credit"`
	TotalAttendance      uint32  `protobuf:"varint,8,opt,name=total_attendance,json=totalAttendance,proto3" json:"total_attendance"`
	TotalLectureDone     uint32  `protobuf:"varint,9,opt,name=total_lecture_done,json=totalLectureDone,proto3" json:"total_lecture_done"`
	AttendancePercentage float64 `protobuf:"fixed64,10,opt,name=attendance_percentage,json=attendancePercentage,proto3" json:"attendance_percentage"`
}

func (x *GetAssignedClassResponseData) Reset() {
	*x = GetAssignedClassResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssignedClassResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssignedClassResponseData) ProtoMessage() {}

func (x *GetAssignedClassResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssignedClassResponseData.ProtoReflect.Descriptor instead.
func (*GetAssignedClassResponseData) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{21}
}

func (x *GetAssignedClassResponseData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetAssignedClassResponseData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAssignedClassResponseData) GetSubjectCode() string {
	if x != nil {
		return x.SubjectCode
	}
	return ""
}

func (x *GetAssignedClassResponseData) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *GetAssignedClassResponseData) GetTheoryCredit() uint32 {
	if x != nil {
		return x.TheoryCredit
	}
	return 0
}

func (x *GetAssignedClassResponseData) GetPracticumCredit() uint32 {
	if x != nil {
		return x.PracticumCredit
	}
	return 0
}

func (x *GetAssignedClassResponseData) GetFieldPracticumCredit() uint32 {
	if x != nil {
		return x.FieldPracticumCredit
	}
	return 0
}

func (x *GetAssignedClassResponseData) GetTotalAttendance() uint32 {
	if x != nil {
		return x.TotalAttendance
	}
	return 0
}

func (x *GetAssignedClassResponseData) GetTotalLectureDone() uint32 {
	if x != nil {
		return x.TotalLectureDone
	}
	return 0
}

func (x *GetAssignedClassResponseData) GetAttendancePercentage() float64 {
	if x != nil {
		return x.AttendancePercentage
	}
	return 0
}

type GetAssignedClassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                           `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data []*GetAssignedClassResponseData `protobuf:"bytes,2,rep,name=data,proto3" json:"data"`
}

func (x *GetAssignedClassResponse) Reset() {
	*x = GetAssignedClassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_lecturer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssignedClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssignedClassResponse) ProtoMessage() {}

func (x *GetAssignedClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_lecturer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssignedClassResponse.ProtoReflect.Descriptor instead.
func (*GetAssignedClassResponse) Descriptor() ([]byte, []int) {
	return file_admin_lecturer_proto_rawDescGZIP(), []int{22}
}

func (x *GetAssignedClassResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetAssignedClassResponse) GetData() []*GetAssignedClassResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_admin_lecturer_proto protoreflect.FileDescriptor

var file_admin_lecturer_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x72, 0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x72, 0x65,
	0x76, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xc3, 0x04, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x64,
	0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x64, 0x4e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x68, 0x61, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x22, 0x9a, 0x07, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x14, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x69, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x6b, 0x74, 0x69, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x69, 0x6b, 0x74, 0x69, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x18, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4a, 0x0a, 0x21, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x21,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x1f, 0x61, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1c, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0xb0,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x82, 0x11, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69,
	0x64, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64,
	0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63,
	0x6b, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x69, 0x72, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x62, 0x69, 0x72, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x64, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x64, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x6d, 0x62, 0x75, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x6d, 0x62, 0x75, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x6f,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72,
	0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x61, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x61, 0x78, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x13, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x6b, 0x5f, 0x63, 0x70, 0x6e, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6b, 0x43, 0x70, 0x6e, 0x73, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x6b, 0x5f, 0x63, 0x70, 0x6e, 0x73, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x43, 0x70, 0x6e, 0x73,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6d, 0x74, 0x5f, 0x63, 0x70, 0x6e, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6d, 0x74,
	0x43, 0x70, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x70, 0x6e, 0x73,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x70, 0x6e, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x70, 0x6e, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x70, 0x6e, 0x73,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6b, 0x5f,
	0x70, 0x6e, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x6b, 0x50, 0x6e, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0b, 0x73, 0x6b, 0x5f, 0x70, 0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6b, 0x50, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x74, 0x6d, 0x74, 0x5f, 0x70, 0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6d, 0x74, 0x50, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x6e, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6e, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6e, 0x73, 0x5f, 0x6f, 0x61, 0x74, 0x68, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6e, 0x73, 0x4f, 0x61,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x61, 0x73, 0x70, 0x65, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x70, 0x65, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x69, 0x63, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x65, 0x6d, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x9f, 0x0e, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x72, 0x65,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x64, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x62, 0x75, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x62, 0x75, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x61,
	0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x61, 0x78, 0x12, 0x2e, 0x0a, 0x13,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6b,
	0x5f, 0x63, 0x70, 0x6e, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x6b, 0x43, 0x70, 0x6e, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0c, 0x73, 0x6b, 0x5f, 0x63, 0x70, 0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x43, 0x70, 0x6e, 0x73, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6d, 0x74, 0x5f, 0x63, 0x70, 0x6e, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6d, 0x74, 0x43, 0x70,
	0x6e, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x70, 0x6e, 0x73, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x70, 0x6e, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x70, 0x6e, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x70, 0x6e, 0x73, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6b, 0x5f, 0x70, 0x6e,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x6b, 0x50, 0x6e, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x73,
	0x6b, 0x5f, 0x70, 0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x6b, 0x50, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74,
	0x6d, 0x74, 0x5f, 0x70, 0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x6d, 0x74, 0x50, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x6e, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6e, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6e, 0x73, 0x5f, 0x6f, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6e, 0x73, 0x4f, 0x61, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x61, 0x73, 0x70, 0x65, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x70, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x69, 0x63, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68,
	0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x72, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xaf, 0x0e, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x69, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x64,
	0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x64, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x6d, 0x62, 0x75, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x6d, 0x62, 0x75, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x6f, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69,
	0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x61, 0x78, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x61, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6b, 0x5f, 0x63, 0x70, 0x6e,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x6b, 0x43, 0x70, 0x6e, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x6b, 0x5f, 0x63, 0x70, 0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x43, 0x70, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x74, 0x6d, 0x74, 0x5f, 0x63, 0x70, 0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6d, 0x74, 0x43, 0x70, 0x6e, 0x73, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x70, 0x6e, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x70, 0x6e, 0x73, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x70, 0x6e, 0x73, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x70, 0x6e, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6b, 0x5f, 0x70, 0x6e, 0x73, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6b, 0x50, 0x6e,
	0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x6b, 0x5f, 0x70, 0x6e,
	0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6b,
	0x50, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6d, 0x74, 0x5f, 0x70,
	0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x6d, 0x74, 0x50, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6e, 0x73,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x6e, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0d,
	0x70, 0x6e, 0x73, 0x5f, 0x6f, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6e, 0x73, 0x4f, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x70,
	0x65, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x61, 0x73, 0x70, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x67,
	0x72, 0x65, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a,
	0x1b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x16, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x6d, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x72, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1f, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x72, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd3, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x64,
	0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x64, 0x4e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x83, 0x04,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x64, 0x5f,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x67, 0x72, 0x65,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f,
	0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5b,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9c, 0x03, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74,
	0x68, 0x65, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x63, 0x75, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0xdc, 0x04, 0x0a, 0x14, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1d,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x22,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x27, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x19, 0x5a, 0x17, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_lecturer_proto_rawDescOnce sync.Once
	file_admin_lecturer_proto_rawDescData = file_admin_lecturer_proto_rawDesc
)

func file_admin_lecturer_proto_rawDescGZIP() []byte {
	file_admin_lecturer_proto_rawDescOnce.Do(func() {
		file_admin_lecturer_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_lecturer_proto_rawDescData)
	})
	return file_admin_lecturer_proto_rawDescData
}

var file_admin_lecturer_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_admin_lecturer_proto_goTypes = []interface{}{
	(*Meta)(nil),                         // 0: admin_lecturer.Meta
	(*Pagination)(nil),                   // 1: admin_lecturer.Pagination
	(*GetListRequest)(nil),               // 2: admin_lecturer.GetListRequest
	(*GetListResponseData)(nil),          // 3: admin_lecturer.GetListResponseData
	(*GetListResponse)(nil),              // 4: admin_lecturer.GetListResponse
	(*GetDetailRequest)(nil),             // 5: admin_lecturer.GetDetailRequest
	(*GetDetailResponseData)(nil),        // 6: admin_lecturer.GetDetailResponseData
	(*GetDetailResponse)(nil),            // 7: admin_lecturer.GetDetailResponse
	(*CreateRequest)(nil),                // 8: admin_lecturer.CreateRequest
	(*CreateResponseData)(nil),           // 9: admin_lecturer.CreateResponseData
	(*CreateResponse)(nil),               // 10: admin_lecturer.CreateResponse
	(*UpdateRequest)(nil),                // 11: admin_lecturer.UpdateRequest
	(*UpdateResponseData)(nil),           // 12: admin_lecturer.UpdateResponseData
	(*UpdateResponse)(nil),               // 13: admin_lecturer.UpdateResponse
	(*DeleteRequest)(nil),                // 14: admin_lecturer.DeleteRequest
	(*DeleteResponseData)(nil),           // 15: admin_lecturer.DeleteResponseData
	(*DeleteResponse)(nil),               // 16: admin_lecturer.DeleteResponse
	(*GetScheduleRequest)(nil),           // 17: admin_lecturer.GetScheduleRequest
	(*GetScheduleResponseData)(nil),      // 18: admin_lecturer.GetScheduleResponseData
	(*GetScheduleResponse)(nil),          // 19: admin_lecturer.GetScheduleResponse
	(*GetAssignedClassRequest)(nil),      // 20: admin_lecturer.GetAssignedClassRequest
	(*GetAssignedClassResponseData)(nil), // 21: admin_lecturer.GetAssignedClassResponseData
	(*GetAssignedClassResponse)(nil),     // 22: admin_lecturer.GetAssignedClassResponse
}
var file_admin_lecturer_proto_depIdxs = []int32{
	0,  // 0: admin_lecturer.GetListResponse.meta:type_name -> admin_lecturer.Meta
	1,  // 1: admin_lecturer.GetListResponse.pagination:type_name -> admin_lecturer.Pagination
	3,  // 2: admin_lecturer.GetListResponse.data:type_name -> admin_lecturer.GetListResponseData
	0,  // 3: admin_lecturer.GetDetailResponse.meta:type_name -> admin_lecturer.Meta
	6,  // 4: admin_lecturer.GetDetailResponse.data:type_name -> admin_lecturer.GetDetailResponseData
	0,  // 5: admin_lecturer.CreateResponse.meta:type_name -> admin_lecturer.Meta
	9,  // 6: admin_lecturer.CreateResponse.data:type_name -> admin_lecturer.CreateResponseData
	0,  // 7: admin_lecturer.UpdateResponse.meta:type_name -> admin_lecturer.Meta
	12, // 8: admin_lecturer.UpdateResponse.data:type_name -> admin_lecturer.UpdateResponseData
	0,  // 9: admin_lecturer.DeleteResponse.meta:type_name -> admin_lecturer.Meta
	15, // 10: admin_lecturer.DeleteResponse.data:type_name -> admin_lecturer.DeleteResponseData
	0,  // 11: admin_lecturer.GetScheduleResponse.meta:type_name -> admin_lecturer.Meta
	1,  // 12: admin_lecturer.GetScheduleResponse.pagination:type_name -> admin_lecturer.Pagination
	18, // 13: admin_lecturer.GetScheduleResponse.data:type_name -> admin_lecturer.GetScheduleResponseData
	0,  // 14: admin_lecturer.GetAssignedClassResponse.meta:type_name -> admin_lecturer.Meta
	21, // 15: admin_lecturer.GetAssignedClassResponse.data:type_name -> admin_lecturer.GetAssignedClassResponseData
	2,  // 16: admin_lecturer.AdminLecturerHandler.GetList:input_type -> admin_lecturer.GetListRequest
	5,  // 17: admin_lecturer.AdminLecturerHandler.GetDetail:input_type -> admin_lecturer.GetDetailRequest
	8,  // 18: admin_lecturer.AdminLecturerHandler.Create:input_type -> admin_lecturer.CreateRequest
	11, // 19: admin_lecturer.AdminLecturerHandler.Update:input_type -> admin_lecturer.UpdateRequest
	14, // 20: admin_lecturer.AdminLecturerHandler.Delete:input_type -> admin_lecturer.DeleteRequest
	17, // 21: admin_lecturer.AdminLecturerHandler.GetSchedule:input_type -> admin_lecturer.GetScheduleRequest
	20, // 22: admin_lecturer.AdminLecturerHandler.GetAssignedClass:input_type -> admin_lecturer.GetAssignedClassRequest
	4,  // 23: admin_lecturer.AdminLecturerHandler.GetList:output_type -> admin_lecturer.GetListResponse
	7,  // 24: admin_lecturer.AdminLecturerHandler.GetDetail:output_type -> admin_lecturer.GetDetailResponse
	10, // 25: admin_lecturer.AdminLecturerHandler.Create:output_type -> admin_lecturer.CreateResponse
	13, // 26: admin_lecturer.AdminLecturerHandler.Update:output_type -> admin_lecturer.UpdateResponse
	16, // 27: admin_lecturer.AdminLecturerHandler.Delete:output_type -> admin_lecturer.DeleteResponse
	19, // 28: admin_lecturer.AdminLecturerHandler.GetSchedule:output_type -> admin_lecturer.GetScheduleResponse
	22, // 29: admin_lecturer.AdminLecturerHandler.GetAssignedClass:output_type -> admin_lecturer.GetAssignedClassResponse
	23, // [23:30] is the sub-list for method output_type
	16, // [16:23] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_admin_lecturer_proto_init() }
func file_admin_lecturer_proto_init() {
	if File_admin_lecturer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_admin_lecturer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduleResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssignedClassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssignedClassResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_lecturer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssignedClassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_lecturer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_lecturer_proto_goTypes,
		DependencyIndexes: file_admin_lecturer_proto_depIdxs,
		MessageInfos:      file_admin_lecturer_proto_msgTypes,
	}.Build()
	File_admin_lecturer_proto = out.File
	file_admin_lecturer_proto_rawDesc = nil
	file_admin_lecturer_proto_goTypes = nil
	file_admin_lecturer_proto_depIdxs = nil
}
