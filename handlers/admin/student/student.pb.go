// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: admin/student.proto

package student

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Status  uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	Code    string `protobuf:"bytes,3,opt,name=code,proto3" json:"code"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{0}
}

func (x *Meta) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Meta) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Meta) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit        uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Prev         uint32 `protobuf:"varint,3,opt,name=prev,proto3" json:"prev"`
	Next         uint32 `protobuf:"varint,4,opt,name=next,proto3" json:"next"`
	TotalPages   uint32 `protobuf:"varint,5,opt,name=total_pages,json=totalPages,proto3" json:"total_pages"`
	TotalRecords uint32 `protobuf:"varint,6,opt,name=total_records,json=totalRecords,proto3" json:"total_records"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{1}
}

func (x *Pagination) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Pagination) GetPrev() uint32 {
	if x != nil {
		return x.Prev
	}
	return 0
}

func (x *Pagination) GetNext() uint32 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *Pagination) GetTotalPages() uint32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *Pagination) GetTotalRecords() uint32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page                 uint32   `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                uint32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	StudyProgramId       string   `protobuf:"bytes,3,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	StudentForceFrom     uint32   `protobuf:"varint,4,opt,name=student_force_from,json=studentForceFrom,proto3" json:"student_force_from"`
	StudentForceTo       uint32   `protobuf:"varint,5,opt,name=student_force_to,json=studentForceTo,proto3" json:"student_force_to"`
	NimNumberFrom        int64    `protobuf:"varint,6,opt,name=nim_number_from,json=nimNumberFrom,proto3" json:"nim_number_from"`
	NimNumberTo          int64    `protobuf:"varint,7,opt,name=nim_number_to,json=nimNumberTo,proto3" json:"nim_number_to"`
	Name                 string   `protobuf:"bytes,8,opt,name=name,proto3" json:"name"`
	Address              string   `protobuf:"bytes,9,opt,name=address,proto3" json:"address"`
	RegencyId            string   `protobuf:"bytes,10,opt,name=regency_id,json=regencyId,proto3" json:"regency_id"`
	Status               []string `protobuf:"bytes,11,rep,name=status,proto3" json:"status"`
	GetAcademicGuidance  bool     `protobuf:"varint,12,opt,name=get_academic_guidance,json=getAcademicGuidance,proto3" json:"get_academic_guidance"`
	HasAuthentication    string   `protobuf:"bytes,13,opt,name=has_authentication,json=hasAuthentication,proto3" json:"has_authentication"`
	StudyPlanSemesterId  string   `protobuf:"bytes,14,opt,name=study_plan_semester_id,json=studyPlanSemesterId,proto3" json:"study_plan_semester_id"`
	StudyPlanIsSubmitted string   `protobuf:"bytes,15,opt,name=study_plan_is_submitted,json=studyPlanIsSubmitted,proto3" json:"study_plan_is_submitted"`
	StudyPlanIsApproved  string   `protobuf:"bytes,16,opt,name=study_plan_is_approved,json=studyPlanIsApproved,proto3" json:"study_plan_is_approved"`
	HasStudyPlan         string   `protobuf:"bytes,17,opt,name=has_study_plan,json=hasStudyPlan,proto3" json:"has_study_plan"`
	StatusSemesterId     string   `protobuf:"bytes,18,opt,name=status_semester_id,json=statusSemesterId,proto3" json:"status_semester_id"`
	IsRegistered         string   `protobuf:"bytes,19,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered"`
	HasPaid              string   `protobuf:"bytes,20,opt,name=has_paid,json=hasPaid,proto3" json:"has_paid"`
	IsGraduateEligible   string   `protobuf:"bytes,21,opt,name=is_graduate_eligible,json=isGraduateEligible,proto3" json:"is_graduate_eligible"`
	IsThesisEligible     string   `protobuf:"bytes,22,opt,name=is_thesis_eligible,json=isThesisEligible,proto3" json:"is_thesis_eligible"`
	YudiciumSessionId    string   `protobuf:"bytes,23,opt,name=yudicium_session_id,json=yudiciumSessionId,proto3" json:"yudicium_session_id"`
}

func (x *GetListRequest) Reset() {
	*x = GetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRequest) ProtoMessage() {}

func (x *GetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRequest.ProtoReflect.Descriptor instead.
func (*GetListRequest) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{2}
}

func (x *GetListRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetListRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetListRequest) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *GetListRequest) GetStudentForceFrom() uint32 {
	if x != nil {
		return x.StudentForceFrom
	}
	return 0
}

func (x *GetListRequest) GetStudentForceTo() uint32 {
	if x != nil {
		return x.StudentForceTo
	}
	return 0
}

func (x *GetListRequest) GetNimNumberFrom() int64 {
	if x != nil {
		return x.NimNumberFrom
	}
	return 0
}

func (x *GetListRequest) GetNimNumberTo() int64 {
	if x != nil {
		return x.NimNumberTo
	}
	return 0
}

func (x *GetListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetListRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetListRequest) GetRegencyId() string {
	if x != nil {
		return x.RegencyId
	}
	return ""
}

func (x *GetListRequest) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetListRequest) GetGetAcademicGuidance() bool {
	if x != nil {
		return x.GetAcademicGuidance
	}
	return false
}

func (x *GetListRequest) GetHasAuthentication() string {
	if x != nil {
		return x.HasAuthentication
	}
	return ""
}

func (x *GetListRequest) GetStudyPlanSemesterId() string {
	if x != nil {
		return x.StudyPlanSemesterId
	}
	return ""
}

func (x *GetListRequest) GetStudyPlanIsSubmitted() string {
	if x != nil {
		return x.StudyPlanIsSubmitted
	}
	return ""
}

func (x *GetListRequest) GetStudyPlanIsApproved() string {
	if x != nil {
		return x.StudyPlanIsApproved
	}
	return ""
}

func (x *GetListRequest) GetHasStudyPlan() string {
	if x != nil {
		return x.HasStudyPlan
	}
	return ""
}

func (x *GetListRequest) GetStatusSemesterId() string {
	if x != nil {
		return x.StatusSemesterId
	}
	return ""
}

func (x *GetListRequest) GetIsRegistered() string {
	if x != nil {
		return x.IsRegistered
	}
	return ""
}

func (x *GetListRequest) GetHasPaid() string {
	if x != nil {
		return x.HasPaid
	}
	return ""
}

func (x *GetListRequest) GetIsGraduateEligible() string {
	if x != nil {
		return x.IsGraduateEligible
	}
	return ""
}

func (x *GetListRequest) GetIsThesisEligible() string {
	if x != nil {
		return x.IsThesisEligible
	}
	return ""
}

func (x *GetListRequest) GetYudiciumSessionId() string {
	if x != nil {
		return x.YudiciumSessionId
	}
	return ""
}

type GetListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                 string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                               string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Sex                                string  `protobuf:"bytes,3,opt,name=sex,proto3" json:"sex"`
	MaritalStatus                      string  `protobuf:"bytes,4,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status"`
	BirthRegencyId                     uint32  `protobuf:"varint,5,opt,name=birth_regency_id,json=birthRegencyId,proto3" json:"birth_regency_id"`
	BirthRegencyName                   string  `protobuf:"bytes,6,opt,name=birth_regency_name,json=birthRegencyName,proto3" json:"birth_regency_name"`
	BirthDate                          string  `protobuf:"bytes,7,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
	Religion                           string  `protobuf:"bytes,8,opt,name=religion,proto3" json:"religion"`
	Address                            string  `protobuf:"bytes,9,opt,name=address,proto3" json:"address"`
	Rt                                 string  `protobuf:"bytes,10,opt,name=rt,proto3" json:"rt"`
	Rw                                 string  `protobuf:"bytes,11,opt,name=rw,proto3" json:"rw"`
	VillageId                          uint32  `protobuf:"varint,12,opt,name=village_id,json=villageId,proto3" json:"village_id"`
	VillageName                        string  `protobuf:"bytes,13,opt,name=village_name,json=villageName,proto3" json:"village_name"`
	DistrictId                         uint32  `protobuf:"varint,14,opt,name=district_id,json=districtId,proto3" json:"district_id"`
	DistrictName                       string  `protobuf:"bytes,15,opt,name=district_name,json=districtName,proto3" json:"district_name"`
	RegencyId                          uint32  `protobuf:"varint,16,opt,name=regency_id,json=regencyId,proto3" json:"regency_id"`
	RegencyName                        string  `protobuf:"bytes,17,opt,name=regency_name,json=regencyName,proto3" json:"regency_name"`
	ProvinceId                         uint32  `protobuf:"varint,18,opt,name=province_id,json=provinceId,proto3" json:"province_id"`
	ProvinceName                       string  `protobuf:"bytes,19,opt,name=province_name,json=provinceName,proto3" json:"province_name"`
	CountryId                          uint32  `protobuf:"varint,20,opt,name=country_id,json=countryId,proto3" json:"country_id"`
	CountryName                        string  `protobuf:"bytes,21,opt,name=country_name,json=countryName,proto3" json:"country_name"`
	PostalCode                         string  `protobuf:"bytes,22,opt,name=postal_code,json=postalCode,proto3" json:"postal_code"`
	PreviousAddress                    string  `protobuf:"bytes,23,opt,name=previous_address,json=previousAddress,proto3" json:"previous_address"`
	IdNumber                           string  `protobuf:"bytes,24,opt,name=id_number,json=idNumber,proto3" json:"id_number"`
	NpwpNumber                         string  `protobuf:"bytes,25,opt,name=npwp_number,json=npwpNumber,proto3" json:"npwp_number"`
	NisnNumber                         string  `protobuf:"bytes,26,opt,name=nisn_number,json=nisnNumber,proto3" json:"nisn_number"`
	ResidenceType                      string  `protobuf:"bytes,27,opt,name=residence_type,json=residenceType,proto3" json:"residence_type"`
	TransportationMean                 string  `protobuf:"bytes,28,opt,name=transportation_mean,json=transportationMean,proto3" json:"transportation_mean"`
	KpsReceiver                        string  `protobuf:"bytes,29,opt,name=kps_receiver,json=kpsReceiver,proto3" json:"kps_receiver"`
	PhoneNumber                        string  `protobuf:"bytes,30,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	MobilePhoneNumber                  string  `protobuf:"bytes,31,opt,name=mobile_phone_number,json=mobilePhoneNumber,proto3" json:"mobile_phone_number"`
	Email                              string  `protobuf:"bytes,32,opt,name=email,proto3" json:"email"`
	Homepage                           string  `protobuf:"bytes,33,opt,name=homepage,proto3" json:"homepage"`
	WorkType                           string  `protobuf:"bytes,34,opt,name=work_type,json=workType,proto3" json:"work_type"`
	WorkPlace                          string  `protobuf:"bytes,35,opt,name=work_place,json=workPlace,proto3" json:"work_place"`
	Nationality                        string  `protobuf:"bytes,36,opt,name=nationality,proto3" json:"nationality"`
	AskesNumber                        string  `protobuf:"bytes,37,opt,name=askes_number,json=askesNumber,proto3" json:"askes_number"`
	TotalBrother                       uint32  `protobuf:"varint,38,opt,name=total_brother,json=totalBrother,proto3" json:"total_brother"`
	TotalSister                        uint32  `protobuf:"varint,39,opt,name=total_sister,json=totalSister,proto3" json:"total_sister"`
	Hobby                              string  `protobuf:"bytes,40,opt,name=hobby,proto3" json:"hobby"`
	Experience                         string  `protobuf:"bytes,41,opt,name=experience,proto3" json:"experience"`
	TotalDependent                     uint32  `protobuf:"varint,42,opt,name=total_dependent,json=totalDependent,proto3" json:"total_dependent"`
	NimNumber                          int64   `protobuf:"varint,43,opt,name=nim_number,json=nimNumber,proto3" json:"nim_number"`
	StudentForce                       uint32  `protobuf:"varint,44,opt,name=student_force,json=studentForce,proto3" json:"student_force"`
	AdmittanceSemester                 string  `protobuf:"bytes,45,opt,name=admittance_semester,json=admittanceSemester,proto3" json:"admittance_semester"`
	StudyProgramId                     string  `protobuf:"bytes,46,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	StudyProgramName                   string  `protobuf:"bytes,47,opt,name=study_program_name,json=studyProgramName,proto3" json:"study_program_name"`
	CurriculumId                       string  `protobuf:"bytes,48,opt,name=curriculum_id,json=curriculumId,proto3" json:"curriculum_id"`
	CurriculumName                     string  `protobuf:"bytes,49,opt,name=curriculum_name,json=curriculumName,proto3" json:"curriculum_name"`
	AdmittanceTestNumber               string  `protobuf:"bytes,50,opt,name=admittance_test_number,json=admittanceTestNumber,proto3" json:"admittance_test_number"`
	AdmittanceDate                     string  `protobuf:"bytes,51,opt,name=admittance_date,json=admittanceDate,proto3" json:"admittance_date"`
	AdmittanceStatus                   string  `protobuf:"bytes,52,opt,name=admittance_status,json=admittanceStatus,proto3" json:"admittance_status"`
	TotalTransferCredit                uint32  `protobuf:"varint,53,opt,name=total_transfer_credit,json=totalTransferCredit,proto3" json:"total_transfer_credit"`
	PreviousCollege                    string  `protobuf:"bytes,54,opt,name=previous_college,json=previousCollege,proto3" json:"previous_college"`
	PreviousStudyProgram               string  `protobuf:"bytes,55,opt,name=previous_study_program,json=previousStudyProgram,proto3" json:"previous_study_program"`
	PreviousNimNumber                  int64   `protobuf:"varint,56,opt,name=previous_nim_number,json=previousNimNumber,proto3" json:"previous_nim_number"`
	PreviousNimAdmittanceYear          string  `protobuf:"bytes,57,opt,name=previous_nim_admittance_year,json=previousNimAdmittanceYear,proto3" json:"previous_nim_admittance_year"`
	Status                             string  `protobuf:"bytes,58,opt,name=status,proto3" json:"status"`
	IsForeignStudent                   bool    `protobuf:"varint,59,opt,name=is_foreign_student,json=isForeignStudent,proto3" json:"is_foreign_student"`
	CollegeEntranceType                string  `protobuf:"bytes,60,opt,name=college_entrance_type,json=collegeEntranceType,proto3" json:"college_entrance_type"`
	ClassTime                          string  `protobuf:"bytes,61,opt,name=class_time,json=classTime,proto3" json:"class_time"`
	FundSource                         string  `protobuf:"bytes,62,opt,name=fund_source,json=fundSource,proto3" json:"fund_source"`
	IsScholarshipGrantee               bool    `protobuf:"varint,63,opt,name=is_scholarship_grantee,json=isScholarshipGrantee,proto3" json:"is_scholarship_grantee"`
	HasCompleteRequirement             bool    `protobuf:"varint,64,opt,name=has_complete_requirement,json=hasCompleteRequirement,proto3" json:"has_complete_requirement"`
	SchoolCertificateType              string  `protobuf:"bytes,65,opt,name=school_certificate_type,json=schoolCertificateType,proto3" json:"school_certificate_type"`
	SchoolGraduationYear               string  `protobuf:"bytes,66,opt,name=school_graduation_year,json=schoolGraduationYear,proto3" json:"school_graduation_year"`
	SchoolName                         string  `protobuf:"bytes,67,opt,name=school_name,json=schoolName,proto3" json:"school_name"`
	SchoolAccreditation                string  `protobuf:"bytes,68,opt,name=school_accreditation,json=schoolAccreditation,proto3" json:"school_accreditation"`
	SchoolAddress                      string  `protobuf:"bytes,69,opt,name=school_address,json=schoolAddress,proto3" json:"school_address"`
	SchoolMajor                        string  `protobuf:"bytes,70,opt,name=school_major,json=schoolMajor,proto3" json:"school_major"`
	SchoolCertificateNumber            string  `protobuf:"bytes,71,opt,name=school_certificate_number,json=schoolCertificateNumber,proto3" json:"school_certificate_number"`
	SchoolCertificateDate              string  `protobuf:"bytes,72,opt,name=school_certificate_date,json=schoolCertificateDate,proto3" json:"school_certificate_date"`
	TotalSchoolFinalExamSubject        uint32  `protobuf:"varint,73,opt,name=total_school_final_exam_subject,json=totalSchoolFinalExamSubject,proto3" json:"total_school_final_exam_subject"`
	SchoolFinalExamScore               float64 `protobuf:"fixed64,74,opt,name=school_final_exam_score,json=schoolFinalExamScore,proto3" json:"school_final_exam_score"`
	GuardianName                       string  `protobuf:"bytes,75,opt,name=guardian_name,json=guardianName,proto3" json:"guardian_name"`
	GuardianBirthDate                  string  `protobuf:"bytes,76,opt,name=guardian_birth_date,json=guardianBirthDate,proto3" json:"guardian_birth_date"`
	GuardianDeathDate                  string  `protobuf:"bytes,77,opt,name=guardian_death_date,json=guardianDeathDate,proto3" json:"guardian_death_date"`
	GuardianAddress                    string  `protobuf:"bytes,78,opt,name=guardian_address,json=guardianAddress,proto3" json:"guardian_address"`
	GuardianRegencyId                  uint32  `protobuf:"varint,79,opt,name=guardian_regency_id,json=guardianRegencyId,proto3" json:"guardian_regency_id"`
	GuardianRegencyName                string  `protobuf:"bytes,80,opt,name=guardian_regency_name,json=guardianRegencyName,proto3" json:"guardian_regency_name"`
	GuardianPostalCode                 string  `protobuf:"bytes,81,opt,name=guardian_postal_code,json=guardianPostalCode,proto3" json:"guardian_postal_code"`
	GuardianPhoneNumber                string  `protobuf:"bytes,82,opt,name=guardian_phone_number,json=guardianPhoneNumber,proto3" json:"guardian_phone_number"`
	GuardianEmail                      string  `protobuf:"bytes,83,opt,name=guardian_email,json=guardianEmail,proto3" json:"guardian_email"`
	GuardianFinalAcademicBackground    string  `protobuf:"bytes,84,opt,name=guardian_final_academic_background,json=guardianFinalAcademicBackground,proto3" json:"guardian_final_academic_background"`
	GuardianOccupation                 string  `protobuf:"bytes,85,opt,name=guardian_occupation,json=guardianOccupation,proto3" json:"guardian_occupation"`
	FatherIdNumber                     string  `protobuf:"bytes,86,opt,name=father_id_number,json=fatherIdNumber,proto3" json:"father_id_number"`
	FatherName                         string  `protobuf:"bytes,87,opt,name=father_name,json=fatherName,proto3" json:"father_name"`
	FatherBirthDate                    string  `protobuf:"bytes,88,opt,name=father_birth_date,json=fatherBirthDate,proto3" json:"father_birth_date"`
	FatherDeathDate                    string  `protobuf:"bytes,89,opt,name=father_death_date,json=fatherDeathDate,proto3" json:"father_death_date"`
	MotherIdNumber                     string  `protobuf:"bytes,90,opt,name=mother_id_number,json=motherIdNumber,proto3" json:"mother_id_number"`
	MotherName                         string  `protobuf:"bytes,91,opt,name=mother_name,json=motherName,proto3" json:"mother_name"`
	MotherBirthDate                    string  `protobuf:"bytes,92,opt,name=mother_birth_date,json=motherBirthDate,proto3" json:"mother_birth_date"`
	MotherDeathDate                    string  `protobuf:"bytes,93,opt,name=mother_death_date,json=motherDeathDate,proto3" json:"mother_death_date"`
	ParentAddress                      string  `protobuf:"bytes,94,opt,name=parent_address,json=parentAddress,proto3" json:"parent_address"`
	ParentRegencyId                    uint32  `protobuf:"varint,95,opt,name=parent_regency_id,json=parentRegencyId,proto3" json:"parent_regency_id"`
	ParentRegencyName                  string  `protobuf:"bytes,96,opt,name=parent_regency_name,json=parentRegencyName,proto3" json:"parent_regency_name"`
	ParentPostalCode                   string  `protobuf:"bytes,97,opt,name=parent_postal_code,json=parentPostalCode,proto3" json:"parent_postal_code"`
	ParentPhoneNumber                  string  `protobuf:"bytes,98,opt,name=parent_phone_number,json=parentPhoneNumber,proto3" json:"parent_phone_number"`
	ParentEmail                        string  `protobuf:"bytes,99,opt,name=parent_email,json=parentEmail,proto3" json:"parent_email"`
	FatherFinalAcademicBackground      string  `protobuf:"bytes,100,opt,name=father_final_academic_background,json=fatherFinalAcademicBackground,proto3" json:"father_final_academic_background"`
	FatherOccupation                   string  `protobuf:"bytes,101,opt,name=father_occupation,json=fatherOccupation,proto3" json:"father_occupation"`
	MotherFinalAcademicBackground      string  `protobuf:"bytes,102,opt,name=mother_final_academic_background,json=motherFinalAcademicBackground,proto3" json:"mother_final_academic_background"`
	MotherOccupation                   string  `protobuf:"bytes,103,opt,name=mother_occupation,json=motherOccupation,proto3" json:"mother_occupation"`
	ParentIncome                       float64 `protobuf:"fixed64,104,opt,name=parent_income,json=parentIncome,proto3" json:"parent_income"`
	IsFinanciallyCapable               bool    `protobuf:"varint,105,opt,name=is_financially_capable,json=isFinanciallyCapable,proto3" json:"is_financially_capable"`
	AuthenticationId                   string  `protobuf:"bytes,106,opt,name=authentication_id,json=authenticationId,proto3" json:"authentication_id"`
	AuthenticationIsActive             bool    `protobuf:"varint,107,opt,name=authentication_is_active,json=authenticationIsActive,proto3" json:"authentication_is_active"`
	AuthenticationSuspensionRemarks    string  `protobuf:"bytes,108,opt,name=authentication_suspension_remarks,json=authenticationSuspensionRemarks,proto3" json:"authentication_suspension_remarks"`
	DiktiStudyProgramCode              string  `protobuf:"bytes,109,opt,name=dikti_study_program_code,json=diktiStudyProgramCode,proto3" json:"dikti_study_program_code"`
	AcademicGuidanceLecturerId         string  `protobuf:"bytes,110,opt,name=academic_guidance_lecturer_id,json=academicGuidanceLecturerId,proto3" json:"academic_guidance_lecturer_id"`
	AcademicGuidanceLecturerName       string  `protobuf:"bytes,111,opt,name=academic_guidance_lecturer_name,json=academicGuidanceLecturerName,proto3" json:"academic_guidance_lecturer_name"`
	AcademicGuidanceSemesterId         string  `protobuf:"bytes,112,opt,name=academic_guidance_semester_id,json=academicGuidanceSemesterId,proto3" json:"academic_guidance_semester_id"`
	AcademicGuidanceSemesterSchoolYear string  `protobuf:"bytes,113,opt,name=academic_guidance_semester_school_year,json=academicGuidanceSemesterSchoolYear,proto3" json:"academic_guidance_semester_school_year"`
	StudyPlanTotalMandatoryCredit      uint32  `protobuf:"varint,114,opt,name=study_plan_total_mandatory_credit,json=studyPlanTotalMandatoryCredit,proto3" json:"study_plan_total_mandatory_credit"`
	StudyPlanTotalOptionalCredit       uint32  `protobuf:"varint,115,opt,name=study_plan_total_optional_credit,json=studyPlanTotalOptionalCredit,proto3" json:"study_plan_total_optional_credit"`
	StudyPlanMaximumCredit             uint32  `protobuf:"varint,116,opt,name=study_plan_maximum_credit,json=studyPlanMaximumCredit,proto3" json:"study_plan_maximum_credit"`
	StudyPlanIsApproved                bool    `protobuf:"varint,117,opt,name=study_plan_is_approved,json=studyPlanIsApproved,proto3" json:"study_plan_is_approved"`
	CurrentSemesterPackage             uint32  `protobuf:"varint,118,opt,name=current_semester_package,json=currentSemesterPackage,proto3" json:"current_semester_package"`
	StudyPlanId                        string  `protobuf:"bytes,119,opt,name=study_plan_id,json=studyPlanId,proto3" json:"study_plan_id"`
	TotalStudyPlan                     uint32  `protobuf:"varint,120,opt,name=total_study_plan,json=totalStudyPlan,proto3" json:"total_study_plan"`
	StatusSemesterId                   string  `protobuf:"bytes,121,opt,name=status_semester_id,json=statusSemesterId,proto3" json:"status_semester_id"`
	StatusSemesterSchoolYear           string  `protobuf:"bytes,122,opt,name=status_semester_school_year,json=statusSemesterSchoolYear,proto3" json:"status_semester_school_year"`
	StatusSemesterType                 string  `protobuf:"bytes,123,opt,name=status_semester_type,json=statusSemesterType,proto3" json:"status_semester_type"`
	StatusDate                         string  `protobuf:"bytes,124,opt,name=status_date,json=statusDate,proto3" json:"status_date"`
	StatusReferenceNumber              string  `protobuf:"bytes,125,opt,name=status_reference_number,json=statusReferenceNumber,proto3" json:"status_reference_number"`
	StatusPurpose                      string  `protobuf:"bytes,126,opt,name=status_purpose,json=statusPurpose,proto3" json:"status_purpose"`
	StatusRemarks                      string  `protobuf:"bytes,127,opt,name=status_remarks,json=statusRemarks,proto3" json:"status_remarks"`
	Gpa                                float64 `protobuf:"fixed64,128,opt,name=gpa,proto3" json:"gpa"`
	TotalCredit                        uint32  `protobuf:"varint,129,opt,name=total_credit,json=totalCredit,proto3" json:"total_credit"`
	TranscriptIsArchived               bool    `protobuf:"varint,130,opt,name=transcript_is_archived,json=transcriptIsArchived,proto3" json:"transcript_is_archived"`
	HasPaid                            bool    `protobuf:"varint,131,opt,name=has_paid,json=hasPaid,proto3" json:"has_paid"`
	GraduationPredicate                string  `protobuf:"bytes,132,opt,name=graduation_predicate,json=graduationPredicate,proto3" json:"graduation_predicate"`
	StudyDurationMonth                 uint32  `protobuf:"varint,133,opt,name=study_duration_month,json=studyDurationMonth,proto3" json:"study_duration_month"`
	ThesisDurationMonth                uint32  `protobuf:"varint,134,opt,name=thesis_duration_month,json=thesisDurationMonth,proto3" json:"thesis_duration_month"`
	ThesisDurationSemester             uint32  `protobuf:"varint,135,opt,name=thesis_duration_semester,json=thesisDurationSemester,proto3" json:"thesis_duration_semester"`
}

func (x *GetListResponseData) Reset() {
	*x = GetListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponseData) ProtoMessage() {}

func (x *GetListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponseData.ProtoReflect.Descriptor instead.
func (*GetListResponseData) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{3}
}

func (x *GetListResponseData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetListResponseData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetListResponseData) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *GetListResponseData) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *GetListResponseData) GetBirthRegencyId() uint32 {
	if x != nil {
		return x.BirthRegencyId
	}
	return 0
}

func (x *GetListResponseData) GetBirthRegencyName() string {
	if x != nil {
		return x.BirthRegencyName
	}
	return ""
}

func (x *GetListResponseData) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *GetListResponseData) GetReligion() string {
	if x != nil {
		return x.Religion
	}
	return ""
}

func (x *GetListResponseData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetListResponseData) GetRt() string {
	if x != nil {
		return x.Rt
	}
	return ""
}

func (x *GetListResponseData) GetRw() string {
	if x != nil {
		return x.Rw
	}
	return ""
}

func (x *GetListResponseData) GetVillageId() uint32 {
	if x != nil {
		return x.VillageId
	}
	return 0
}

func (x *GetListResponseData) GetVillageName() string {
	if x != nil {
		return x.VillageName
	}
	return ""
}

func (x *GetListResponseData) GetDistrictId() uint32 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

func (x *GetListResponseData) GetDistrictName() string {
	if x != nil {
		return x.DistrictName
	}
	return ""
}

func (x *GetListResponseData) GetRegencyId() uint32 {
	if x != nil {
		return x.RegencyId
	}
	return 0
}

func (x *GetListResponseData) GetRegencyName() string {
	if x != nil {
		return x.RegencyName
	}
	return ""
}

func (x *GetListResponseData) GetProvinceId() uint32 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *GetListResponseData) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *GetListResponseData) GetCountryId() uint32 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *GetListResponseData) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *GetListResponseData) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *GetListResponseData) GetPreviousAddress() string {
	if x != nil {
		return x.PreviousAddress
	}
	return ""
}

func (x *GetListResponseData) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *GetListResponseData) GetNpwpNumber() string {
	if x != nil {
		return x.NpwpNumber
	}
	return ""
}

func (x *GetListResponseData) GetNisnNumber() string {
	if x != nil {
		return x.NisnNumber
	}
	return ""
}

func (x *GetListResponseData) GetResidenceType() string {
	if x != nil {
		return x.ResidenceType
	}
	return ""
}

func (x *GetListResponseData) GetTransportationMean() string {
	if x != nil {
		return x.TransportationMean
	}
	return ""
}

func (x *GetListResponseData) GetKpsReceiver() string {
	if x != nil {
		return x.KpsReceiver
	}
	return ""
}

func (x *GetListResponseData) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *GetListResponseData) GetMobilePhoneNumber() string {
	if x != nil {
		return x.MobilePhoneNumber
	}
	return ""
}

func (x *GetListResponseData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetListResponseData) GetHomepage() string {
	if x != nil {
		return x.Homepage
	}
	return ""
}

func (x *GetListResponseData) GetWorkType() string {
	if x != nil {
		return x.WorkType
	}
	return ""
}

func (x *GetListResponseData) GetWorkPlace() string {
	if x != nil {
		return x.WorkPlace
	}
	return ""
}

func (x *GetListResponseData) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *GetListResponseData) GetAskesNumber() string {
	if x != nil {
		return x.AskesNumber
	}
	return ""
}

func (x *GetListResponseData) GetTotalBrother() uint32 {
	if x != nil {
		return x.TotalBrother
	}
	return 0
}

func (x *GetListResponseData) GetTotalSister() uint32 {
	if x != nil {
		return x.TotalSister
	}
	return 0
}

func (x *GetListResponseData) GetHobby() string {
	if x != nil {
		return x.Hobby
	}
	return ""
}

func (x *GetListResponseData) GetExperience() string {
	if x != nil {
		return x.Experience
	}
	return ""
}

func (x *GetListResponseData) GetTotalDependent() uint32 {
	if x != nil {
		return x.TotalDependent
	}
	return 0
}

func (x *GetListResponseData) GetNimNumber() int64 {
	if x != nil {
		return x.NimNumber
	}
	return 0
}

func (x *GetListResponseData) GetStudentForce() uint32 {
	if x != nil {
		return x.StudentForce
	}
	return 0
}

func (x *GetListResponseData) GetAdmittanceSemester() string {
	if x != nil {
		return x.AdmittanceSemester
	}
	return ""
}

func (x *GetListResponseData) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *GetListResponseData) GetStudyProgramName() string {
	if x != nil {
		return x.StudyProgramName
	}
	return ""
}

func (x *GetListResponseData) GetCurriculumId() string {
	if x != nil {
		return x.CurriculumId
	}
	return ""
}

func (x *GetListResponseData) GetCurriculumName() string {
	if x != nil {
		return x.CurriculumName
	}
	return ""
}

func (x *GetListResponseData) GetAdmittanceTestNumber() string {
	if x != nil {
		return x.AdmittanceTestNumber
	}
	return ""
}

func (x *GetListResponseData) GetAdmittanceDate() string {
	if x != nil {
		return x.AdmittanceDate
	}
	return ""
}

func (x *GetListResponseData) GetAdmittanceStatus() string {
	if x != nil {
		return x.AdmittanceStatus
	}
	return ""
}

func (x *GetListResponseData) GetTotalTransferCredit() uint32 {
	if x != nil {
		return x.TotalTransferCredit
	}
	return 0
}

func (x *GetListResponseData) GetPreviousCollege() string {
	if x != nil {
		return x.PreviousCollege
	}
	return ""
}

func (x *GetListResponseData) GetPreviousStudyProgram() string {
	if x != nil {
		return x.PreviousStudyProgram
	}
	return ""
}

func (x *GetListResponseData) GetPreviousNimNumber() int64 {
	if x != nil {
		return x.PreviousNimNumber
	}
	return 0
}

func (x *GetListResponseData) GetPreviousNimAdmittanceYear() string {
	if x != nil {
		return x.PreviousNimAdmittanceYear
	}
	return ""
}

func (x *GetListResponseData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetListResponseData) GetIsForeignStudent() bool {
	if x != nil {
		return x.IsForeignStudent
	}
	return false
}

func (x *GetListResponseData) GetCollegeEntranceType() string {
	if x != nil {
		return x.CollegeEntranceType
	}
	return ""
}

func (x *GetListResponseData) GetClassTime() string {
	if x != nil {
		return x.ClassTime
	}
	return ""
}

func (x *GetListResponseData) GetFundSource() string {
	if x != nil {
		return x.FundSource
	}
	return ""
}

func (x *GetListResponseData) GetIsScholarshipGrantee() bool {
	if x != nil {
		return x.IsScholarshipGrantee
	}
	return false
}

func (x *GetListResponseData) GetHasCompleteRequirement() bool {
	if x != nil {
		return x.HasCompleteRequirement
	}
	return false
}

func (x *GetListResponseData) GetSchoolCertificateType() string {
	if x != nil {
		return x.SchoolCertificateType
	}
	return ""
}

func (x *GetListResponseData) GetSchoolGraduationYear() string {
	if x != nil {
		return x.SchoolGraduationYear
	}
	return ""
}

func (x *GetListResponseData) GetSchoolName() string {
	if x != nil {
		return x.SchoolName
	}
	return ""
}

func (x *GetListResponseData) GetSchoolAccreditation() string {
	if x != nil {
		return x.SchoolAccreditation
	}
	return ""
}

func (x *GetListResponseData) GetSchoolAddress() string {
	if x != nil {
		return x.SchoolAddress
	}
	return ""
}

func (x *GetListResponseData) GetSchoolMajor() string {
	if x != nil {
		return x.SchoolMajor
	}
	return ""
}

func (x *GetListResponseData) GetSchoolCertificateNumber() string {
	if x != nil {
		return x.SchoolCertificateNumber
	}
	return ""
}

func (x *GetListResponseData) GetSchoolCertificateDate() string {
	if x != nil {
		return x.SchoolCertificateDate
	}
	return ""
}

func (x *GetListResponseData) GetTotalSchoolFinalExamSubject() uint32 {
	if x != nil {
		return x.TotalSchoolFinalExamSubject
	}
	return 0
}

func (x *GetListResponseData) GetSchoolFinalExamScore() float64 {
	if x != nil {
		return x.SchoolFinalExamScore
	}
	return 0
}

func (x *GetListResponseData) GetGuardianName() string {
	if x != nil {
		return x.GuardianName
	}
	return ""
}

func (x *GetListResponseData) GetGuardianBirthDate() string {
	if x != nil {
		return x.GuardianBirthDate
	}
	return ""
}

func (x *GetListResponseData) GetGuardianDeathDate() string {
	if x != nil {
		return x.GuardianDeathDate
	}
	return ""
}

func (x *GetListResponseData) GetGuardianAddress() string {
	if x != nil {
		return x.GuardianAddress
	}
	return ""
}

func (x *GetListResponseData) GetGuardianRegencyId() uint32 {
	if x != nil {
		return x.GuardianRegencyId
	}
	return 0
}

func (x *GetListResponseData) GetGuardianRegencyName() string {
	if x != nil {
		return x.GuardianRegencyName
	}
	return ""
}

func (x *GetListResponseData) GetGuardianPostalCode() string {
	if x != nil {
		return x.GuardianPostalCode
	}
	return ""
}

func (x *GetListResponseData) GetGuardianPhoneNumber() string {
	if x != nil {
		return x.GuardianPhoneNumber
	}
	return ""
}

func (x *GetListResponseData) GetGuardianEmail() string {
	if x != nil {
		return x.GuardianEmail
	}
	return ""
}

func (x *GetListResponseData) GetGuardianFinalAcademicBackground() string {
	if x != nil {
		return x.GuardianFinalAcademicBackground
	}
	return ""
}

func (x *GetListResponseData) GetGuardianOccupation() string {
	if x != nil {
		return x.GuardianOccupation
	}
	return ""
}

func (x *GetListResponseData) GetFatherIdNumber() string {
	if x != nil {
		return x.FatherIdNumber
	}
	return ""
}

func (x *GetListResponseData) GetFatherName() string {
	if x != nil {
		return x.FatherName
	}
	return ""
}

func (x *GetListResponseData) GetFatherBirthDate() string {
	if x != nil {
		return x.FatherBirthDate
	}
	return ""
}

func (x *GetListResponseData) GetFatherDeathDate() string {
	if x != nil {
		return x.FatherDeathDate
	}
	return ""
}

func (x *GetListResponseData) GetMotherIdNumber() string {
	if x != nil {
		return x.MotherIdNumber
	}
	return ""
}

func (x *GetListResponseData) GetMotherName() string {
	if x != nil {
		return x.MotherName
	}
	return ""
}

func (x *GetListResponseData) GetMotherBirthDate() string {
	if x != nil {
		return x.MotherBirthDate
	}
	return ""
}

func (x *GetListResponseData) GetMotherDeathDate() string {
	if x != nil {
		return x.MotherDeathDate
	}
	return ""
}

func (x *GetListResponseData) GetParentAddress() string {
	if x != nil {
		return x.ParentAddress
	}
	return ""
}

func (x *GetListResponseData) GetParentRegencyId() uint32 {
	if x != nil {
		return x.ParentRegencyId
	}
	return 0
}

func (x *GetListResponseData) GetParentRegencyName() string {
	if x != nil {
		return x.ParentRegencyName
	}
	return ""
}

func (x *GetListResponseData) GetParentPostalCode() string {
	if x != nil {
		return x.ParentPostalCode
	}
	return ""
}

func (x *GetListResponseData) GetParentPhoneNumber() string {
	if x != nil {
		return x.ParentPhoneNumber
	}
	return ""
}

func (x *GetListResponseData) GetParentEmail() string {
	if x != nil {
		return x.ParentEmail
	}
	return ""
}

func (x *GetListResponseData) GetFatherFinalAcademicBackground() string {
	if x != nil {
		return x.FatherFinalAcademicBackground
	}
	return ""
}

func (x *GetListResponseData) GetFatherOccupation() string {
	if x != nil {
		return x.FatherOccupation
	}
	return ""
}

func (x *GetListResponseData) GetMotherFinalAcademicBackground() string {
	if x != nil {
		return x.MotherFinalAcademicBackground
	}
	return ""
}

func (x *GetListResponseData) GetMotherOccupation() string {
	if x != nil {
		return x.MotherOccupation
	}
	return ""
}

func (x *GetListResponseData) GetParentIncome() float64 {
	if x != nil {
		return x.ParentIncome
	}
	return 0
}

func (x *GetListResponseData) GetIsFinanciallyCapable() bool {
	if x != nil {
		return x.IsFinanciallyCapable
	}
	return false
}

func (x *GetListResponseData) GetAuthenticationId() string {
	if x != nil {
		return x.AuthenticationId
	}
	return ""
}

func (x *GetListResponseData) GetAuthenticationIsActive() bool {
	if x != nil {
		return x.AuthenticationIsActive
	}
	return false
}

func (x *GetListResponseData) GetAuthenticationSuspensionRemarks() string {
	if x != nil {
		return x.AuthenticationSuspensionRemarks
	}
	return ""
}

func (x *GetListResponseData) GetDiktiStudyProgramCode() string {
	if x != nil {
		return x.DiktiStudyProgramCode
	}
	return ""
}

func (x *GetListResponseData) GetAcademicGuidanceLecturerId() string {
	if x != nil {
		return x.AcademicGuidanceLecturerId
	}
	return ""
}

func (x *GetListResponseData) GetAcademicGuidanceLecturerName() string {
	if x != nil {
		return x.AcademicGuidanceLecturerName
	}
	return ""
}

func (x *GetListResponseData) GetAcademicGuidanceSemesterId() string {
	if x != nil {
		return x.AcademicGuidanceSemesterId
	}
	return ""
}

func (x *GetListResponseData) GetAcademicGuidanceSemesterSchoolYear() string {
	if x != nil {
		return x.AcademicGuidanceSemesterSchoolYear
	}
	return ""
}

func (x *GetListResponseData) GetStudyPlanTotalMandatoryCredit() uint32 {
	if x != nil {
		return x.StudyPlanTotalMandatoryCredit
	}
	return 0
}

func (x *GetListResponseData) GetStudyPlanTotalOptionalCredit() uint32 {
	if x != nil {
		return x.StudyPlanTotalOptionalCredit
	}
	return 0
}

func (x *GetListResponseData) GetStudyPlanMaximumCredit() uint32 {
	if x != nil {
		return x.StudyPlanMaximumCredit
	}
	return 0
}

func (x *GetListResponseData) GetStudyPlanIsApproved() bool {
	if x != nil {
		return x.StudyPlanIsApproved
	}
	return false
}

func (x *GetListResponseData) GetCurrentSemesterPackage() uint32 {
	if x != nil {
		return x.CurrentSemesterPackage
	}
	return 0
}

func (x *GetListResponseData) GetStudyPlanId() string {
	if x != nil {
		return x.StudyPlanId
	}
	return ""
}

func (x *GetListResponseData) GetTotalStudyPlan() uint32 {
	if x != nil {
		return x.TotalStudyPlan
	}
	return 0
}

func (x *GetListResponseData) GetStatusSemesterId() string {
	if x != nil {
		return x.StatusSemesterId
	}
	return ""
}

func (x *GetListResponseData) GetStatusSemesterSchoolYear() string {
	if x != nil {
		return x.StatusSemesterSchoolYear
	}
	return ""
}

func (x *GetListResponseData) GetStatusSemesterType() string {
	if x != nil {
		return x.StatusSemesterType
	}
	return ""
}

func (x *GetListResponseData) GetStatusDate() string {
	if x != nil {
		return x.StatusDate
	}
	return ""
}

func (x *GetListResponseData) GetStatusReferenceNumber() string {
	if x != nil {
		return x.StatusReferenceNumber
	}
	return ""
}

func (x *GetListResponseData) GetStatusPurpose() string {
	if x != nil {
		return x.StatusPurpose
	}
	return ""
}

func (x *GetListResponseData) GetStatusRemarks() string {
	if x != nil {
		return x.StatusRemarks
	}
	return ""
}

func (x *GetListResponseData) GetGpa() float64 {
	if x != nil {
		return x.Gpa
	}
	return 0
}

func (x *GetListResponseData) GetTotalCredit() uint32 {
	if x != nil {
		return x.TotalCredit
	}
	return 0
}

func (x *GetListResponseData) GetTranscriptIsArchived() bool {
	if x != nil {
		return x.TranscriptIsArchived
	}
	return false
}

func (x *GetListResponseData) GetHasPaid() bool {
	if x != nil {
		return x.HasPaid
	}
	return false
}

func (x *GetListResponseData) GetGraduationPredicate() string {
	if x != nil {
		return x.GraduationPredicate
	}
	return ""
}

func (x *GetListResponseData) GetStudyDurationMonth() uint32 {
	if x != nil {
		return x.StudyDurationMonth
	}
	return 0
}

func (x *GetListResponseData) GetThesisDurationMonth() uint32 {
	if x != nil {
		return x.ThesisDurationMonth
	}
	return 0
}

func (x *GetListResponseData) GetThesisDurationSemester() uint32 {
	if x != nil {
		return x.ThesisDurationSemester
	}
	return 0
}

type GetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta       *Meta                  `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Pagination *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	Data       []*GetListResponseData `protobuf:"bytes,3,rep,name=data,proto3" json:"data"`
}

func (x *GetListResponse) Reset() {
	*x = GetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponse) ProtoMessage() {}

func (x *GetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponse.ProtoReflect.Descriptor instead.
func (*GetListResponse) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{4}
}

func (x *GetListResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListResponse) GetData() []*GetListResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *GetDetailRequest) Reset() {
	*x = GetDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailRequest) ProtoMessage() {}

func (x *GetDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailRequest.ProtoReflect.Descriptor instead.
func (*GetDetailRequest) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{5}
}

func (x *GetDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDetailResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                 string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                               string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Sex                                string  `protobuf:"bytes,3,opt,name=sex,proto3" json:"sex"`
	MaritalStatus                      string  `protobuf:"bytes,4,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status"`
	BirthRegencyId                     uint32  `protobuf:"varint,5,opt,name=birth_regency_id,json=birthRegencyId,proto3" json:"birth_regency_id"`
	BirthRegencyName                   string  `protobuf:"bytes,6,opt,name=birth_regency_name,json=birthRegencyName,proto3" json:"birth_regency_name"`
	BirthDate                          string  `protobuf:"bytes,7,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
	Religion                           string  `protobuf:"bytes,8,opt,name=religion,proto3" json:"religion"`
	Address                            string  `protobuf:"bytes,9,opt,name=address,proto3" json:"address"`
	Rt                                 string  `protobuf:"bytes,10,opt,name=rt,proto3" json:"rt"`
	Rw                                 string  `protobuf:"bytes,11,opt,name=rw,proto3" json:"rw"`
	VillageId                          uint32  `protobuf:"varint,12,opt,name=village_id,json=villageId,proto3" json:"village_id"`
	VillageName                        string  `protobuf:"bytes,13,opt,name=village_name,json=villageName,proto3" json:"village_name"`
	DistrictId                         uint32  `protobuf:"varint,14,opt,name=district_id,json=districtId,proto3" json:"district_id"`
	DistrictName                       string  `protobuf:"bytes,15,opt,name=district_name,json=districtName,proto3" json:"district_name"`
	RegencyId                          uint32  `protobuf:"varint,16,opt,name=regency_id,json=regencyId,proto3" json:"regency_id"`
	RegencyName                        string  `protobuf:"bytes,17,opt,name=regency_name,json=regencyName,proto3" json:"regency_name"`
	ProvinceId                         uint32  `protobuf:"varint,18,opt,name=province_id,json=provinceId,proto3" json:"province_id"`
	ProvinceName                       string  `protobuf:"bytes,19,opt,name=province_name,json=provinceName,proto3" json:"province_name"`
	CountryId                          uint32  `protobuf:"varint,20,opt,name=country_id,json=countryId,proto3" json:"country_id"`
	CountryName                        string  `protobuf:"bytes,21,opt,name=country_name,json=countryName,proto3" json:"country_name"`
	PostalCode                         string  `protobuf:"bytes,22,opt,name=postal_code,json=postalCode,proto3" json:"postal_code"`
	PreviousAddress                    string  `protobuf:"bytes,23,opt,name=previous_address,json=previousAddress,proto3" json:"previous_address"`
	IdNumber                           string  `protobuf:"bytes,24,opt,name=id_number,json=idNumber,proto3" json:"id_number"`
	NpwpNumber                         string  `protobuf:"bytes,25,opt,name=npwp_number,json=npwpNumber,proto3" json:"npwp_number"`
	NisnNumber                         string  `protobuf:"bytes,26,opt,name=nisn_number,json=nisnNumber,proto3" json:"nisn_number"`
	ResidenceType                      string  `protobuf:"bytes,27,opt,name=residence_type,json=residenceType,proto3" json:"residence_type"`
	TransportationMean                 string  `protobuf:"bytes,28,opt,name=transportation_mean,json=transportationMean,proto3" json:"transportation_mean"`
	KpsReceiver                        string  `protobuf:"bytes,29,opt,name=kps_receiver,json=kpsReceiver,proto3" json:"kps_receiver"`
	PhoneNumber                        string  `protobuf:"bytes,30,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	MobilePhoneNumber                  string  `protobuf:"bytes,31,opt,name=mobile_phone_number,json=mobilePhoneNumber,proto3" json:"mobile_phone_number"`
	Email                              string  `protobuf:"bytes,32,opt,name=email,proto3" json:"email"`
	Homepage                           string  `protobuf:"bytes,33,opt,name=homepage,proto3" json:"homepage"`
	WorkType                           string  `protobuf:"bytes,34,opt,name=work_type,json=workType,proto3" json:"work_type"`
	WorkPlace                          string  `protobuf:"bytes,35,opt,name=work_place,json=workPlace,proto3" json:"work_place"`
	Nationality                        string  `protobuf:"bytes,36,opt,name=nationality,proto3" json:"nationality"`
	AskesNumber                        string  `protobuf:"bytes,37,opt,name=askes_number,json=askesNumber,proto3" json:"askes_number"`
	TotalBrother                       uint32  `protobuf:"varint,38,opt,name=total_brother,json=totalBrother,proto3" json:"total_brother"`
	TotalSister                        uint32  `protobuf:"varint,39,opt,name=total_sister,json=totalSister,proto3" json:"total_sister"`
	Hobby                              string  `protobuf:"bytes,40,opt,name=hobby,proto3" json:"hobby"`
	Experience                         string  `protobuf:"bytes,41,opt,name=experience,proto3" json:"experience"`
	TotalDependent                     uint32  `protobuf:"varint,42,opt,name=total_dependent,json=totalDependent,proto3" json:"total_dependent"`
	NimNumber                          int64   `protobuf:"varint,43,opt,name=nim_number,json=nimNumber,proto3" json:"nim_number"`
	StudentForce                       uint32  `protobuf:"varint,44,opt,name=student_force,json=studentForce,proto3" json:"student_force"`
	AdmittanceSemester                 string  `protobuf:"bytes,45,opt,name=admittance_semester,json=admittanceSemester,proto3" json:"admittance_semester"`
	StudyProgramId                     string  `protobuf:"bytes,46,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	StudyProgramName                   string  `protobuf:"bytes,47,opt,name=study_program_name,json=studyProgramName,proto3" json:"study_program_name"`
	CurriculumId                       string  `protobuf:"bytes,48,opt,name=curriculum_id,json=curriculumId,proto3" json:"curriculum_id"`
	CurriculumName                     string  `protobuf:"bytes,49,opt,name=curriculum_name,json=curriculumName,proto3" json:"curriculum_name"`
	AdmittanceTestNumber               string  `protobuf:"bytes,50,opt,name=admittance_test_number,json=admittanceTestNumber,proto3" json:"admittance_test_number"`
	AdmittanceDate                     string  `protobuf:"bytes,51,opt,name=admittance_date,json=admittanceDate,proto3" json:"admittance_date"`
	AdmittanceStatus                   string  `protobuf:"bytes,52,opt,name=admittance_status,json=admittanceStatus,proto3" json:"admittance_status"`
	TotalTransferCredit                uint32  `protobuf:"varint,53,opt,name=total_transfer_credit,json=totalTransferCredit,proto3" json:"total_transfer_credit"`
	PreviousCollege                    string  `protobuf:"bytes,54,opt,name=previous_college,json=previousCollege,proto3" json:"previous_college"`
	PreviousStudyProgram               string  `protobuf:"bytes,55,opt,name=previous_study_program,json=previousStudyProgram,proto3" json:"previous_study_program"`
	PreviousNimNumber                  int64   `protobuf:"varint,56,opt,name=previous_nim_number,json=previousNimNumber,proto3" json:"previous_nim_number"`
	PreviousNimAdmittanceYear          string  `protobuf:"bytes,57,opt,name=previous_nim_admittance_year,json=previousNimAdmittanceYear,proto3" json:"previous_nim_admittance_year"`
	Status                             string  `protobuf:"bytes,58,opt,name=status,proto3" json:"status"`
	IsForeignStudent                   bool    `protobuf:"varint,59,opt,name=is_foreign_student,json=isForeignStudent,proto3" json:"is_foreign_student"`
	CollegeEntranceType                string  `protobuf:"bytes,60,opt,name=college_entrance_type,json=collegeEntranceType,proto3" json:"college_entrance_type"`
	ClassTime                          string  `protobuf:"bytes,61,opt,name=class_time,json=classTime,proto3" json:"class_time"`
	FundSource                         string  `protobuf:"bytes,62,opt,name=fund_source,json=fundSource,proto3" json:"fund_source"`
	IsScholarshipGrantee               bool    `protobuf:"varint,63,opt,name=is_scholarship_grantee,json=isScholarshipGrantee,proto3" json:"is_scholarship_grantee"`
	HasCompleteRequirement             bool    `protobuf:"varint,64,opt,name=has_complete_requirement,json=hasCompleteRequirement,proto3" json:"has_complete_requirement"`
	SchoolCertificateType              string  `protobuf:"bytes,65,opt,name=school_certificate_type,json=schoolCertificateType,proto3" json:"school_certificate_type"`
	SchoolGraduationYear               string  `protobuf:"bytes,66,opt,name=school_graduation_year,json=schoolGraduationYear,proto3" json:"school_graduation_year"`
	SchoolName                         string  `protobuf:"bytes,67,opt,name=school_name,json=schoolName,proto3" json:"school_name"`
	SchoolAccreditation                string  `protobuf:"bytes,68,opt,name=school_accreditation,json=schoolAccreditation,proto3" json:"school_accreditation"`
	SchoolAddress                      string  `protobuf:"bytes,69,opt,name=school_address,json=schoolAddress,proto3" json:"school_address"`
	SchoolMajor                        string  `protobuf:"bytes,70,opt,name=school_major,json=schoolMajor,proto3" json:"school_major"`
	SchoolCertificateNumber            string  `protobuf:"bytes,71,opt,name=school_certificate_number,json=schoolCertificateNumber,proto3" json:"school_certificate_number"`
	SchoolCertificateDate              string  `protobuf:"bytes,72,opt,name=school_certificate_date,json=schoolCertificateDate,proto3" json:"school_certificate_date"`
	TotalSchoolFinalExamSubject        uint32  `protobuf:"varint,73,opt,name=total_school_final_exam_subject,json=totalSchoolFinalExamSubject,proto3" json:"total_school_final_exam_subject"`
	SchoolFinalExamScore               float64 `protobuf:"fixed64,74,opt,name=school_final_exam_score,json=schoolFinalExamScore,proto3" json:"school_final_exam_score"`
	GuardianName                       string  `protobuf:"bytes,75,opt,name=guardian_name,json=guardianName,proto3" json:"guardian_name"`
	GuardianBirthDate                  string  `protobuf:"bytes,76,opt,name=guardian_birth_date,json=guardianBirthDate,proto3" json:"guardian_birth_date"`
	GuardianDeathDate                  string  `protobuf:"bytes,77,opt,name=guardian_death_date,json=guardianDeathDate,proto3" json:"guardian_death_date"`
	GuardianAddress                    string  `protobuf:"bytes,78,opt,name=guardian_address,json=guardianAddress,proto3" json:"guardian_address"`
	GuardianRegencyId                  uint32  `protobuf:"varint,79,opt,name=guardian_regency_id,json=guardianRegencyId,proto3" json:"guardian_regency_id"`
	GuardianRegencyName                string  `protobuf:"bytes,80,opt,name=guardian_regency_name,json=guardianRegencyName,proto3" json:"guardian_regency_name"`
	GuardianPostalCode                 string  `protobuf:"bytes,81,opt,name=guardian_postal_code,json=guardianPostalCode,proto3" json:"guardian_postal_code"`
	GuardianPhoneNumber                string  `protobuf:"bytes,82,opt,name=guardian_phone_number,json=guardianPhoneNumber,proto3" json:"guardian_phone_number"`
	GuardianEmail                      string  `protobuf:"bytes,83,opt,name=guardian_email,json=guardianEmail,proto3" json:"guardian_email"`
	GuardianFinalAcademicBackground    string  `protobuf:"bytes,84,opt,name=guardian_final_academic_background,json=guardianFinalAcademicBackground,proto3" json:"guardian_final_academic_background"`
	GuardianOccupation                 string  `protobuf:"bytes,85,opt,name=guardian_occupation,json=guardianOccupation,proto3" json:"guardian_occupation"`
	FatherIdNumber                     string  `protobuf:"bytes,86,opt,name=father_id_number,json=fatherIdNumber,proto3" json:"father_id_number"`
	FatherName                         string  `protobuf:"bytes,87,opt,name=father_name,json=fatherName,proto3" json:"father_name"`
	FatherBirthDate                    string  `protobuf:"bytes,88,opt,name=father_birth_date,json=fatherBirthDate,proto3" json:"father_birth_date"`
	FatherDeathDate                    string  `protobuf:"bytes,89,opt,name=father_death_date,json=fatherDeathDate,proto3" json:"father_death_date"`
	MotherIdNumber                     string  `protobuf:"bytes,90,opt,name=mother_id_number,json=motherIdNumber,proto3" json:"mother_id_number"`
	MotherName                         string  `protobuf:"bytes,91,opt,name=mother_name,json=motherName,proto3" json:"mother_name"`
	MotherBirthDate                    string  `protobuf:"bytes,92,opt,name=mother_birth_date,json=motherBirthDate,proto3" json:"mother_birth_date"`
	MotherDeathDate                    string  `protobuf:"bytes,93,opt,name=mother_death_date,json=motherDeathDate,proto3" json:"mother_death_date"`
	ParentAddress                      string  `protobuf:"bytes,94,opt,name=parent_address,json=parentAddress,proto3" json:"parent_address"`
	ParentRegencyId                    uint32  `protobuf:"varint,95,opt,name=parent_regency_id,json=parentRegencyId,proto3" json:"parent_regency_id"`
	ParentRegencyName                  string  `protobuf:"bytes,96,opt,name=parent_regency_name,json=parentRegencyName,proto3" json:"parent_regency_name"`
	ParentPostalCode                   string  `protobuf:"bytes,97,opt,name=parent_postal_code,json=parentPostalCode,proto3" json:"parent_postal_code"`
	ParentPhoneNumber                  string  `protobuf:"bytes,98,opt,name=parent_phone_number,json=parentPhoneNumber,proto3" json:"parent_phone_number"`
	ParentEmail                        string  `protobuf:"bytes,99,opt,name=parent_email,json=parentEmail,proto3" json:"parent_email"`
	FatherFinalAcademicBackground      string  `protobuf:"bytes,100,opt,name=father_final_academic_background,json=fatherFinalAcademicBackground,proto3" json:"father_final_academic_background"`
	FatherOccupation                   string  `protobuf:"bytes,101,opt,name=father_occupation,json=fatherOccupation,proto3" json:"father_occupation"`
	MotherFinalAcademicBackground      string  `protobuf:"bytes,102,opt,name=mother_final_academic_background,json=motherFinalAcademicBackground,proto3" json:"mother_final_academic_background"`
	MotherOccupation                   string  `protobuf:"bytes,103,opt,name=mother_occupation,json=motherOccupation,proto3" json:"mother_occupation"`
	ParentIncome                       float64 `protobuf:"fixed64,104,opt,name=parent_income,json=parentIncome,proto3" json:"parent_income"`
	IsFinanciallyCapable               bool    `protobuf:"varint,105,opt,name=is_financially_capable,json=isFinanciallyCapable,proto3" json:"is_financially_capable"`
	AuthenticationId                   string  `protobuf:"bytes,106,opt,name=authentication_id,json=authenticationId,proto3" json:"authentication_id"`
	AuthenticationIsActive             bool    `protobuf:"varint,107,opt,name=authentication_is_active,json=authenticationIsActive,proto3" json:"authentication_is_active"`
	AuthenticationSuspensionRemarks    string  `protobuf:"bytes,108,opt,name=authentication_suspension_remarks,json=authenticationSuspensionRemarks,proto3" json:"authentication_suspension_remarks"`
	DiktiStudyProgramCode              string  `protobuf:"bytes,109,opt,name=dikti_study_program_code,json=diktiStudyProgramCode,proto3" json:"dikti_study_program_code"`
	AcademicGuidanceLecturerId         string  `protobuf:"bytes,110,opt,name=academic_guidance_lecturer_id,json=academicGuidanceLecturerId,proto3" json:"academic_guidance_lecturer_id"`
	AcademicGuidanceLecturerName       string  `protobuf:"bytes,111,opt,name=academic_guidance_lecturer_name,json=academicGuidanceLecturerName,proto3" json:"academic_guidance_lecturer_name"`
	AcademicGuidanceSemesterId         string  `protobuf:"bytes,112,opt,name=academic_guidance_semester_id,json=academicGuidanceSemesterId,proto3" json:"academic_guidance_semester_id"`
	AcademicGuidanceSemesterSchoolYear string  `protobuf:"bytes,113,opt,name=academic_guidance_semester_school_year,json=academicGuidanceSemesterSchoolYear,proto3" json:"academic_guidance_semester_school_year"`
	StudyPlanTotalMandatoryCredit      uint32  `protobuf:"varint,114,opt,name=study_plan_total_mandatory_credit,json=studyPlanTotalMandatoryCredit,proto3" json:"study_plan_total_mandatory_credit"`
	StudyPlanTotalOptionalCredit       uint32  `protobuf:"varint,115,opt,name=study_plan_total_optional_credit,json=studyPlanTotalOptionalCredit,proto3" json:"study_plan_total_optional_credit"`
	StudyPlanMaximumCredit             uint32  `protobuf:"varint,116,opt,name=study_plan_maximum_credit,json=studyPlanMaximumCredit,proto3" json:"study_plan_maximum_credit"`
	StudyPlanIsApproved                bool    `protobuf:"varint,117,opt,name=study_plan_is_approved,json=studyPlanIsApproved,proto3" json:"study_plan_is_approved"`
	CurrentSemesterPackage             uint32  `protobuf:"varint,118,opt,name=current_semester_package,json=currentSemesterPackage,proto3" json:"current_semester_package"`
	StudyPlanId                        string  `protobuf:"bytes,119,opt,name=study_plan_id,json=studyPlanId,proto3" json:"study_plan_id"`
}

func (x *GetDetailResponseData) Reset() {
	*x = GetDetailResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailResponseData) ProtoMessage() {}

func (x *GetDetailResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailResponseData.ProtoReflect.Descriptor instead.
func (*GetDetailResponseData) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{6}
}

func (x *GetDetailResponseData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDetailResponseData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDetailResponseData) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *GetDetailResponseData) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *GetDetailResponseData) GetBirthRegencyId() uint32 {
	if x != nil {
		return x.BirthRegencyId
	}
	return 0
}

func (x *GetDetailResponseData) GetBirthRegencyName() string {
	if x != nil {
		return x.BirthRegencyName
	}
	return ""
}

func (x *GetDetailResponseData) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *GetDetailResponseData) GetReligion() string {
	if x != nil {
		return x.Religion
	}
	return ""
}

func (x *GetDetailResponseData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetDetailResponseData) GetRt() string {
	if x != nil {
		return x.Rt
	}
	return ""
}

func (x *GetDetailResponseData) GetRw() string {
	if x != nil {
		return x.Rw
	}
	return ""
}

func (x *GetDetailResponseData) GetVillageId() uint32 {
	if x != nil {
		return x.VillageId
	}
	return 0
}

func (x *GetDetailResponseData) GetVillageName() string {
	if x != nil {
		return x.VillageName
	}
	return ""
}

func (x *GetDetailResponseData) GetDistrictId() uint32 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

func (x *GetDetailResponseData) GetDistrictName() string {
	if x != nil {
		return x.DistrictName
	}
	return ""
}

func (x *GetDetailResponseData) GetRegencyId() uint32 {
	if x != nil {
		return x.RegencyId
	}
	return 0
}

func (x *GetDetailResponseData) GetRegencyName() string {
	if x != nil {
		return x.RegencyName
	}
	return ""
}

func (x *GetDetailResponseData) GetProvinceId() uint32 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *GetDetailResponseData) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *GetDetailResponseData) GetCountryId() uint32 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *GetDetailResponseData) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *GetDetailResponseData) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *GetDetailResponseData) GetPreviousAddress() string {
	if x != nil {
		return x.PreviousAddress
	}
	return ""
}

func (x *GetDetailResponseData) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetNpwpNumber() string {
	if x != nil {
		return x.NpwpNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetNisnNumber() string {
	if x != nil {
		return x.NisnNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetResidenceType() string {
	if x != nil {
		return x.ResidenceType
	}
	return ""
}

func (x *GetDetailResponseData) GetTransportationMean() string {
	if x != nil {
		return x.TransportationMean
	}
	return ""
}

func (x *GetDetailResponseData) GetKpsReceiver() string {
	if x != nil {
		return x.KpsReceiver
	}
	return ""
}

func (x *GetDetailResponseData) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetMobilePhoneNumber() string {
	if x != nil {
		return x.MobilePhoneNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetDetailResponseData) GetHomepage() string {
	if x != nil {
		return x.Homepage
	}
	return ""
}

func (x *GetDetailResponseData) GetWorkType() string {
	if x != nil {
		return x.WorkType
	}
	return ""
}

func (x *GetDetailResponseData) GetWorkPlace() string {
	if x != nil {
		return x.WorkPlace
	}
	return ""
}

func (x *GetDetailResponseData) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *GetDetailResponseData) GetAskesNumber() string {
	if x != nil {
		return x.AskesNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetTotalBrother() uint32 {
	if x != nil {
		return x.TotalBrother
	}
	return 0
}

func (x *GetDetailResponseData) GetTotalSister() uint32 {
	if x != nil {
		return x.TotalSister
	}
	return 0
}

func (x *GetDetailResponseData) GetHobby() string {
	if x != nil {
		return x.Hobby
	}
	return ""
}

func (x *GetDetailResponseData) GetExperience() string {
	if x != nil {
		return x.Experience
	}
	return ""
}

func (x *GetDetailResponseData) GetTotalDependent() uint32 {
	if x != nil {
		return x.TotalDependent
	}
	return 0
}

func (x *GetDetailResponseData) GetNimNumber() int64 {
	if x != nil {
		return x.NimNumber
	}
	return 0
}

func (x *GetDetailResponseData) GetStudentForce() uint32 {
	if x != nil {
		return x.StudentForce
	}
	return 0
}

func (x *GetDetailResponseData) GetAdmittanceSemester() string {
	if x != nil {
		return x.AdmittanceSemester
	}
	return ""
}

func (x *GetDetailResponseData) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *GetDetailResponseData) GetStudyProgramName() string {
	if x != nil {
		return x.StudyProgramName
	}
	return ""
}

func (x *GetDetailResponseData) GetCurriculumId() string {
	if x != nil {
		return x.CurriculumId
	}
	return ""
}

func (x *GetDetailResponseData) GetCurriculumName() string {
	if x != nil {
		return x.CurriculumName
	}
	return ""
}

func (x *GetDetailResponseData) GetAdmittanceTestNumber() string {
	if x != nil {
		return x.AdmittanceTestNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetAdmittanceDate() string {
	if x != nil {
		return x.AdmittanceDate
	}
	return ""
}

func (x *GetDetailResponseData) GetAdmittanceStatus() string {
	if x != nil {
		return x.AdmittanceStatus
	}
	return ""
}

func (x *GetDetailResponseData) GetTotalTransferCredit() uint32 {
	if x != nil {
		return x.TotalTransferCredit
	}
	return 0
}

func (x *GetDetailResponseData) GetPreviousCollege() string {
	if x != nil {
		return x.PreviousCollege
	}
	return ""
}

func (x *GetDetailResponseData) GetPreviousStudyProgram() string {
	if x != nil {
		return x.PreviousStudyProgram
	}
	return ""
}

func (x *GetDetailResponseData) GetPreviousNimNumber() int64 {
	if x != nil {
		return x.PreviousNimNumber
	}
	return 0
}

func (x *GetDetailResponseData) GetPreviousNimAdmittanceYear() string {
	if x != nil {
		return x.PreviousNimAdmittanceYear
	}
	return ""
}

func (x *GetDetailResponseData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetDetailResponseData) GetIsForeignStudent() bool {
	if x != nil {
		return x.IsForeignStudent
	}
	return false
}

func (x *GetDetailResponseData) GetCollegeEntranceType() string {
	if x != nil {
		return x.CollegeEntranceType
	}
	return ""
}

func (x *GetDetailResponseData) GetClassTime() string {
	if x != nil {
		return x.ClassTime
	}
	return ""
}

func (x *GetDetailResponseData) GetFundSource() string {
	if x != nil {
		return x.FundSource
	}
	return ""
}

func (x *GetDetailResponseData) GetIsScholarshipGrantee() bool {
	if x != nil {
		return x.IsScholarshipGrantee
	}
	return false
}

func (x *GetDetailResponseData) GetHasCompleteRequirement() bool {
	if x != nil {
		return x.HasCompleteRequirement
	}
	return false
}

func (x *GetDetailResponseData) GetSchoolCertificateType() string {
	if x != nil {
		return x.SchoolCertificateType
	}
	return ""
}

func (x *GetDetailResponseData) GetSchoolGraduationYear() string {
	if x != nil {
		return x.SchoolGraduationYear
	}
	return ""
}

func (x *GetDetailResponseData) GetSchoolName() string {
	if x != nil {
		return x.SchoolName
	}
	return ""
}

func (x *GetDetailResponseData) GetSchoolAccreditation() string {
	if x != nil {
		return x.SchoolAccreditation
	}
	return ""
}

func (x *GetDetailResponseData) GetSchoolAddress() string {
	if x != nil {
		return x.SchoolAddress
	}
	return ""
}

func (x *GetDetailResponseData) GetSchoolMajor() string {
	if x != nil {
		return x.SchoolMajor
	}
	return ""
}

func (x *GetDetailResponseData) GetSchoolCertificateNumber() string {
	if x != nil {
		return x.SchoolCertificateNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetSchoolCertificateDate() string {
	if x != nil {
		return x.SchoolCertificateDate
	}
	return ""
}

func (x *GetDetailResponseData) GetTotalSchoolFinalExamSubject() uint32 {
	if x != nil {
		return x.TotalSchoolFinalExamSubject
	}
	return 0
}

func (x *GetDetailResponseData) GetSchoolFinalExamScore() float64 {
	if x != nil {
		return x.SchoolFinalExamScore
	}
	return 0
}

func (x *GetDetailResponseData) GetGuardianName() string {
	if x != nil {
		return x.GuardianName
	}
	return ""
}

func (x *GetDetailResponseData) GetGuardianBirthDate() string {
	if x != nil {
		return x.GuardianBirthDate
	}
	return ""
}

func (x *GetDetailResponseData) GetGuardianDeathDate() string {
	if x != nil {
		return x.GuardianDeathDate
	}
	return ""
}

func (x *GetDetailResponseData) GetGuardianAddress() string {
	if x != nil {
		return x.GuardianAddress
	}
	return ""
}

func (x *GetDetailResponseData) GetGuardianRegencyId() uint32 {
	if x != nil {
		return x.GuardianRegencyId
	}
	return 0
}

func (x *GetDetailResponseData) GetGuardianRegencyName() string {
	if x != nil {
		return x.GuardianRegencyName
	}
	return ""
}

func (x *GetDetailResponseData) GetGuardianPostalCode() string {
	if x != nil {
		return x.GuardianPostalCode
	}
	return ""
}

func (x *GetDetailResponseData) GetGuardianPhoneNumber() string {
	if x != nil {
		return x.GuardianPhoneNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetGuardianEmail() string {
	if x != nil {
		return x.GuardianEmail
	}
	return ""
}

func (x *GetDetailResponseData) GetGuardianFinalAcademicBackground() string {
	if x != nil {
		return x.GuardianFinalAcademicBackground
	}
	return ""
}

func (x *GetDetailResponseData) GetGuardianOccupation() string {
	if x != nil {
		return x.GuardianOccupation
	}
	return ""
}

func (x *GetDetailResponseData) GetFatherIdNumber() string {
	if x != nil {
		return x.FatherIdNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetFatherName() string {
	if x != nil {
		return x.FatherName
	}
	return ""
}

func (x *GetDetailResponseData) GetFatherBirthDate() string {
	if x != nil {
		return x.FatherBirthDate
	}
	return ""
}

func (x *GetDetailResponseData) GetFatherDeathDate() string {
	if x != nil {
		return x.FatherDeathDate
	}
	return ""
}

func (x *GetDetailResponseData) GetMotherIdNumber() string {
	if x != nil {
		return x.MotherIdNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetMotherName() string {
	if x != nil {
		return x.MotherName
	}
	return ""
}

func (x *GetDetailResponseData) GetMotherBirthDate() string {
	if x != nil {
		return x.MotherBirthDate
	}
	return ""
}

func (x *GetDetailResponseData) GetMotherDeathDate() string {
	if x != nil {
		return x.MotherDeathDate
	}
	return ""
}

func (x *GetDetailResponseData) GetParentAddress() string {
	if x != nil {
		return x.ParentAddress
	}
	return ""
}

func (x *GetDetailResponseData) GetParentRegencyId() uint32 {
	if x != nil {
		return x.ParentRegencyId
	}
	return 0
}

func (x *GetDetailResponseData) GetParentRegencyName() string {
	if x != nil {
		return x.ParentRegencyName
	}
	return ""
}

func (x *GetDetailResponseData) GetParentPostalCode() string {
	if x != nil {
		return x.ParentPostalCode
	}
	return ""
}

func (x *GetDetailResponseData) GetParentPhoneNumber() string {
	if x != nil {
		return x.ParentPhoneNumber
	}
	return ""
}

func (x *GetDetailResponseData) GetParentEmail() string {
	if x != nil {
		return x.ParentEmail
	}
	return ""
}

func (x *GetDetailResponseData) GetFatherFinalAcademicBackground() string {
	if x != nil {
		return x.FatherFinalAcademicBackground
	}
	return ""
}

func (x *GetDetailResponseData) GetFatherOccupation() string {
	if x != nil {
		return x.FatherOccupation
	}
	return ""
}

func (x *GetDetailResponseData) GetMotherFinalAcademicBackground() string {
	if x != nil {
		return x.MotherFinalAcademicBackground
	}
	return ""
}

func (x *GetDetailResponseData) GetMotherOccupation() string {
	if x != nil {
		return x.MotherOccupation
	}
	return ""
}

func (x *GetDetailResponseData) GetParentIncome() float64 {
	if x != nil {
		return x.ParentIncome
	}
	return 0
}

func (x *GetDetailResponseData) GetIsFinanciallyCapable() bool {
	if x != nil {
		return x.IsFinanciallyCapable
	}
	return false
}

func (x *GetDetailResponseData) GetAuthenticationId() string {
	if x != nil {
		return x.AuthenticationId
	}
	return ""
}

func (x *GetDetailResponseData) GetAuthenticationIsActive() bool {
	if x != nil {
		return x.AuthenticationIsActive
	}
	return false
}

func (x *GetDetailResponseData) GetAuthenticationSuspensionRemarks() string {
	if x != nil {
		return x.AuthenticationSuspensionRemarks
	}
	return ""
}

func (x *GetDetailResponseData) GetDiktiStudyProgramCode() string {
	if x != nil {
		return x.DiktiStudyProgramCode
	}
	return ""
}

func (x *GetDetailResponseData) GetAcademicGuidanceLecturerId() string {
	if x != nil {
		return x.AcademicGuidanceLecturerId
	}
	return ""
}

func (x *GetDetailResponseData) GetAcademicGuidanceLecturerName() string {
	if x != nil {
		return x.AcademicGuidanceLecturerName
	}
	return ""
}

func (x *GetDetailResponseData) GetAcademicGuidanceSemesterId() string {
	if x != nil {
		return x.AcademicGuidanceSemesterId
	}
	return ""
}

func (x *GetDetailResponseData) GetAcademicGuidanceSemesterSchoolYear() string {
	if x != nil {
		return x.AcademicGuidanceSemesterSchoolYear
	}
	return ""
}

func (x *GetDetailResponseData) GetStudyPlanTotalMandatoryCredit() uint32 {
	if x != nil {
		return x.StudyPlanTotalMandatoryCredit
	}
	return 0
}

func (x *GetDetailResponseData) GetStudyPlanTotalOptionalCredit() uint32 {
	if x != nil {
		return x.StudyPlanTotalOptionalCredit
	}
	return 0
}

func (x *GetDetailResponseData) GetStudyPlanMaximumCredit() uint32 {
	if x != nil {
		return x.StudyPlanMaximumCredit
	}
	return 0
}

func (x *GetDetailResponseData) GetStudyPlanIsApproved() bool {
	if x != nil {
		return x.StudyPlanIsApproved
	}
	return false
}

func (x *GetDetailResponseData) GetCurrentSemesterPackage() uint32 {
	if x != nil {
		return x.CurrentSemesterPackage
	}
	return 0
}

func (x *GetDetailResponseData) GetStudyPlanId() string {
	if x != nil {
		return x.StudyPlanId
	}
	return ""
}

type GetDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                  `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *GetDetailResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *GetDetailResponse) Reset() {
	*x = GetDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailResponse) ProtoMessage() {}

func (x *GetDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailResponse.ProtoReflect.Descriptor instead.
func (*GetDetailResponse) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{7}
}

func (x *GetDetailResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetDetailResponse) GetData() *GetDetailResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                            string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Sex                             string  `protobuf:"bytes,2,opt,name=sex,proto3" json:"sex"`
	MaritalStatus                   string  `protobuf:"bytes,3,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status"`
	BirthRegencyId                  uint32  `protobuf:"varint,4,opt,name=birth_regency_id,json=birthRegencyId,proto3" json:"birth_regency_id"`
	BirthDate                       string  `protobuf:"bytes,5,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
	Religion                        string  `protobuf:"bytes,6,opt,name=religion,proto3" json:"religion"`
	Address                         string  `protobuf:"bytes,7,opt,name=address,proto3" json:"address"`
	Rt                              string  `protobuf:"bytes,8,opt,name=rt,proto3" json:"rt"`
	Rw                              string  `protobuf:"bytes,9,opt,name=rw,proto3" json:"rw"`
	VillageId                       uint32  `protobuf:"varint,10,opt,name=village_id,json=villageId,proto3" json:"village_id"`
	PostalCode                      string  `protobuf:"bytes,11,opt,name=postal_code,json=postalCode,proto3" json:"postal_code"`
	PreviousAddress                 string  `protobuf:"bytes,12,opt,name=previous_address,json=previousAddress,proto3" json:"previous_address"`
	IdNumber                        string  `protobuf:"bytes,13,opt,name=id_number,json=idNumber,proto3" json:"id_number"`
	NpwpNumber                      string  `protobuf:"bytes,14,opt,name=npwp_number,json=npwpNumber,proto3" json:"npwp_number"`
	NisnNumber                      string  `protobuf:"bytes,15,opt,name=nisn_number,json=nisnNumber,proto3" json:"nisn_number"`
	ResidenceType                   string  `protobuf:"bytes,16,opt,name=residence_type,json=residenceType,proto3" json:"residence_type"`
	TransportationMean              string  `protobuf:"bytes,17,opt,name=transportation_mean,json=transportationMean,proto3" json:"transportation_mean"`
	KpsReceiver                     string  `protobuf:"bytes,18,opt,name=kps_receiver,json=kpsReceiver,proto3" json:"kps_receiver"`
	PhoneNumber                     string  `protobuf:"bytes,19,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	MobilePhoneNumber               string  `protobuf:"bytes,20,opt,name=mobile_phone_number,json=mobilePhoneNumber,proto3" json:"mobile_phone_number"`
	Email                           string  `protobuf:"bytes,21,opt,name=email,proto3" json:"email"`
	Homepage                        string  `protobuf:"bytes,22,opt,name=homepage,proto3" json:"homepage"`
	WorkType                        string  `protobuf:"bytes,23,opt,name=work_type,json=workType,proto3" json:"work_type"`
	WorkPlace                       string  `protobuf:"bytes,24,opt,name=work_place,json=workPlace,proto3" json:"work_place"`
	Nationality                     string  `protobuf:"bytes,25,opt,name=nationality,proto3" json:"nationality"`
	AskesNumber                     string  `protobuf:"bytes,26,opt,name=askes_number,json=askesNumber,proto3" json:"askes_number"`
	TotalBrother                    uint32  `protobuf:"varint,27,opt,name=total_brother,json=totalBrother,proto3" json:"total_brother"`
	TotalSister                     uint32  `protobuf:"varint,28,opt,name=total_sister,json=totalSister,proto3" json:"total_sister"`
	Hobby                           string  `protobuf:"bytes,29,opt,name=hobby,proto3" json:"hobby"`
	Experience                      string  `protobuf:"bytes,30,opt,name=experience,proto3" json:"experience"`
	TotalDependent                  uint32  `protobuf:"varint,31,opt,name=total_dependent,json=totalDependent,proto3" json:"total_dependent"`
	NimNumber                       int64   `protobuf:"varint,32,opt,name=nim_number,json=nimNumber,proto3" json:"nim_number"`
	StudentForce                    uint32  `protobuf:"varint,33,opt,name=student_force,json=studentForce,proto3" json:"student_force"`
	AdmittanceSemester              string  `protobuf:"bytes,34,opt,name=admittance_semester,json=admittanceSemester,proto3" json:"admittance_semester"`
	StudyProgramId                  string  `protobuf:"bytes,35,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	CurriculumId                    string  `protobuf:"bytes,36,opt,name=curriculum_id,json=curriculumId,proto3" json:"curriculum_id"`
	AdmittanceTestNumber            string  `protobuf:"bytes,37,opt,name=admittance_test_number,json=admittanceTestNumber,proto3" json:"admittance_test_number"`
	AdmittanceDate                  string  `protobuf:"bytes,38,opt,name=admittance_date,json=admittanceDate,proto3" json:"admittance_date"`
	AdmittanceStatus                string  `protobuf:"bytes,39,opt,name=admittance_status,json=admittanceStatus,proto3" json:"admittance_status"`
	TotalTransferCredit             uint32  `protobuf:"varint,40,opt,name=total_transfer_credit,json=totalTransferCredit,proto3" json:"total_transfer_credit"`
	PreviousCollege                 string  `protobuf:"bytes,41,opt,name=previous_college,json=previousCollege,proto3" json:"previous_college"`
	PreviousStudyProgram            string  `protobuf:"bytes,42,opt,name=previous_study_program,json=previousStudyProgram,proto3" json:"previous_study_program"`
	PreviousNimNumber               int64   `protobuf:"varint,43,opt,name=previous_nim_number,json=previousNimNumber,proto3" json:"previous_nim_number"`
	PreviousNimAdmittanceYear       string  `protobuf:"bytes,44,opt,name=previous_nim_admittance_year,json=previousNimAdmittanceYear,proto3" json:"previous_nim_admittance_year"`
	Status                          string  `protobuf:"bytes,45,opt,name=status,proto3" json:"status"`
	IsForeignStudent                bool    `protobuf:"varint,46,opt,name=is_foreign_student,json=isForeignStudent,proto3" json:"is_foreign_student"`
	CollegeEntranceType             string  `protobuf:"bytes,47,opt,name=college_entrance_type,json=collegeEntranceType,proto3" json:"college_entrance_type"`
	ClassTime                       string  `protobuf:"bytes,48,opt,name=class_time,json=classTime,proto3" json:"class_time"`
	FundSource                      string  `protobuf:"bytes,49,opt,name=fund_source,json=fundSource,proto3" json:"fund_source"`
	IsScholarshipGrantee            bool    `protobuf:"varint,50,opt,name=is_scholarship_grantee,json=isScholarshipGrantee,proto3" json:"is_scholarship_grantee"`
	HasCompleteRequirement          bool    `protobuf:"varint,51,opt,name=has_complete_requirement,json=hasCompleteRequirement,proto3" json:"has_complete_requirement"`
	SchoolCertificateType           string  `protobuf:"bytes,52,opt,name=school_certificate_type,json=schoolCertificateType,proto3" json:"school_certificate_type"`
	SchoolGraduationYear            string  `protobuf:"bytes,53,opt,name=school_graduation_year,json=schoolGraduationYear,proto3" json:"school_graduation_year"`
	SchoolName                      string  `protobuf:"bytes,54,opt,name=school_name,json=schoolName,proto3" json:"school_name"`
	SchoolAccreditation             string  `protobuf:"bytes,55,opt,name=school_accreditation,json=schoolAccreditation,proto3" json:"school_accreditation"`
	SchoolAddress                   string  `protobuf:"bytes,56,opt,name=school_address,json=schoolAddress,proto3" json:"school_address"`
	SchoolMajor                     string  `protobuf:"bytes,57,opt,name=school_major,json=schoolMajor,proto3" json:"school_major"`
	SchoolCertificateNumber         string  `protobuf:"bytes,58,opt,name=school_certificate_number,json=schoolCertificateNumber,proto3" json:"school_certificate_number"`
	SchoolCertificateDate           string  `protobuf:"bytes,59,opt,name=school_certificate_date,json=schoolCertificateDate,proto3" json:"school_certificate_date"`
	TotalSchoolFinalExamSubject     uint32  `protobuf:"varint,60,opt,name=total_school_final_exam_subject,json=totalSchoolFinalExamSubject,proto3" json:"total_school_final_exam_subject"`
	SchoolFinalExamScore            float64 `protobuf:"fixed64,61,opt,name=school_final_exam_score,json=schoolFinalExamScore,proto3" json:"school_final_exam_score"`
	GuardianName                    string  `protobuf:"bytes,62,opt,name=guardian_name,json=guardianName,proto3" json:"guardian_name"`
	GuardianBirthDate               string  `protobuf:"bytes,63,opt,name=guardian_birth_date,json=guardianBirthDate,proto3" json:"guardian_birth_date"`
	GuardianDeathDate               string  `protobuf:"bytes,64,opt,name=guardian_death_date,json=guardianDeathDate,proto3" json:"guardian_death_date"`
	GuardianAddress                 string  `protobuf:"bytes,65,opt,name=guardian_address,json=guardianAddress,proto3" json:"guardian_address"`
	GuardianRegencyId               uint32  `protobuf:"varint,66,opt,name=guardian_regency_id,json=guardianRegencyId,proto3" json:"guardian_regency_id"`
	GuardianPostalCode              string  `protobuf:"bytes,67,opt,name=guardian_postal_code,json=guardianPostalCode,proto3" json:"guardian_postal_code"`
	GuardianPhoneNumber             string  `protobuf:"bytes,68,opt,name=guardian_phone_number,json=guardianPhoneNumber,proto3" json:"guardian_phone_number"`
	GuardianEmail                   string  `protobuf:"bytes,69,opt,name=guardian_email,json=guardianEmail,proto3" json:"guardian_email"`
	GuardianFinalAcademicBackground string  `protobuf:"bytes,70,opt,name=guardian_final_academic_background,json=guardianFinalAcademicBackground,proto3" json:"guardian_final_academic_background"`
	GuardianOccupation              string  `protobuf:"bytes,71,opt,name=guardian_occupation,json=guardianOccupation,proto3" json:"guardian_occupation"`
	FatherIdNumber                  string  `protobuf:"bytes,72,opt,name=father_id_number,json=fatherIdNumber,proto3" json:"father_id_number"`
	FatherName                      string  `protobuf:"bytes,73,opt,name=father_name,json=fatherName,proto3" json:"father_name"`
	FatherBirthDate                 string  `protobuf:"bytes,74,opt,name=father_birth_date,json=fatherBirthDate,proto3" json:"father_birth_date"`
	FatherDeathDate                 string  `protobuf:"bytes,75,opt,name=father_death_date,json=fatherDeathDate,proto3" json:"father_death_date"`
	MotherIdNumber                  string  `protobuf:"bytes,76,opt,name=mother_id_number,json=motherIdNumber,proto3" json:"mother_id_number"`
	MotherName                      string  `protobuf:"bytes,77,opt,name=mother_name,json=motherName,proto3" json:"mother_name"`
	MotherBirthDate                 string  `protobuf:"bytes,78,opt,name=mother_birth_date,json=motherBirthDate,proto3" json:"mother_birth_date"`
	MotherDeathDate                 string  `protobuf:"bytes,79,opt,name=mother_death_date,json=motherDeathDate,proto3" json:"mother_death_date"`
	ParentAddress                   string  `protobuf:"bytes,80,opt,name=parent_address,json=parentAddress,proto3" json:"parent_address"`
	ParentRegencyId                 uint32  `protobuf:"varint,81,opt,name=parent_regency_id,json=parentRegencyId,proto3" json:"parent_regency_id"`
	ParentPostalCode                string  `protobuf:"bytes,82,opt,name=parent_postal_code,json=parentPostalCode,proto3" json:"parent_postal_code"`
	ParentPhoneNumber               string  `protobuf:"bytes,83,opt,name=parent_phone_number,json=parentPhoneNumber,proto3" json:"parent_phone_number"`
	ParentEmail                     string  `protobuf:"bytes,84,opt,name=parent_email,json=parentEmail,proto3" json:"parent_email"`
	FatherFinalAcademicBackground   string  `protobuf:"bytes,85,opt,name=father_final_academic_background,json=fatherFinalAcademicBackground,proto3" json:"father_final_academic_background"`
	FatherOccupation                string  `protobuf:"bytes,86,opt,name=father_occupation,json=fatherOccupation,proto3" json:"father_occupation"`
	MotherFinalAcademicBackground   string  `protobuf:"bytes,87,opt,name=mother_final_academic_background,json=motherFinalAcademicBackground,proto3" json:"mother_final_academic_background"`
	MotherOccupation                string  `protobuf:"bytes,88,opt,name=mother_occupation,json=motherOccupation,proto3" json:"mother_occupation"`
	ParentIncome                    float64 `protobuf:"fixed64,89,opt,name=parent_income,json=parentIncome,proto3" json:"parent_income"`
	IsFinanciallyCapable            bool    `protobuf:"varint,90,opt,name=is_financially_capable,json=isFinanciallyCapable,proto3" json:"is_financially_capable"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{8}
}

func (x *CreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRequest) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *CreateRequest) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *CreateRequest) GetBirthRegencyId() uint32 {
	if x != nil {
		return x.BirthRegencyId
	}
	return 0
}

func (x *CreateRequest) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *CreateRequest) GetReligion() string {
	if x != nil {
		return x.Religion
	}
	return ""
}

func (x *CreateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateRequest) GetRt() string {
	if x != nil {
		return x.Rt
	}
	return ""
}

func (x *CreateRequest) GetRw() string {
	if x != nil {
		return x.Rw
	}
	return ""
}

func (x *CreateRequest) GetVillageId() uint32 {
	if x != nil {
		return x.VillageId
	}
	return 0
}

func (x *CreateRequest) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *CreateRequest) GetPreviousAddress() string {
	if x != nil {
		return x.PreviousAddress
	}
	return ""
}

func (x *CreateRequest) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *CreateRequest) GetNpwpNumber() string {
	if x != nil {
		return x.NpwpNumber
	}
	return ""
}

func (x *CreateRequest) GetNisnNumber() string {
	if x != nil {
		return x.NisnNumber
	}
	return ""
}

func (x *CreateRequest) GetResidenceType() string {
	if x != nil {
		return x.ResidenceType
	}
	return ""
}

func (x *CreateRequest) GetTransportationMean() string {
	if x != nil {
		return x.TransportationMean
	}
	return ""
}

func (x *CreateRequest) GetKpsReceiver() string {
	if x != nil {
		return x.KpsReceiver
	}
	return ""
}

func (x *CreateRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *CreateRequest) GetMobilePhoneNumber() string {
	if x != nil {
		return x.MobilePhoneNumber
	}
	return ""
}

func (x *CreateRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateRequest) GetHomepage() string {
	if x != nil {
		return x.Homepage
	}
	return ""
}

func (x *CreateRequest) GetWorkType() string {
	if x != nil {
		return x.WorkType
	}
	return ""
}

func (x *CreateRequest) GetWorkPlace() string {
	if x != nil {
		return x.WorkPlace
	}
	return ""
}

func (x *CreateRequest) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *CreateRequest) GetAskesNumber() string {
	if x != nil {
		return x.AskesNumber
	}
	return ""
}

func (x *CreateRequest) GetTotalBrother() uint32 {
	if x != nil {
		return x.TotalBrother
	}
	return 0
}

func (x *CreateRequest) GetTotalSister() uint32 {
	if x != nil {
		return x.TotalSister
	}
	return 0
}

func (x *CreateRequest) GetHobby() string {
	if x != nil {
		return x.Hobby
	}
	return ""
}

func (x *CreateRequest) GetExperience() string {
	if x != nil {
		return x.Experience
	}
	return ""
}

func (x *CreateRequest) GetTotalDependent() uint32 {
	if x != nil {
		return x.TotalDependent
	}
	return 0
}

func (x *CreateRequest) GetNimNumber() int64 {
	if x != nil {
		return x.NimNumber
	}
	return 0
}

func (x *CreateRequest) GetStudentForce() uint32 {
	if x != nil {
		return x.StudentForce
	}
	return 0
}

func (x *CreateRequest) GetAdmittanceSemester() string {
	if x != nil {
		return x.AdmittanceSemester
	}
	return ""
}

func (x *CreateRequest) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *CreateRequest) GetCurriculumId() string {
	if x != nil {
		return x.CurriculumId
	}
	return ""
}

func (x *CreateRequest) GetAdmittanceTestNumber() string {
	if x != nil {
		return x.AdmittanceTestNumber
	}
	return ""
}

func (x *CreateRequest) GetAdmittanceDate() string {
	if x != nil {
		return x.AdmittanceDate
	}
	return ""
}

func (x *CreateRequest) GetAdmittanceStatus() string {
	if x != nil {
		return x.AdmittanceStatus
	}
	return ""
}

func (x *CreateRequest) GetTotalTransferCredit() uint32 {
	if x != nil {
		return x.TotalTransferCredit
	}
	return 0
}

func (x *CreateRequest) GetPreviousCollege() string {
	if x != nil {
		return x.PreviousCollege
	}
	return ""
}

func (x *CreateRequest) GetPreviousStudyProgram() string {
	if x != nil {
		return x.PreviousStudyProgram
	}
	return ""
}

func (x *CreateRequest) GetPreviousNimNumber() int64 {
	if x != nil {
		return x.PreviousNimNumber
	}
	return 0
}

func (x *CreateRequest) GetPreviousNimAdmittanceYear() string {
	if x != nil {
		return x.PreviousNimAdmittanceYear
	}
	return ""
}

func (x *CreateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreateRequest) GetIsForeignStudent() bool {
	if x != nil {
		return x.IsForeignStudent
	}
	return false
}

func (x *CreateRequest) GetCollegeEntranceType() string {
	if x != nil {
		return x.CollegeEntranceType
	}
	return ""
}

func (x *CreateRequest) GetClassTime() string {
	if x != nil {
		return x.ClassTime
	}
	return ""
}

func (x *CreateRequest) GetFundSource() string {
	if x != nil {
		return x.FundSource
	}
	return ""
}

func (x *CreateRequest) GetIsScholarshipGrantee() bool {
	if x != nil {
		return x.IsScholarshipGrantee
	}
	return false
}

func (x *CreateRequest) GetHasCompleteRequirement() bool {
	if x != nil {
		return x.HasCompleteRequirement
	}
	return false
}

func (x *CreateRequest) GetSchoolCertificateType() string {
	if x != nil {
		return x.SchoolCertificateType
	}
	return ""
}

func (x *CreateRequest) GetSchoolGraduationYear() string {
	if x != nil {
		return x.SchoolGraduationYear
	}
	return ""
}

func (x *CreateRequest) GetSchoolName() string {
	if x != nil {
		return x.SchoolName
	}
	return ""
}

func (x *CreateRequest) GetSchoolAccreditation() string {
	if x != nil {
		return x.SchoolAccreditation
	}
	return ""
}

func (x *CreateRequest) GetSchoolAddress() string {
	if x != nil {
		return x.SchoolAddress
	}
	return ""
}

func (x *CreateRequest) GetSchoolMajor() string {
	if x != nil {
		return x.SchoolMajor
	}
	return ""
}

func (x *CreateRequest) GetSchoolCertificateNumber() string {
	if x != nil {
		return x.SchoolCertificateNumber
	}
	return ""
}

func (x *CreateRequest) GetSchoolCertificateDate() string {
	if x != nil {
		return x.SchoolCertificateDate
	}
	return ""
}

func (x *CreateRequest) GetTotalSchoolFinalExamSubject() uint32 {
	if x != nil {
		return x.TotalSchoolFinalExamSubject
	}
	return 0
}

func (x *CreateRequest) GetSchoolFinalExamScore() float64 {
	if x != nil {
		return x.SchoolFinalExamScore
	}
	return 0
}

func (x *CreateRequest) GetGuardianName() string {
	if x != nil {
		return x.GuardianName
	}
	return ""
}

func (x *CreateRequest) GetGuardianBirthDate() string {
	if x != nil {
		return x.GuardianBirthDate
	}
	return ""
}

func (x *CreateRequest) GetGuardianDeathDate() string {
	if x != nil {
		return x.GuardianDeathDate
	}
	return ""
}

func (x *CreateRequest) GetGuardianAddress() string {
	if x != nil {
		return x.GuardianAddress
	}
	return ""
}

func (x *CreateRequest) GetGuardianRegencyId() uint32 {
	if x != nil {
		return x.GuardianRegencyId
	}
	return 0
}

func (x *CreateRequest) GetGuardianPostalCode() string {
	if x != nil {
		return x.GuardianPostalCode
	}
	return ""
}

func (x *CreateRequest) GetGuardianPhoneNumber() string {
	if x != nil {
		return x.GuardianPhoneNumber
	}
	return ""
}

func (x *CreateRequest) GetGuardianEmail() string {
	if x != nil {
		return x.GuardianEmail
	}
	return ""
}

func (x *CreateRequest) GetGuardianFinalAcademicBackground() string {
	if x != nil {
		return x.GuardianFinalAcademicBackground
	}
	return ""
}

func (x *CreateRequest) GetGuardianOccupation() string {
	if x != nil {
		return x.GuardianOccupation
	}
	return ""
}

func (x *CreateRequest) GetFatherIdNumber() string {
	if x != nil {
		return x.FatherIdNumber
	}
	return ""
}

func (x *CreateRequest) GetFatherName() string {
	if x != nil {
		return x.FatherName
	}
	return ""
}

func (x *CreateRequest) GetFatherBirthDate() string {
	if x != nil {
		return x.FatherBirthDate
	}
	return ""
}

func (x *CreateRequest) GetFatherDeathDate() string {
	if x != nil {
		return x.FatherDeathDate
	}
	return ""
}

func (x *CreateRequest) GetMotherIdNumber() string {
	if x != nil {
		return x.MotherIdNumber
	}
	return ""
}

func (x *CreateRequest) GetMotherName() string {
	if x != nil {
		return x.MotherName
	}
	return ""
}

func (x *CreateRequest) GetMotherBirthDate() string {
	if x != nil {
		return x.MotherBirthDate
	}
	return ""
}

func (x *CreateRequest) GetMotherDeathDate() string {
	if x != nil {
		return x.MotherDeathDate
	}
	return ""
}

func (x *CreateRequest) GetParentAddress() string {
	if x != nil {
		return x.ParentAddress
	}
	return ""
}

func (x *CreateRequest) GetParentRegencyId() uint32 {
	if x != nil {
		return x.ParentRegencyId
	}
	return 0
}

func (x *CreateRequest) GetParentPostalCode() string {
	if x != nil {
		return x.ParentPostalCode
	}
	return ""
}

func (x *CreateRequest) GetParentPhoneNumber() string {
	if x != nil {
		return x.ParentPhoneNumber
	}
	return ""
}

func (x *CreateRequest) GetParentEmail() string {
	if x != nil {
		return x.ParentEmail
	}
	return ""
}

func (x *CreateRequest) GetFatherFinalAcademicBackground() string {
	if x != nil {
		return x.FatherFinalAcademicBackground
	}
	return ""
}

func (x *CreateRequest) GetFatherOccupation() string {
	if x != nil {
		return x.FatherOccupation
	}
	return ""
}

func (x *CreateRequest) GetMotherFinalAcademicBackground() string {
	if x != nil {
		return x.MotherFinalAcademicBackground
	}
	return ""
}

func (x *CreateRequest) GetMotherOccupation() string {
	if x != nil {
		return x.MotherOccupation
	}
	return ""
}

func (x *CreateRequest) GetParentIncome() float64 {
	if x != nil {
		return x.ParentIncome
	}
	return 0
}

func (x *CreateRequest) GetIsFinanciallyCapable() bool {
	if x != nil {
		return x.IsFinanciallyCapable
	}
	return false
}

type CreateResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateResponseData) Reset() {
	*x = CreateResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponseData) ProtoMessage() {}

func (x *CreateResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponseData.ProtoReflect.Descriptor instead.
func (*CreateResponseData) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{9}
}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *CreateResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{10}
}

func (x *CreateResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *CreateResponse) GetData() *CreateResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                            string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Sex                             string  `protobuf:"bytes,3,opt,name=sex,proto3" json:"sex"`
	MaritalStatus                   string  `protobuf:"bytes,4,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status"`
	BirthRegencyId                  uint32  `protobuf:"varint,5,opt,name=birth_regency_id,json=birthRegencyId,proto3" json:"birth_regency_id"`
	BirthDate                       string  `protobuf:"bytes,6,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
	Religion                        string  `protobuf:"bytes,7,opt,name=religion,proto3" json:"religion"`
	Address                         string  `protobuf:"bytes,8,opt,name=address,proto3" json:"address"`
	Rt                              string  `protobuf:"bytes,9,opt,name=rt,proto3" json:"rt"`
	Rw                              string  `protobuf:"bytes,10,opt,name=rw,proto3" json:"rw"`
	VillageId                       uint32  `protobuf:"varint,11,opt,name=village_id,json=villageId,proto3" json:"village_id"`
	PostalCode                      string  `protobuf:"bytes,12,opt,name=postal_code,json=postalCode,proto3" json:"postal_code"`
	PreviousAddress                 string  `protobuf:"bytes,13,opt,name=previous_address,json=previousAddress,proto3" json:"previous_address"`
	IdNumber                        string  `protobuf:"bytes,14,opt,name=id_number,json=idNumber,proto3" json:"id_number"`
	NpwpNumber                      string  `protobuf:"bytes,15,opt,name=npwp_number,json=npwpNumber,proto3" json:"npwp_number"`
	NisnNumber                      string  `protobuf:"bytes,16,opt,name=nisn_number,json=nisnNumber,proto3" json:"nisn_number"`
	ResidenceType                   string  `protobuf:"bytes,17,opt,name=residence_type,json=residenceType,proto3" json:"residence_type"`
	TransportationMean              string  `protobuf:"bytes,18,opt,name=transportation_mean,json=transportationMean,proto3" json:"transportation_mean"`
	KpsReceiver                     string  `protobuf:"bytes,19,opt,name=kps_receiver,json=kpsReceiver,proto3" json:"kps_receiver"`
	PhoneNumber                     string  `protobuf:"bytes,20,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	MobilePhoneNumber               string  `protobuf:"bytes,21,opt,name=mobile_phone_number,json=mobilePhoneNumber,proto3" json:"mobile_phone_number"`
	Email                           string  `protobuf:"bytes,22,opt,name=email,proto3" json:"email"`
	Homepage                        string  `protobuf:"bytes,23,opt,name=homepage,proto3" json:"homepage"`
	WorkType                        string  `protobuf:"bytes,24,opt,name=work_type,json=workType,proto3" json:"work_type"`
	WorkPlace                       string  `protobuf:"bytes,25,opt,name=work_place,json=workPlace,proto3" json:"work_place"`
	Nationality                     string  `protobuf:"bytes,26,opt,name=nationality,proto3" json:"nationality"`
	AskesNumber                     string  `protobuf:"bytes,27,opt,name=askes_number,json=askesNumber,proto3" json:"askes_number"`
	TotalBrother                    uint32  `protobuf:"varint,28,opt,name=total_brother,json=totalBrother,proto3" json:"total_brother"`
	TotalSister                     uint32  `protobuf:"varint,29,opt,name=total_sister,json=totalSister,proto3" json:"total_sister"`
	Hobby                           string  `protobuf:"bytes,30,opt,name=hobby,proto3" json:"hobby"`
	Experience                      string  `protobuf:"bytes,31,opt,name=experience,proto3" json:"experience"`
	TotalDependent                  uint32  `protobuf:"varint,32,opt,name=total_dependent,json=totalDependent,proto3" json:"total_dependent"`
	NimNumber                       int64   `protobuf:"varint,33,opt,name=nim_number,json=nimNumber,proto3" json:"nim_number"`
	StudentForce                    uint32  `protobuf:"varint,34,opt,name=student_force,json=studentForce,proto3" json:"student_force"`
	AdmittanceSemester              string  `protobuf:"bytes,35,opt,name=admittance_semester,json=admittanceSemester,proto3" json:"admittance_semester"`
	StudyProgramId                  string  `protobuf:"bytes,36,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	CurriculumId                    string  `protobuf:"bytes,37,opt,name=curriculum_id,json=curriculumId,proto3" json:"curriculum_id"`
	AdmittanceTestNumber            string  `protobuf:"bytes,38,opt,name=admittance_test_number,json=admittanceTestNumber,proto3" json:"admittance_test_number"`
	AdmittanceDate                  string  `protobuf:"bytes,39,opt,name=admittance_date,json=admittanceDate,proto3" json:"admittance_date"`
	AdmittanceStatus                string  `protobuf:"bytes,40,opt,name=admittance_status,json=admittanceStatus,proto3" json:"admittance_status"`
	TotalTransferCredit             uint32  `protobuf:"varint,41,opt,name=total_transfer_credit,json=totalTransferCredit,proto3" json:"total_transfer_credit"`
	PreviousCollege                 string  `protobuf:"bytes,42,opt,name=previous_college,json=previousCollege,proto3" json:"previous_college"`
	PreviousStudyProgram            string  `protobuf:"bytes,43,opt,name=previous_study_program,json=previousStudyProgram,proto3" json:"previous_study_program"`
	PreviousNimNumber               int64   `protobuf:"varint,44,opt,name=previous_nim_number,json=previousNimNumber,proto3" json:"previous_nim_number"`
	PreviousNimAdmittanceYear       string  `protobuf:"bytes,45,opt,name=previous_nim_admittance_year,json=previousNimAdmittanceYear,proto3" json:"previous_nim_admittance_year"`
	Status                          string  `protobuf:"bytes,46,opt,name=status,proto3" json:"status"`
	IsForeignStudent                bool    `protobuf:"varint,47,opt,name=is_foreign_student,json=isForeignStudent,proto3" json:"is_foreign_student"`
	CollegeEntranceType             string  `protobuf:"bytes,48,opt,name=college_entrance_type,json=collegeEntranceType,proto3" json:"college_entrance_type"`
	ClassTime                       string  `protobuf:"bytes,49,opt,name=class_time,json=classTime,proto3" json:"class_time"`
	FundSource                      string  `protobuf:"bytes,50,opt,name=fund_source,json=fundSource,proto3" json:"fund_source"`
	IsScholarshipGrantee            bool    `protobuf:"varint,51,opt,name=is_scholarship_grantee,json=isScholarshipGrantee,proto3" json:"is_scholarship_grantee"`
	HasCompleteRequirement          bool    `protobuf:"varint,52,opt,name=has_complete_requirement,json=hasCompleteRequirement,proto3" json:"has_complete_requirement"`
	SchoolCertificateType           string  `protobuf:"bytes,53,opt,name=school_certificate_type,json=schoolCertificateType,proto3" json:"school_certificate_type"`
	SchoolGraduationYear            string  `protobuf:"bytes,54,opt,name=school_graduation_year,json=schoolGraduationYear,proto3" json:"school_graduation_year"`
	SchoolName                      string  `protobuf:"bytes,55,opt,name=school_name,json=schoolName,proto3" json:"school_name"`
	SchoolAccreditation             string  `protobuf:"bytes,56,opt,name=school_accreditation,json=schoolAccreditation,proto3" json:"school_accreditation"`
	SchoolAddress                   string  `protobuf:"bytes,57,opt,name=school_address,json=schoolAddress,proto3" json:"school_address"`
	SchoolMajor                     string  `protobuf:"bytes,58,opt,name=school_major,json=schoolMajor,proto3" json:"school_major"`
	SchoolCertificateNumber         string  `protobuf:"bytes,59,opt,name=school_certificate_number,json=schoolCertificateNumber,proto3" json:"school_certificate_number"`
	SchoolCertificateDate           string  `protobuf:"bytes,60,opt,name=school_certificate_date,json=schoolCertificateDate,proto3" json:"school_certificate_date"`
	TotalSchoolFinalExamSubject     uint32  `protobuf:"varint,61,opt,name=total_school_final_exam_subject,json=totalSchoolFinalExamSubject,proto3" json:"total_school_final_exam_subject"`
	SchoolFinalExamScore            float64 `protobuf:"fixed64,62,opt,name=school_final_exam_score,json=schoolFinalExamScore,proto3" json:"school_final_exam_score"`
	GuardianName                    string  `protobuf:"bytes,63,opt,name=guardian_name,json=guardianName,proto3" json:"guardian_name"`
	GuardianBirthDate               string  `protobuf:"bytes,64,opt,name=guardian_birth_date,json=guardianBirthDate,proto3" json:"guardian_birth_date"`
	GuardianDeathDate               string  `protobuf:"bytes,65,opt,name=guardian_death_date,json=guardianDeathDate,proto3" json:"guardian_death_date"`
	GuardianAddress                 string  `protobuf:"bytes,66,opt,name=guardian_address,json=guardianAddress,proto3" json:"guardian_address"`
	GuardianRegencyId               uint32  `protobuf:"varint,67,opt,name=guardian_regency_id,json=guardianRegencyId,proto3" json:"guardian_regency_id"`
	GuardianPostalCode              string  `protobuf:"bytes,68,opt,name=guardian_postal_code,json=guardianPostalCode,proto3" json:"guardian_postal_code"`
	GuardianPhoneNumber             string  `protobuf:"bytes,69,opt,name=guardian_phone_number,json=guardianPhoneNumber,proto3" json:"guardian_phone_number"`
	GuardianEmail                   string  `protobuf:"bytes,70,opt,name=guardian_email,json=guardianEmail,proto3" json:"guardian_email"`
	GuardianFinalAcademicBackground string  `protobuf:"bytes,71,opt,name=guardian_final_academic_background,json=guardianFinalAcademicBackground,proto3" json:"guardian_final_academic_background"`
	GuardianOccupation              string  `protobuf:"bytes,72,opt,name=guardian_occupation,json=guardianOccupation,proto3" json:"guardian_occupation"`
	FatherIdNumber                  string  `protobuf:"bytes,73,opt,name=father_id_number,json=fatherIdNumber,proto3" json:"father_id_number"`
	FatherName                      string  `protobuf:"bytes,74,opt,name=father_name,json=fatherName,proto3" json:"father_name"`
	FatherBirthDate                 string  `protobuf:"bytes,75,opt,name=father_birth_date,json=fatherBirthDate,proto3" json:"father_birth_date"`
	FatherDeathDate                 string  `protobuf:"bytes,76,opt,name=father_death_date,json=fatherDeathDate,proto3" json:"father_death_date"`
	MotherIdNumber                  string  `protobuf:"bytes,77,opt,name=mother_id_number,json=motherIdNumber,proto3" json:"mother_id_number"`
	MotherName                      string  `protobuf:"bytes,78,opt,name=mother_name,json=motherName,proto3" json:"mother_name"`
	MotherBirthDate                 string  `protobuf:"bytes,79,opt,name=mother_birth_date,json=motherBirthDate,proto3" json:"mother_birth_date"`
	MotherDeathDate                 string  `protobuf:"bytes,80,opt,name=mother_death_date,json=motherDeathDate,proto3" json:"mother_death_date"`
	ParentAddress                   string  `protobuf:"bytes,81,opt,name=parent_address,json=parentAddress,proto3" json:"parent_address"`
	ParentRegencyId                 uint32  `protobuf:"varint,82,opt,name=parent_regency_id,json=parentRegencyId,proto3" json:"parent_regency_id"`
	ParentPostalCode                string  `protobuf:"bytes,83,opt,name=parent_postal_code,json=parentPostalCode,proto3" json:"parent_postal_code"`
	ParentPhoneNumber               string  `protobuf:"bytes,84,opt,name=parent_phone_number,json=parentPhoneNumber,proto3" json:"parent_phone_number"`
	ParentEmail                     string  `protobuf:"bytes,85,opt,name=parent_email,json=parentEmail,proto3" json:"parent_email"`
	FatherFinalAcademicBackground   string  `protobuf:"bytes,86,opt,name=father_final_academic_background,json=fatherFinalAcademicBackground,proto3" json:"father_final_academic_background"`
	FatherOccupation                string  `protobuf:"bytes,87,opt,name=father_occupation,json=fatherOccupation,proto3" json:"father_occupation"`
	MotherFinalAcademicBackground   string  `protobuf:"bytes,88,opt,name=mother_final_academic_background,json=motherFinalAcademicBackground,proto3" json:"mother_final_academic_background"`
	MotherOccupation                string  `protobuf:"bytes,89,opt,name=mother_occupation,json=motherOccupation,proto3" json:"mother_occupation"`
	ParentIncome                    float64 `protobuf:"fixed64,90,opt,name=parent_income,json=parentIncome,proto3" json:"parent_income"`
	IsFinanciallyCapable            bool    `protobuf:"varint,91,opt,name=is_financially_capable,json=isFinanciallyCapable,proto3" json:"is_financially_capable"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRequest) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *UpdateRequest) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *UpdateRequest) GetBirthRegencyId() uint32 {
	if x != nil {
		return x.BirthRegencyId
	}
	return 0
}

func (x *UpdateRequest) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *UpdateRequest) GetReligion() string {
	if x != nil {
		return x.Religion
	}
	return ""
}

func (x *UpdateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateRequest) GetRt() string {
	if x != nil {
		return x.Rt
	}
	return ""
}

func (x *UpdateRequest) GetRw() string {
	if x != nil {
		return x.Rw
	}
	return ""
}

func (x *UpdateRequest) GetVillageId() uint32 {
	if x != nil {
		return x.VillageId
	}
	return 0
}

func (x *UpdateRequest) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *UpdateRequest) GetPreviousAddress() string {
	if x != nil {
		return x.PreviousAddress
	}
	return ""
}

func (x *UpdateRequest) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *UpdateRequest) GetNpwpNumber() string {
	if x != nil {
		return x.NpwpNumber
	}
	return ""
}

func (x *UpdateRequest) GetNisnNumber() string {
	if x != nil {
		return x.NisnNumber
	}
	return ""
}

func (x *UpdateRequest) GetResidenceType() string {
	if x != nil {
		return x.ResidenceType
	}
	return ""
}

func (x *UpdateRequest) GetTransportationMean() string {
	if x != nil {
		return x.TransportationMean
	}
	return ""
}

func (x *UpdateRequest) GetKpsReceiver() string {
	if x != nil {
		return x.KpsReceiver
	}
	return ""
}

func (x *UpdateRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UpdateRequest) GetMobilePhoneNumber() string {
	if x != nil {
		return x.MobilePhoneNumber
	}
	return ""
}

func (x *UpdateRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateRequest) GetHomepage() string {
	if x != nil {
		return x.Homepage
	}
	return ""
}

func (x *UpdateRequest) GetWorkType() string {
	if x != nil {
		return x.WorkType
	}
	return ""
}

func (x *UpdateRequest) GetWorkPlace() string {
	if x != nil {
		return x.WorkPlace
	}
	return ""
}

func (x *UpdateRequest) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *UpdateRequest) GetAskesNumber() string {
	if x != nil {
		return x.AskesNumber
	}
	return ""
}

func (x *UpdateRequest) GetTotalBrother() uint32 {
	if x != nil {
		return x.TotalBrother
	}
	return 0
}

func (x *UpdateRequest) GetTotalSister() uint32 {
	if x != nil {
		return x.TotalSister
	}
	return 0
}

func (x *UpdateRequest) GetHobby() string {
	if x != nil {
		return x.Hobby
	}
	return ""
}

func (x *UpdateRequest) GetExperience() string {
	if x != nil {
		return x.Experience
	}
	return ""
}

func (x *UpdateRequest) GetTotalDependent() uint32 {
	if x != nil {
		return x.TotalDependent
	}
	return 0
}

func (x *UpdateRequest) GetNimNumber() int64 {
	if x != nil {
		return x.NimNumber
	}
	return 0
}

func (x *UpdateRequest) GetStudentForce() uint32 {
	if x != nil {
		return x.StudentForce
	}
	return 0
}

func (x *UpdateRequest) GetAdmittanceSemester() string {
	if x != nil {
		return x.AdmittanceSemester
	}
	return ""
}

func (x *UpdateRequest) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *UpdateRequest) GetCurriculumId() string {
	if x != nil {
		return x.CurriculumId
	}
	return ""
}

func (x *UpdateRequest) GetAdmittanceTestNumber() string {
	if x != nil {
		return x.AdmittanceTestNumber
	}
	return ""
}

func (x *UpdateRequest) GetAdmittanceDate() string {
	if x != nil {
		return x.AdmittanceDate
	}
	return ""
}

func (x *UpdateRequest) GetAdmittanceStatus() string {
	if x != nil {
		return x.AdmittanceStatus
	}
	return ""
}

func (x *UpdateRequest) GetTotalTransferCredit() uint32 {
	if x != nil {
		return x.TotalTransferCredit
	}
	return 0
}

func (x *UpdateRequest) GetPreviousCollege() string {
	if x != nil {
		return x.PreviousCollege
	}
	return ""
}

func (x *UpdateRequest) GetPreviousStudyProgram() string {
	if x != nil {
		return x.PreviousStudyProgram
	}
	return ""
}

func (x *UpdateRequest) GetPreviousNimNumber() int64 {
	if x != nil {
		return x.PreviousNimNumber
	}
	return 0
}

func (x *UpdateRequest) GetPreviousNimAdmittanceYear() string {
	if x != nil {
		return x.PreviousNimAdmittanceYear
	}
	return ""
}

func (x *UpdateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateRequest) GetIsForeignStudent() bool {
	if x != nil {
		return x.IsForeignStudent
	}
	return false
}

func (x *UpdateRequest) GetCollegeEntranceType() string {
	if x != nil {
		return x.CollegeEntranceType
	}
	return ""
}

func (x *UpdateRequest) GetClassTime() string {
	if x != nil {
		return x.ClassTime
	}
	return ""
}

func (x *UpdateRequest) GetFundSource() string {
	if x != nil {
		return x.FundSource
	}
	return ""
}

func (x *UpdateRequest) GetIsScholarshipGrantee() bool {
	if x != nil {
		return x.IsScholarshipGrantee
	}
	return false
}

func (x *UpdateRequest) GetHasCompleteRequirement() bool {
	if x != nil {
		return x.HasCompleteRequirement
	}
	return false
}

func (x *UpdateRequest) GetSchoolCertificateType() string {
	if x != nil {
		return x.SchoolCertificateType
	}
	return ""
}

func (x *UpdateRequest) GetSchoolGraduationYear() string {
	if x != nil {
		return x.SchoolGraduationYear
	}
	return ""
}

func (x *UpdateRequest) GetSchoolName() string {
	if x != nil {
		return x.SchoolName
	}
	return ""
}

func (x *UpdateRequest) GetSchoolAccreditation() string {
	if x != nil {
		return x.SchoolAccreditation
	}
	return ""
}

func (x *UpdateRequest) GetSchoolAddress() string {
	if x != nil {
		return x.SchoolAddress
	}
	return ""
}

func (x *UpdateRequest) GetSchoolMajor() string {
	if x != nil {
		return x.SchoolMajor
	}
	return ""
}

func (x *UpdateRequest) GetSchoolCertificateNumber() string {
	if x != nil {
		return x.SchoolCertificateNumber
	}
	return ""
}

func (x *UpdateRequest) GetSchoolCertificateDate() string {
	if x != nil {
		return x.SchoolCertificateDate
	}
	return ""
}

func (x *UpdateRequest) GetTotalSchoolFinalExamSubject() uint32 {
	if x != nil {
		return x.TotalSchoolFinalExamSubject
	}
	return 0
}

func (x *UpdateRequest) GetSchoolFinalExamScore() float64 {
	if x != nil {
		return x.SchoolFinalExamScore
	}
	return 0
}

func (x *UpdateRequest) GetGuardianName() string {
	if x != nil {
		return x.GuardianName
	}
	return ""
}

func (x *UpdateRequest) GetGuardianBirthDate() string {
	if x != nil {
		return x.GuardianBirthDate
	}
	return ""
}

func (x *UpdateRequest) GetGuardianDeathDate() string {
	if x != nil {
		return x.GuardianDeathDate
	}
	return ""
}

func (x *UpdateRequest) GetGuardianAddress() string {
	if x != nil {
		return x.GuardianAddress
	}
	return ""
}

func (x *UpdateRequest) GetGuardianRegencyId() uint32 {
	if x != nil {
		return x.GuardianRegencyId
	}
	return 0
}

func (x *UpdateRequest) GetGuardianPostalCode() string {
	if x != nil {
		return x.GuardianPostalCode
	}
	return ""
}

func (x *UpdateRequest) GetGuardianPhoneNumber() string {
	if x != nil {
		return x.GuardianPhoneNumber
	}
	return ""
}

func (x *UpdateRequest) GetGuardianEmail() string {
	if x != nil {
		return x.GuardianEmail
	}
	return ""
}

func (x *UpdateRequest) GetGuardianFinalAcademicBackground() string {
	if x != nil {
		return x.GuardianFinalAcademicBackground
	}
	return ""
}

func (x *UpdateRequest) GetGuardianOccupation() string {
	if x != nil {
		return x.GuardianOccupation
	}
	return ""
}

func (x *UpdateRequest) GetFatherIdNumber() string {
	if x != nil {
		return x.FatherIdNumber
	}
	return ""
}

func (x *UpdateRequest) GetFatherName() string {
	if x != nil {
		return x.FatherName
	}
	return ""
}

func (x *UpdateRequest) GetFatherBirthDate() string {
	if x != nil {
		return x.FatherBirthDate
	}
	return ""
}

func (x *UpdateRequest) GetFatherDeathDate() string {
	if x != nil {
		return x.FatherDeathDate
	}
	return ""
}

func (x *UpdateRequest) GetMotherIdNumber() string {
	if x != nil {
		return x.MotherIdNumber
	}
	return ""
}

func (x *UpdateRequest) GetMotherName() string {
	if x != nil {
		return x.MotherName
	}
	return ""
}

func (x *UpdateRequest) GetMotherBirthDate() string {
	if x != nil {
		return x.MotherBirthDate
	}
	return ""
}

func (x *UpdateRequest) GetMotherDeathDate() string {
	if x != nil {
		return x.MotherDeathDate
	}
	return ""
}

func (x *UpdateRequest) GetParentAddress() string {
	if x != nil {
		return x.ParentAddress
	}
	return ""
}

func (x *UpdateRequest) GetParentRegencyId() uint32 {
	if x != nil {
		return x.ParentRegencyId
	}
	return 0
}

func (x *UpdateRequest) GetParentPostalCode() string {
	if x != nil {
		return x.ParentPostalCode
	}
	return ""
}

func (x *UpdateRequest) GetParentPhoneNumber() string {
	if x != nil {
		return x.ParentPhoneNumber
	}
	return ""
}

func (x *UpdateRequest) GetParentEmail() string {
	if x != nil {
		return x.ParentEmail
	}
	return ""
}

func (x *UpdateRequest) GetFatherFinalAcademicBackground() string {
	if x != nil {
		return x.FatherFinalAcademicBackground
	}
	return ""
}

func (x *UpdateRequest) GetFatherOccupation() string {
	if x != nil {
		return x.FatherOccupation
	}
	return ""
}

func (x *UpdateRequest) GetMotherFinalAcademicBackground() string {
	if x != nil {
		return x.MotherFinalAcademicBackground
	}
	return ""
}

func (x *UpdateRequest) GetMotherOccupation() string {
	if x != nil {
		return x.MotherOccupation
	}
	return ""
}

func (x *UpdateRequest) GetParentIncome() float64 {
	if x != nil {
		return x.ParentIncome
	}
	return 0
}

func (x *UpdateRequest) GetIsFinanciallyCapable() bool {
	if x != nil {
		return x.IsFinanciallyCapable
	}
	return false
}

type UpdateResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateResponseData) Reset() {
	*x = UpdateResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponseData) ProtoMessage() {}

func (x *UpdateResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponseData.ProtoReflect.Descriptor instead.
func (*UpdateResponseData) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{12}
}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *UpdateResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UpdateResponse) GetData() *UpdateResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResponseData) Reset() {
	*x = DeleteResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponseData) ProtoMessage() {}

func (x *DeleteResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponseData.ProtoReflect.Descriptor instead.
func (*DeleteResponseData) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{15}
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta               `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *DeleteResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DeleteResponse) GetData() *DeleteResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BulkUpdateStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentIds            []string `protobuf:"bytes,1,rep,name=student_ids,json=studentIds,proto3" json:"student_ids"`
	Status                string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status"`
	StatusDate            string   `protobuf:"bytes,3,opt,name=status_date,json=statusDate,proto3" json:"status_date"`
	StatusReferenceNumber string   `protobuf:"bytes,4,opt,name=status_reference_number,json=statusReferenceNumber,proto3" json:"status_reference_number"`
	StatusPurpose         string   `protobuf:"bytes,5,opt,name=status_purpose,json=statusPurpose,proto3" json:"status_purpose"`
	StatusRemarks         string   `protobuf:"bytes,6,opt,name=status_remarks,json=statusRemarks,proto3" json:"status_remarks"`
}

func (x *BulkUpdateStatusRequest) Reset() {
	*x = BulkUpdateStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateStatusRequest) ProtoMessage() {}

func (x *BulkUpdateStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateStatusRequest.ProtoReflect.Descriptor instead.
func (*BulkUpdateStatusRequest) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{17}
}

func (x *BulkUpdateStatusRequest) GetStudentIds() []string {
	if x != nil {
		return x.StudentIds
	}
	return nil
}

func (x *BulkUpdateStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BulkUpdateStatusRequest) GetStatusDate() string {
	if x != nil {
		return x.StatusDate
	}
	return ""
}

func (x *BulkUpdateStatusRequest) GetStatusReferenceNumber() string {
	if x != nil {
		return x.StatusReferenceNumber
	}
	return ""
}

func (x *BulkUpdateStatusRequest) GetStatusPurpose() string {
	if x != nil {
		return x.StatusPurpose
	}
	return ""
}

func (x *BulkUpdateStatusRequest) GetStatusRemarks() string {
	if x != nil {
		return x.StatusRemarks
	}
	return ""
}

type BulkUpdateStatusResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BulkUpdateStatusResponseData) Reset() {
	*x = BulkUpdateStatusResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateStatusResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateStatusResponseData) ProtoMessage() {}

func (x *BulkUpdateStatusResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateStatusResponseData.ProtoReflect.Descriptor instead.
func (*BulkUpdateStatusResponseData) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{18}
}

type BulkUpdateStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                         `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *BulkUpdateStatusResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *BulkUpdateStatusResponse) Reset() {
	*x = BulkUpdateStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateStatusResponse) ProtoMessage() {}

func (x *BulkUpdateStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateStatusResponse.ProtoReflect.Descriptor instead.
func (*BulkUpdateStatusResponse) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{19}
}

func (x *BulkUpdateStatusResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *BulkUpdateStatusResponse) GetData() *BulkUpdateStatusResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetStatusSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SemesterId string `protobuf:"bytes,1,opt,name=semester_id,json=semesterId,proto3" json:"semester_id"`
}

func (x *GetStatusSummaryRequest) Reset() {
	*x = GetStatusSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusSummaryRequest) ProtoMessage() {}

func (x *GetStatusSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusSummaryRequest.ProtoReflect.Descriptor instead.
func (*GetStatusSummaryRequest) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{20}
}

func (x *GetStatusSummaryRequest) GetSemesterId() string {
	if x != nil {
		return x.SemesterId
	}
	return ""
}

type GetStatusSummaryResponseDataStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	Total  uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
}

func (x *GetStatusSummaryResponseDataStatus) Reset() {
	*x = GetStatusSummaryResponseDataStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusSummaryResponseDataStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusSummaryResponseDataStatus) ProtoMessage() {}

func (x *GetStatusSummaryResponseDataStatus) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusSummaryResponseDataStatus.ProtoReflect.Descriptor instead.
func (*GetStatusSummaryResponseDataStatus) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{21}
}

func (x *GetStatusSummaryResponseDataStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetStatusSummaryResponseDataStatus) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetStatusSummaryResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudyProgramId        string                                `protobuf:"bytes,1,opt,name=study_program_id,json=studyProgramId,proto3" json:"study_program_id"`
	StudyProgramName      string                                `protobuf:"bytes,2,opt,name=study_program_name,json=studyProgramName,proto3" json:"study_program_name"`
	DiktiStudyProgramType string                                `protobuf:"bytes,3,opt,name=dikti_study_program_type,json=diktiStudyProgramType,proto3" json:"dikti_study_program_type"`
	StudyLevelShortName   string                                `protobuf:"bytes,4,opt,name=study_level_short_name,json=studyLevelShortName,proto3" json:"study_level_short_name"`
	Statuses              []*GetStatusSummaryResponseDataStatus `protobuf:"bytes,5,rep,name=statuses,proto3" json:"statuses"`
}

func (x *GetStatusSummaryResponseData) Reset() {
	*x = GetStatusSummaryResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusSummaryResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusSummaryResponseData) ProtoMessage() {}

func (x *GetStatusSummaryResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusSummaryResponseData.ProtoReflect.Descriptor instead.
func (*GetStatusSummaryResponseData) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{22}
}

func (x *GetStatusSummaryResponseData) GetStudyProgramId() string {
	if x != nil {
		return x.StudyProgramId
	}
	return ""
}

func (x *GetStatusSummaryResponseData) GetStudyProgramName() string {
	if x != nil {
		return x.StudyProgramName
	}
	return ""
}

func (x *GetStatusSummaryResponseData) GetDiktiStudyProgramType() string {
	if x != nil {
		return x.DiktiStudyProgramType
	}
	return ""
}

func (x *GetStatusSummaryResponseData) GetStudyLevelShortName() string {
	if x != nil {
		return x.StudyLevelShortName
	}
	return ""
}

func (x *GetStatusSummaryResponseData) GetStatuses() []*GetStatusSummaryResponseDataStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type GetStatusSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                           `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data []*GetStatusSummaryResponseData `protobuf:"bytes,2,rep,name=data,proto3" json:"data"`
}

func (x *GetStatusSummaryResponse) Reset() {
	*x = GetStatusSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusSummaryResponse) ProtoMessage() {}

func (x *GetStatusSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetStatusSummaryResponse) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{23}
}

func (x *GetStatusSummaryResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetStatusSummaryResponse) GetData() []*GetStatusSummaryResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSubjectGradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit     uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Search    string `protobuf:"bytes,3,opt,name=search,proto3" json:"search"`
	StudentId string `protobuf:"bytes,4,opt,name=student_id,json=studentId,proto3" json:"student_id"`
}

func (x *GetSubjectGradeRequest) Reset() {
	*x = GetSubjectGradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectGradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectGradeRequest) ProtoMessage() {}

func (x *GetSubjectGradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectGradeRequest.ProtoReflect.Descriptor instead.
func (*GetSubjectGradeRequest) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{24}
}

func (x *GetSubjectGradeRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetSubjectGradeRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSubjectGradeRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetSubjectGradeRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

type GetSubjectGradeResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId               string  `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id"`
	SubjectCode             string  `protobuf:"bytes,2,opt,name=subject_code,json=subjectCode,proto3" json:"subject_code"`
	SubjectName             string  `protobuf:"bytes,3,opt,name=subject_name,json=subjectName,proto3" json:"subject_name"`
	GradeSemesterId         string  `protobuf:"bytes,4,opt,name=grade_semester_id,json=gradeSemesterId,proto3" json:"grade_semester_id"`
	GradeSemesterSchoolYear string  `protobuf:"bytes,5,opt,name=grade_semester_school_year,json=gradeSemesterSchoolYear,proto3" json:"grade_semester_school_year"`
	GradeSemesterType       string  `protobuf:"bytes,6,opt,name=grade_semester_type,json=gradeSemesterType,proto3" json:"grade_semester_type"`
	GradePoint              float64 `protobuf:"fixed64,7,opt,name=grade_point,json=gradePoint,proto3" json:"grade_point"`
	GradeCode               string  `protobuf:"bytes,8,opt,name=grade_code,json=gradeCode,proto3" json:"grade_code"`
	SubjectIsMandatory      bool    `protobuf:"varint,9,opt,name=subject_is_mandatory,json=subjectIsMandatory,proto3" json:"subject_is_mandatory"`
	SemesterPackage         uint32  `protobuf:"varint,10,opt,name=semester_package,json=semesterPackage,proto3" json:"semester_package"`
	SubjectTotalCredit      uint32  `protobuf:"varint,11,opt,name=subject_total_credit,json=subjectTotalCredit,proto3" json:"subject_total_credit"`
	SubjectType             string  `protobuf:"bytes,12,opt,name=subject_type,json=subjectType,proto3" json:"subject_type"`
}

func (x *GetSubjectGradeResponseData) Reset() {
	*x = GetSubjectGradeResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectGradeResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectGradeResponseData) ProtoMessage() {}

func (x *GetSubjectGradeResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectGradeResponseData.ProtoReflect.Descriptor instead.
func (*GetSubjectGradeResponseData) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{25}
}

func (x *GetSubjectGradeResponseData) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *GetSubjectGradeResponseData) GetSubjectCode() string {
	if x != nil {
		return x.SubjectCode
	}
	return ""
}

func (x *GetSubjectGradeResponseData) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *GetSubjectGradeResponseData) GetGradeSemesterId() string {
	if x != nil {
		return x.GradeSemesterId
	}
	return ""
}

func (x *GetSubjectGradeResponseData) GetGradeSemesterSchoolYear() string {
	if x != nil {
		return x.GradeSemesterSchoolYear
	}
	return ""
}

func (x *GetSubjectGradeResponseData) GetGradeSemesterType() string {
	if x != nil {
		return x.GradeSemesterType
	}
	return ""
}

func (x *GetSubjectGradeResponseData) GetGradePoint() float64 {
	if x != nil {
		return x.GradePoint
	}
	return 0
}

func (x *GetSubjectGradeResponseData) GetGradeCode() string {
	if x != nil {
		return x.GradeCode
	}
	return ""
}

func (x *GetSubjectGradeResponseData) GetSubjectIsMandatory() bool {
	if x != nil {
		return x.SubjectIsMandatory
	}
	return false
}

func (x *GetSubjectGradeResponseData) GetSemesterPackage() uint32 {
	if x != nil {
		return x.SemesterPackage
	}
	return 0
}

func (x *GetSubjectGradeResponseData) GetSubjectTotalCredit() uint32 {
	if x != nil {
		return x.SubjectTotalCredit
	}
	return 0
}

func (x *GetSubjectGradeResponseData) GetSubjectType() string {
	if x != nil {
		return x.SubjectType
	}
	return ""
}

type GetSubjectGradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta       *Meta                          `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Pagination *Pagination                    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	Data       []*GetSubjectGradeResponseData `protobuf:"bytes,3,rep,name=data,proto3" json:"data"`
}

func (x *GetSubjectGradeResponse) Reset() {
	*x = GetSubjectGradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectGradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectGradeResponse) ProtoMessage() {}

func (x *GetSubjectGradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectGradeResponse.ProtoReflect.Descriptor instead.
func (*GetSubjectGradeResponse) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{26}
}

func (x *GetSubjectGradeResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetSubjectGradeResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetSubjectGradeResponse) GetData() []*GetSubjectGradeResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BulkUpdatePaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentIds []string `protobuf:"bytes,1,rep,name=student_ids,json=studentIds,proto3" json:"student_ids"`
}

func (x *BulkUpdatePaymentRequest) Reset() {
	*x = BulkUpdatePaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdatePaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdatePaymentRequest) ProtoMessage() {}

func (x *BulkUpdatePaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdatePaymentRequest.ProtoReflect.Descriptor instead.
func (*BulkUpdatePaymentRequest) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{27}
}

func (x *BulkUpdatePaymentRequest) GetStudentIds() []string {
	if x != nil {
		return x.StudentIds
	}
	return nil
}

type BulkUpdatePaymentResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BulkUpdatePaymentResponseData) Reset() {
	*x = BulkUpdatePaymentResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdatePaymentResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdatePaymentResponseData) ProtoMessage() {}

func (x *BulkUpdatePaymentResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdatePaymentResponseData.ProtoReflect.Descriptor instead.
func (*BulkUpdatePaymentResponseData) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{28}
}

type BulkUpdatePaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                      `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *BulkUpdatePaymentResponse `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *BulkUpdatePaymentResponse) Reset() {
	*x = BulkUpdatePaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdatePaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdatePaymentResponse) ProtoMessage() {}

func (x *BulkUpdatePaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdatePaymentResponse.ProtoReflect.Descriptor instead.
func (*BulkUpdatePaymentResponse) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{29}
}

func (x *BulkUpdatePaymentResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *BulkUpdatePaymentResponse) GetData() *BulkUpdatePaymentResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPaymentLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id"`
}

func (x *GetPaymentLogRequest) Reset() {
	*x = GetPaymentLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentLogRequest) ProtoMessage() {}

func (x *GetPaymentLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentLogRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentLogRequest) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{30}
}

func (x *GetPaymentLogRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

type GetPaymentLogResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SemesterId         string `protobuf:"bytes,1,opt,name=semester_id,json=semesterId,proto3" json:"semester_id"`
	SemesterType       string `protobuf:"bytes,2,opt,name=semester_type,json=semesterType,proto3" json:"semester_type"`
	SemesterStartYear  uint32 `protobuf:"varint,3,opt,name=semester_start_year,json=semesterStartYear,proto3" json:"semester_start_year"`
	SemesterSchoolYear string `protobuf:"bytes,4,opt,name=semester_school_year,json=semesterSchoolYear,proto3" json:"semester_school_year"`
	CreatedAt          string `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
}

func (x *GetPaymentLogResponseData) Reset() {
	*x = GetPaymentLogResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentLogResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentLogResponseData) ProtoMessage() {}

func (x *GetPaymentLogResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentLogResponseData.ProtoReflect.Descriptor instead.
func (*GetPaymentLogResponseData) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{31}
}

func (x *GetPaymentLogResponseData) GetSemesterId() string {
	if x != nil {
		return x.SemesterId
	}
	return ""
}

func (x *GetPaymentLogResponseData) GetSemesterType() string {
	if x != nil {
		return x.SemesterType
	}
	return ""
}

func (x *GetPaymentLogResponseData) GetSemesterStartYear() uint32 {
	if x != nil {
		return x.SemesterStartYear
	}
	return 0
}

func (x *GetPaymentLogResponseData) GetSemesterSchoolYear() string {
	if x != nil {
		return x.SemesterSchoolYear
	}
	return ""
}

func (x *GetPaymentLogResponseData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type GetPaymentLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                        `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data []*GetPaymentLogResponseData `protobuf:"bytes,2,rep,name=data,proto3" json:"data"`
}

func (x *GetPaymentLogResponse) Reset() {
	*x = GetPaymentLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentLogResponse) ProtoMessage() {}

func (x *GetPaymentLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentLogResponse.ProtoReflect.Descriptor instead.
func (*GetPaymentLogResponse) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{32}
}

func (x *GetPaymentLogResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetPaymentLogResponse) GetData() []*GetPaymentLogResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConvertGradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId             string   `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id"`
	MbkmClassId           string   `protobuf:"bytes,2,opt,name=mbkm_class_id,json=mbkmClassId,proto3" json:"mbkm_class_id"`
	DestinationSubjectIds []string `protobuf:"bytes,3,rep,name=destination_subject_ids,json=destinationSubjectIds,proto3" json:"destination_subject_ids"`
}

func (x *ConvertGradeRequest) Reset() {
	*x = ConvertGradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertGradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertGradeRequest) ProtoMessage() {}

func (x *ConvertGradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertGradeRequest.ProtoReflect.Descriptor instead.
func (*ConvertGradeRequest) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{33}
}

func (x *ConvertGradeRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *ConvertGradeRequest) GetMbkmClassId() string {
	if x != nil {
		return x.MbkmClassId
	}
	return ""
}

func (x *ConvertGradeRequest) GetDestinationSubjectIds() []string {
	if x != nil {
		return x.DestinationSubjectIds
	}
	return nil
}

type ConvertGradeResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConvertGradeResponseData) Reset() {
	*x = ConvertGradeResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertGradeResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertGradeResponseData) ProtoMessage() {}

func (x *ConvertGradeResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertGradeResponseData.ProtoReflect.Descriptor instead.
func (*ConvertGradeResponseData) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{34}
}

type ConvertGradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta                     `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Data *ConvertGradeResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *ConvertGradeResponse) Reset() {
	*x = ConvertGradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_student_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertGradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertGradeResponse) ProtoMessage() {}

func (x *ConvertGradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_student_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertGradeResponse.ProtoReflect.Descriptor instead.
func (*ConvertGradeResponse) Descriptor() ([]byte, []int) {
	return file_admin_student_proto_rawDescGZIP(), []int{35}
}

func (x *ConvertGradeResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ConvertGradeResponse) GetData() *ConvertGradeResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_admin_student_proto protoreflect.FileDescriptor

var file_admin_student_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x72, 0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x72, 0x65, 0x76, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e,
	0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x95, 0x07, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x69, 0x6d, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6e, 0x69, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x69, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x69, 0x6d, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x54, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x65, 0x74,
	0x5f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x67, 0x65, 0x74, 0x41, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x61, 0x73, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x73, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65,
	0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x61,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x50, 0x61, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x65,
	0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x69, 0x73, 0x47, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x69, 0x73, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x79, 0x75, 0x64, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x79, 0x75, 0x64, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0xa6, 0x2e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f,
	0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x62, 0x69, 0x72, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x72, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x70, 0x77, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x70, 0x77, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x69, 0x73, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x69, 0x73, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x70, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6b, 0x70, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x73, 0x6b, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x6b, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x62,
	0x62, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x69, 0x6d, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x69,
	0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x74,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75,
	0x6c, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x6d,
	0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x6e, 0x69, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4e, 0x69, 0x6d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x6e, 0x69, 0x6d, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x4e, 0x69, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x46, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x69, 0x73, 0x53, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x36, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x47,
	0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x44, 0x0a, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x44, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x69, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x52, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69,
	0x61, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4b, 0x0a,
	0x22, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61,
	0x6e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x66,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x58, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x5c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x5f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x60, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1d, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x20, 0x6d,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x6c, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x4a, 0x0a, 0x21, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12,
	0x37, 0x0a, 0x18, 0x64, 0x69, 0x6b, 0x74, 0x69, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x64, 0x69, 0x6b, 0x74, 0x69, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x69, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x61,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x6f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x47, 0x75,
	0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x26, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x47,
	0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x72,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x12, 0x46, 0x0a, 0x20, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x18, 0x75, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x78, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65,
	0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6d, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65,
	0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x7d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x7e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x11, 0x0a, 0x03, 0x67, 0x70, 0x61,
	0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x67, 0x70, 0x61, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x81, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x12, 0x35, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69,
	0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x70,
	0x61, 0x69, 0x64, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x50,
	0x61, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x84, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x85, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x74, 0x75, 0x64, 0x79, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x15, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x39, 0x0a, 0x18, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x87, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd7,
	0x28, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x25,
	0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x62, 0x69, 0x72, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x72, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x70, 0x77, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6e, 0x70, 0x77, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x69, 0x73, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x69, 0x73, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x70, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b,
	0x70, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x73, 0x6b, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x6b, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x72,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x62, 0x62,
	0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x69, 0x6d, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x69, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c,
	0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x6d, 0x69,
	0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64,
	0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x6e, 0x69, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4e, 0x69, 0x6d, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x6e, 0x69, 0x6d, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x4e, 0x69, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x69, 0x73, 0x53, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x5f, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x47, 0x72,
	0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44,
	0x0a, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x4a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x44, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x69, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69,
	0x61, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x69, 0x61, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61,
	0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4b, 0x0a, 0x22,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69,
	0x61, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x56,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x58, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x74,
	0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x5c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x5f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d,
	0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x20, 0x6d, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6f, 0x63,
	0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x6c, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x4a, 0x0a, 0x21, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x37,
	0x0a, 0x18, 0x64, 0x69, 0x6b, 0x74, 0x69, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x64, 0x69, 0x6b, 0x74, 0x69, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x6f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1c, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x26, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x71,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x47, 0x75,
	0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x72, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x12, 0x46, 0x0a, 0x20, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18,
	0x75, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xb6, 0x1d, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x69,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x69,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x72, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x77, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x70, 0x77, 0x70, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x70, 0x77,
	0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x69, 0x73, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x69,
	0x73, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x61, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x70, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x6b, 0x65, 0x73, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73,
	0x6b, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x69, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x69, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6d,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c,
	0x75, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64,
	0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x6e, 0x69, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4e, 0x69, 0x6d, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x6e, 0x69, 0x6d, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x4e, 0x69, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x46, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x69, 0x73, 0x53, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x47, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x19,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x44, 0x0a, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x44, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x69, 0x61, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x69, 0x61, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4b, 0x0a, 0x22, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x4f, 0x63,
	0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x48, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x66, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x66,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4f, 0x63,
	0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x20, 0x6d, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x57, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1d, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75,
	0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x58, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x59, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x6c, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x70, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xc6, 0x1d, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72,
	0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c,
	0x69, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c,
	0x69, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x72, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x77, 0x12,
	0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x70, 0x77, 0x70, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x70,
	0x77, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x69, 0x73, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x69, 0x73, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x61,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x70, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x6b, 0x65, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x73, 0x6b, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x69, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x69, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75,
	0x6c, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x6e, 0x69, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4e, 0x69, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x6e, 0x69, 0x6d, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4e, 0x69, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x61, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x47, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x3a, 0x0a,
	0x19, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x44, 0x0a, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f,
	0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x44, 0x65, 0x61, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4b, 0x0a, 0x22, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61,
	0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x52, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x66,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x69, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x20, 0x6d, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x69, 0x63, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x58, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1d, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x18, 0x5a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x5b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x6c, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x70, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x1f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf9, 0x01, 0x0a, 0x17,
	0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x42, 0x75, 0x6c, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x42, 0x75, 0x6c, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6d,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb3,
	0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x6b, 0x74, 0x69,
	0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x69, 0x6b, 0x74, 0x69,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x33, 0x0a, 0x16, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x79, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8d, 0x04, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x6d,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x65,
	0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x73, 0x4d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x18, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x82, 0x01, 0x0a, 0x19, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xe2, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x7e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x90, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x62, 0x6b, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x62, 0x6b, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0xe3, 0x07, 0x0a, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x1f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x26,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x62, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x11, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67,
	0x12, 0x23, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x22, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x18, 0x5a, 0x16, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_student_proto_rawDescOnce sync.Once
	file_admin_student_proto_rawDescData = file_admin_student_proto_rawDesc
)

func file_admin_student_proto_rawDescGZIP() []byte {
	file_admin_student_proto_rawDescOnce.Do(func() {
		file_admin_student_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_student_proto_rawDescData)
	})
	return file_admin_student_proto_rawDescData
}

var file_admin_student_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_admin_student_proto_goTypes = []interface{}{
	(*Meta)(nil),                               // 0: admin_student.Meta
	(*Pagination)(nil),                         // 1: admin_student.Pagination
	(*GetListRequest)(nil),                     // 2: admin_student.GetListRequest
	(*GetListResponseData)(nil),                // 3: admin_student.GetListResponseData
	(*GetListResponse)(nil),                    // 4: admin_student.GetListResponse
	(*GetDetailRequest)(nil),                   // 5: admin_student.GetDetailRequest
	(*GetDetailResponseData)(nil),              // 6: admin_student.GetDetailResponseData
	(*GetDetailResponse)(nil),                  // 7: admin_student.GetDetailResponse
	(*CreateRequest)(nil),                      // 8: admin_student.CreateRequest
	(*CreateResponseData)(nil),                 // 9: admin_student.CreateResponseData
	(*CreateResponse)(nil),                     // 10: admin_student.CreateResponse
	(*UpdateRequest)(nil),                      // 11: admin_student.UpdateRequest
	(*UpdateResponseData)(nil),                 // 12: admin_student.UpdateResponseData
	(*UpdateResponse)(nil),                     // 13: admin_student.UpdateResponse
	(*DeleteRequest)(nil),                      // 14: admin_student.DeleteRequest
	(*DeleteResponseData)(nil),                 // 15: admin_student.DeleteResponseData
	(*DeleteResponse)(nil),                     // 16: admin_student.DeleteResponse
	(*BulkUpdateStatusRequest)(nil),            // 17: admin_student.BulkUpdateStatusRequest
	(*BulkUpdateStatusResponseData)(nil),       // 18: admin_student.BulkUpdateStatusResponseData
	(*BulkUpdateStatusResponse)(nil),           // 19: admin_student.BulkUpdateStatusResponse
	(*GetStatusSummaryRequest)(nil),            // 20: admin_student.GetStatusSummaryRequest
	(*GetStatusSummaryResponseDataStatus)(nil), // 21: admin_student.GetStatusSummaryResponseDataStatus
	(*GetStatusSummaryResponseData)(nil),       // 22: admin_student.GetStatusSummaryResponseData
	(*GetStatusSummaryResponse)(nil),           // 23: admin_student.GetStatusSummaryResponse
	(*GetSubjectGradeRequest)(nil),             // 24: admin_student.GetSubjectGradeRequest
	(*GetSubjectGradeResponseData)(nil),        // 25: admin_student.GetSubjectGradeResponseData
	(*GetSubjectGradeResponse)(nil),            // 26: admin_student.GetSubjectGradeResponse
	(*BulkUpdatePaymentRequest)(nil),           // 27: admin_student.BulkUpdatePaymentRequest
	(*BulkUpdatePaymentResponseData)(nil),      // 28: admin_student.BulkUpdatePaymentResponseData
	(*BulkUpdatePaymentResponse)(nil),          // 29: admin_student.BulkUpdatePaymentResponse
	(*GetPaymentLogRequest)(nil),               // 30: admin_student.GetPaymentLogRequest
	(*GetPaymentLogResponseData)(nil),          // 31: admin_student.GetPaymentLogResponseData
	(*GetPaymentLogResponse)(nil),              // 32: admin_student.GetPaymentLogResponse
	(*ConvertGradeRequest)(nil),                // 33: admin_student.ConvertGradeRequest
	(*ConvertGradeResponseData)(nil),           // 34: admin_student.ConvertGradeResponseData
	(*ConvertGradeResponse)(nil),               // 35: admin_student.ConvertGradeResponse
}
var file_admin_student_proto_depIdxs = []int32{
	0,  // 0: admin_student.GetListResponse.meta:type_name -> admin_student.Meta
	1,  // 1: admin_student.GetListResponse.pagination:type_name -> admin_student.Pagination
	3,  // 2: admin_student.GetListResponse.data:type_name -> admin_student.GetListResponseData
	0,  // 3: admin_student.GetDetailResponse.meta:type_name -> admin_student.Meta
	6,  // 4: admin_student.GetDetailResponse.data:type_name -> admin_student.GetDetailResponseData
	0,  // 5: admin_student.CreateResponse.meta:type_name -> admin_student.Meta
	9,  // 6: admin_student.CreateResponse.data:type_name -> admin_student.CreateResponseData
	0,  // 7: admin_student.UpdateResponse.meta:type_name -> admin_student.Meta
	12, // 8: admin_student.UpdateResponse.data:type_name -> admin_student.UpdateResponseData
	0,  // 9: admin_student.DeleteResponse.meta:type_name -> admin_student.Meta
	15, // 10: admin_student.DeleteResponse.data:type_name -> admin_student.DeleteResponseData
	0,  // 11: admin_student.BulkUpdateStatusResponse.meta:type_name -> admin_student.Meta
	18, // 12: admin_student.BulkUpdateStatusResponse.data:type_name -> admin_student.BulkUpdateStatusResponseData
	21, // 13: admin_student.GetStatusSummaryResponseData.statuses:type_name -> admin_student.GetStatusSummaryResponseDataStatus
	0,  // 14: admin_student.GetStatusSummaryResponse.meta:type_name -> admin_student.Meta
	22, // 15: admin_student.GetStatusSummaryResponse.data:type_name -> admin_student.GetStatusSummaryResponseData
	0,  // 16: admin_student.GetSubjectGradeResponse.meta:type_name -> admin_student.Meta
	1,  // 17: admin_student.GetSubjectGradeResponse.pagination:type_name -> admin_student.Pagination
	25, // 18: admin_student.GetSubjectGradeResponse.data:type_name -> admin_student.GetSubjectGradeResponseData
	0,  // 19: admin_student.BulkUpdatePaymentResponse.meta:type_name -> admin_student.Meta
	29, // 20: admin_student.BulkUpdatePaymentResponse.data:type_name -> admin_student.BulkUpdatePaymentResponse
	0,  // 21: admin_student.GetPaymentLogResponse.meta:type_name -> admin_student.Meta
	31, // 22: admin_student.GetPaymentLogResponse.data:type_name -> admin_student.GetPaymentLogResponseData
	0,  // 23: admin_student.ConvertGradeResponse.meta:type_name -> admin_student.Meta
	34, // 24: admin_student.ConvertGradeResponse.data:type_name -> admin_student.ConvertGradeResponseData
	2,  // 25: admin_student.AdminStudentHandler.GetList:input_type -> admin_student.GetListRequest
	5,  // 26: admin_student.AdminStudentHandler.GetDetail:input_type -> admin_student.GetDetailRequest
	8,  // 27: admin_student.AdminStudentHandler.Create:input_type -> admin_student.CreateRequest
	11, // 28: admin_student.AdminStudentHandler.Update:input_type -> admin_student.UpdateRequest
	14, // 29: admin_student.AdminStudentHandler.Delete:input_type -> admin_student.DeleteRequest
	17, // 30: admin_student.AdminStudentHandler.BulkUpdateStatus:input_type -> admin_student.BulkUpdateStatusRequest
	20, // 31: admin_student.AdminStudentHandler.GetStatusSummary:input_type -> admin_student.GetStatusSummaryRequest
	24, // 32: admin_student.AdminStudentHandler.GetSubjectGrade:input_type -> admin_student.GetSubjectGradeRequest
	27, // 33: admin_student.AdminStudentHandler.BulkUpdatePayment:input_type -> admin_student.BulkUpdatePaymentRequest
	30, // 34: admin_student.AdminStudentHandler.GetPaymentLog:input_type -> admin_student.GetPaymentLogRequest
	33, // 35: admin_student.AdminStudentHandler.ConvertGrade:input_type -> admin_student.ConvertGradeRequest
	4,  // 36: admin_student.AdminStudentHandler.GetList:output_type -> admin_student.GetListResponse
	7,  // 37: admin_student.AdminStudentHandler.GetDetail:output_type -> admin_student.GetDetailResponse
	10, // 38: admin_student.AdminStudentHandler.Create:output_type -> admin_student.CreateResponse
	13, // 39: admin_student.AdminStudentHandler.Update:output_type -> admin_student.UpdateResponse
	16, // 40: admin_student.AdminStudentHandler.Delete:output_type -> admin_student.DeleteResponse
	19, // 41: admin_student.AdminStudentHandler.BulkUpdateStatus:output_type -> admin_student.BulkUpdateStatusResponse
	23, // 42: admin_student.AdminStudentHandler.GetStatusSummary:output_type -> admin_student.GetStatusSummaryResponse
	26, // 43: admin_student.AdminStudentHandler.GetSubjectGrade:output_type -> admin_student.GetSubjectGradeResponse
	29, // 44: admin_student.AdminStudentHandler.BulkUpdatePayment:output_type -> admin_student.BulkUpdatePaymentResponse
	32, // 45: admin_student.AdminStudentHandler.GetPaymentLog:output_type -> admin_student.GetPaymentLogResponse
	35, // 46: admin_student.AdminStudentHandler.ConvertGrade:output_type -> admin_student.ConvertGradeResponse
	36, // [36:47] is the sub-list for method output_type
	25, // [25:36] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_admin_student_proto_init() }
func file_admin_student_proto_init() {
	if File_admin_student_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_admin_student_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateStatusResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusSummaryResponseDataStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusSummaryResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectGradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectGradeResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectGradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdatePaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdatePaymentResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdatePaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentLogResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertGradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertGradeResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_student_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertGradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_student_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_student_proto_goTypes,
		DependencyIndexes: file_admin_student_proto_depIdxs,
		MessageInfos:      file_admin_student_proto_msgTypes,
	}.Build()
	File_admin_student_proto = out.File
	file_admin_student_proto_rawDesc = nil
	file_admin_student_proto_goTypes = nil
	file_admin_student_proto_depIdxs = nil
}
