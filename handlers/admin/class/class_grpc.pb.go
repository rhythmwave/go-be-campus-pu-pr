// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: admin/class.proto

package class

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClassHandlerClient is the client API for AdminClassHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClassHandlerClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	UpdateActivation(ctx context.Context, in *UpdateActivationRequest, opts ...grpc.CallOption) (*UpdateActivationResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Duplicate(ctx context.Context, in *DuplicateRequest, opts ...grpc.CallOption) (*DuplicateResponse, error)
	BulkUpdateMaximumParticipant(ctx context.Context, in *BulkUpdateMaximumParticipantRequest, opts ...grpc.CallOption) (*BulkUpdateMaximumParticipantResponse, error)
	GetClassParticipantList(ctx context.Context, in *GetClassParticipantListRequest, opts ...grpc.CallOption) (*GetClassParticipantListResponse, error)
}

type adminClassHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClassHandlerClient(cc grpc.ClientConnInterface) AdminClassHandlerClient {
	return &adminClassHandlerClient{cc}
}

func (c *adminClassHandlerClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/admin_class.AdminClassHandler/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClassHandlerClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error) {
	out := new(GetDetailResponse)
	err := c.cc.Invoke(ctx, "/admin_class.AdminClassHandler/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClassHandlerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/admin_class.AdminClassHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClassHandlerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/admin_class.AdminClassHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClassHandlerClient) UpdateActivation(ctx context.Context, in *UpdateActivationRequest, opts ...grpc.CallOption) (*UpdateActivationResponse, error) {
	out := new(UpdateActivationResponse)
	err := c.cc.Invoke(ctx, "/admin_class.AdminClassHandler/UpdateActivation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClassHandlerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/admin_class.AdminClassHandler/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClassHandlerClient) Duplicate(ctx context.Context, in *DuplicateRequest, opts ...grpc.CallOption) (*DuplicateResponse, error) {
	out := new(DuplicateResponse)
	err := c.cc.Invoke(ctx, "/admin_class.AdminClassHandler/Duplicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClassHandlerClient) BulkUpdateMaximumParticipant(ctx context.Context, in *BulkUpdateMaximumParticipantRequest, opts ...grpc.CallOption) (*BulkUpdateMaximumParticipantResponse, error) {
	out := new(BulkUpdateMaximumParticipantResponse)
	err := c.cc.Invoke(ctx, "/admin_class.AdminClassHandler/BulkUpdateMaximumParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClassHandlerClient) GetClassParticipantList(ctx context.Context, in *GetClassParticipantListRequest, opts ...grpc.CallOption) (*GetClassParticipantListResponse, error) {
	out := new(GetClassParticipantListResponse)
	err := c.cc.Invoke(ctx, "/admin_class.AdminClassHandler/GetClassParticipantList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminClassHandlerServer is the server API for AdminClassHandler service.
// All implementations must embed UnimplementedAdminClassHandlerServer
// for forward compatibility
type AdminClassHandlerServer interface {
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	UpdateActivation(context.Context, *UpdateActivationRequest) (*UpdateActivationResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Duplicate(context.Context, *DuplicateRequest) (*DuplicateResponse, error)
	BulkUpdateMaximumParticipant(context.Context, *BulkUpdateMaximumParticipantRequest) (*BulkUpdateMaximumParticipantResponse, error)
	GetClassParticipantList(context.Context, *GetClassParticipantListRequest) (*GetClassParticipantListResponse, error)
	mustEmbedUnimplementedAdminClassHandlerServer()
}

// UnimplementedAdminClassHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedAdminClassHandlerServer struct {
}

func (UnimplementedAdminClassHandlerServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedAdminClassHandlerServer) GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedAdminClassHandlerServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAdminClassHandlerServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAdminClassHandlerServer) UpdateActivation(context.Context, *UpdateActivationRequest) (*UpdateActivationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActivation not implemented")
}
func (UnimplementedAdminClassHandlerServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdminClassHandlerServer) Duplicate(context.Context, *DuplicateRequest) (*DuplicateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Duplicate not implemented")
}
func (UnimplementedAdminClassHandlerServer) BulkUpdateMaximumParticipant(context.Context, *BulkUpdateMaximumParticipantRequest) (*BulkUpdateMaximumParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdateMaximumParticipant not implemented")
}
func (UnimplementedAdminClassHandlerServer) GetClassParticipantList(context.Context, *GetClassParticipantListRequest) (*GetClassParticipantListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassParticipantList not implemented")
}
func (UnimplementedAdminClassHandlerServer) mustEmbedUnimplementedAdminClassHandlerServer() {}

// UnsafeAdminClassHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminClassHandlerServer will
// result in compilation errors.
type UnsafeAdminClassHandlerServer interface {
	mustEmbedUnimplementedAdminClassHandlerServer()
}

func RegisterAdminClassHandlerServer(s grpc.ServiceRegistrar, srv AdminClassHandlerServer) {
	s.RegisterService(&AdminClassHandler_ServiceDesc, srv)
}

func _AdminClassHandler_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminClassHandlerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_class.AdminClassHandler/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminClassHandlerServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminClassHandler_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminClassHandlerServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_class.AdminClassHandler/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminClassHandlerServer).GetDetail(ctx, req.(*GetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminClassHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminClassHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_class.AdminClassHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminClassHandlerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminClassHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminClassHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_class.AdminClassHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminClassHandlerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminClassHandler_UpdateActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminClassHandlerServer).UpdateActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_class.AdminClassHandler/UpdateActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminClassHandlerServer).UpdateActivation(ctx, req.(*UpdateActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminClassHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminClassHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_class.AdminClassHandler/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminClassHandlerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminClassHandler_Duplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DuplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminClassHandlerServer).Duplicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_class.AdminClassHandler/Duplicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminClassHandlerServer).Duplicate(ctx, req.(*DuplicateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminClassHandler_BulkUpdateMaximumParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateMaximumParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminClassHandlerServer).BulkUpdateMaximumParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_class.AdminClassHandler/BulkUpdateMaximumParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminClassHandlerServer).BulkUpdateMaximumParticipant(ctx, req.(*BulkUpdateMaximumParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminClassHandler_GetClassParticipantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassParticipantListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminClassHandlerServer).GetClassParticipantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_class.AdminClassHandler/GetClassParticipantList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminClassHandlerServer).GetClassParticipantList(ctx, req.(*GetClassParticipantListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminClassHandler_ServiceDesc is the grpc.ServiceDesc for AdminClassHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminClassHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_class.AdminClassHandler",
	HandlerType: (*AdminClassHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _AdminClassHandler_GetList_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _AdminClassHandler_GetDetail_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AdminClassHandler_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AdminClassHandler_Update_Handler,
		},
		{
			MethodName: "UpdateActivation",
			Handler:    _AdminClassHandler_UpdateActivation_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdminClassHandler_Delete_Handler,
		},
		{
			MethodName: "Duplicate",
			Handler:    _AdminClassHandler_Duplicate_Handler,
		},
		{
			MethodName: "BulkUpdateMaximumParticipant",
			Handler:    _AdminClassHandler_BulkUpdateMaximumParticipant_Handler,
		},
		{
			MethodName: "GetClassParticipantList",
			Handler:    _AdminClassHandler_GetClassParticipantList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/class.proto",
}
