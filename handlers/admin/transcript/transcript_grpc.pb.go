// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: admin/transcript.proto

package transcript

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminTranscriptHandlerClient is the client API for AdminTranscriptHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminTranscriptHandlerClient interface {
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error)
}

type adminTranscriptHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminTranscriptHandlerClient(cc grpc.ClientConnInterface) AdminTranscriptHandlerClient {
	return &adminTranscriptHandlerClient{cc}
}

func (c *adminTranscriptHandlerClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error) {
	out := new(GetDetailResponse)
	err := c.cc.Invoke(ctx, "/admin_transcript.AdminTranscriptHandler/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminTranscriptHandlerServer is the server API for AdminTranscriptHandler service.
// All implementations must embed UnimplementedAdminTranscriptHandlerServer
// for forward compatibility
type AdminTranscriptHandlerServer interface {
	GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error)
	mustEmbedUnimplementedAdminTranscriptHandlerServer()
}

// UnimplementedAdminTranscriptHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedAdminTranscriptHandlerServer struct {
}

func (UnimplementedAdminTranscriptHandlerServer) GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedAdminTranscriptHandlerServer) mustEmbedUnimplementedAdminTranscriptHandlerServer() {
}

// UnsafeAdminTranscriptHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminTranscriptHandlerServer will
// result in compilation errors.
type UnsafeAdminTranscriptHandlerServer interface {
	mustEmbedUnimplementedAdminTranscriptHandlerServer()
}

func RegisterAdminTranscriptHandlerServer(s grpc.ServiceRegistrar, srv AdminTranscriptHandlerServer) {
	s.RegisterService(&AdminTranscriptHandler_ServiceDesc, srv)
}

func _AdminTranscriptHandler_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminTranscriptHandlerServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_transcript.AdminTranscriptHandler/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminTranscriptHandlerServer).GetDetail(ctx, req.(*GetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminTranscriptHandler_ServiceDesc is the grpc.ServiceDesc for AdminTranscriptHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminTranscriptHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_transcript.AdminTranscriptHandler",
	HandlerType: (*AdminTranscriptHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDetail",
			Handler:    _AdminTranscriptHandler_GetDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/transcript.proto",
}
